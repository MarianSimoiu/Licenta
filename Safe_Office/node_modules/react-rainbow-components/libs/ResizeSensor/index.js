'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/* eslint-disable no-param-reassign, no-plusplus */

/**
 * Based on Marc J. Schmidt library: https://github.com/marcj/css-element-queries/blob/master
 */

var EventQueue = function () {
    function EventQueue() {
        _classCallCheck(this, EventQueue);

        this.q = [];
    }

    _createClass(EventQueue, [{
        key: 'add',
        value: function add(ev) {
            this.q.push(ev);
        }
    }, {
        key: 'call',
        value: function call(sizeInfo) {
            for (var i = 0, j = this.q.length; i < j; i++) {
                this.q[i].call(this, sizeInfo);
            }
        }
    }, {
        key: 'remove',
        value: function remove(ev) {
            var newQueue = [];
            for (var i = 0, j = this.q.length; i < j; i++) {
                if (this.q[i] !== ev) {
                    newQueue.push(this.q[i]);
                }
            }
            this.q = newQueue;
        }
    }, {
        key: 'length',
        value: function length() {
            return this.q.length;
        }
    }]);

    return EventQueue;
}();

/**
 * Get element size
 * @param {HTMLElement} element - element to return the size.
 * @returns {Object} {width, height}
 */


function getElementSize(element) {
    var rect = element.getBoundingClientRect();
    return {
        width: Math.round(rect.width),
        height: Math.round(rect.height)
    };
}

function createResizeSensor() {
    var resizeSensor = document.createElement('div');
    resizeSensor.dir = 'ltr';
    resizeSensor.className = 'resize-sensor';
    var style = 'position: absolute; left: -10px; top: -10px; right: 0; bottom: 0; overflow: hidden; z-index: -1; visibility: hidden;';
    var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';

    resizeSensor.style.cssText = style;
    // eslint-disable-next-line lwc/no-inner-html
    resizeSensor.innerHTML = '<div class="resize-sensor-expand" style="' + style + '">' + ('<div style="' + styleChild + '"></div>') + '</div>' + ('<div class="resize-sensor-shrink" style="' + style + '">') + ('<div style="' + styleChild + ' width: 200%; height: 200%"></div>') + '</div>';

    return resizeSensor;
}

/**
 *
 * @param {HTMLElement} element - element to listen resize.
 * @param {Function}    resizeListener - resize event listener.
 */
function attachResizeEvent(element, resizeListener) {
    if (!element) {
        return;
    }
    if (element.resizedAttached) {
        element.resizedAttached.add(resizeListener);
        return;
    }

    element.resizedAttached = new EventQueue();
    element.resizedAttached.add(resizeListener);

    var resizeSensor = createResizeSensor();
    element.resizeSensor = resizeSensor;
    element.appendChild(resizeSensor);

    var position = (window.getComputedStyle(element) || element.style).getPropertyValue('position');

    if (position !== 'absolute' && position !== 'relative' && position !== 'fixed') {
        element.style.position = 'relative';
    }

    var expand = resizeSensor.childNodes[0];
    var expandChild = expand.childNodes[0];
    var shrink = resizeSensor.childNodes[1];

    var dirty = void 0;
    var rafId = void 0;
    var size = getElementSize(element);
    var lastWidth = size.width;
    var lastHeight = size.height;
    var initialHiddenCheck = true;
    var resetRafId = void 0;

    var resetExpandShrink = function resetExpandShrink() {
        expandChild.style.width = '100000px';
        expandChild.style.height = '100000px';

        expand.scrollLeft = 100000;
        expand.scrollTop = 100000;

        shrink.scrollLeft = 100000;
        shrink.scrollTop = 100000;
    };

    var reset = function reset() {
        // Check if element is hidden
        if (initialHiddenCheck) {
            if (!expand.scrollTop && !expand.scrollLeft) {
                // reset
                resetExpandShrink();

                // Check in next frame
                if (!resetRafId) {
                    resetRafId = requestAnimationFrame(function () {
                        resetRafId = 0;
                        reset();
                    });
                }

                return;
            }

            initialHiddenCheck = false;
        }

        resetExpandShrink();
    };
    resizeSensor.resetSensor = reset;

    var onResized = function onResized() {
        rafId = 0;

        if (!dirty) {
            return;
        }

        lastWidth = size.width;
        lastHeight = size.height;

        if (element.resizedAttached) {
            element.resizedAttached.call(size);
        }
    };

    var onScroll = function onScroll() {
        size = getElementSize(element);
        dirty = size.width !== lastWidth || size.height !== lastHeight;

        if (dirty && !rafId) {
            rafId = requestAnimationFrame(onResized);
        }

        reset();
    };

    var addEvent = function addEvent(el, name, cb) {
        el.addEventListener(name, cb);
    };

    addEvent(expand, 'scroll', onScroll);
    addEvent(shrink, 'scroll', onScroll);

    // Fix for custom Elements
    requestAnimationFrame(reset);
}

function _detach(elem, ev) {
    if (!elem) {
        return;
    }
    if (elem.resizedAttached && typeof ev === 'function') {
        elem.resizedAttached.remove(ev);
        if (elem.resizedAttached.length()) {
            return;
        }
    }
    if (elem.resizeSensor) {
        if (elem.contains(elem.resizeSensor)) {
            elem.removeChild(elem.resizeSensor);
        }
        delete elem.resizeSensor;
        delete elem.resizedAttached;
    }
}

var ResizeSensor = function () {
    function ResizeSensor(element, resizeListener) {
        _classCallCheck(this, ResizeSensor);

        this.targetElement = element;
        this.resizeListener = resizeListener;

        attachResizeEvent(this.targetElement, this.resizeListener);
    }

    _createClass(ResizeSensor, [{
        key: 'detach',
        value: function detach() {
            _detach(this.targetElement, this.resizeListener);
        }
    }, {
        key: 'reset',
        value: function reset() {
            this.targetElement.resizeSensor.resetSensor();
        }
    }]);

    return ResizeSensor;
}();

exports.default = ResizeSensor;
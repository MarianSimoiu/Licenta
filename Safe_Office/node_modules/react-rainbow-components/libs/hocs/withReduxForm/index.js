'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = withReduxForm;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function withReduxForm(WrappedComponent) {
    return function (_Component) {
        _inherits(_class, _Component);

        function _class(props) {
            _classCallCheck(this, _class);

            var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

            _this.fieldRef = _react2.default.createRef();
            return _this;
        }

        _createClass(_class, [{
            key: 'getErrorMessage',
            value: function getErrorMessage() {
                var _props = this.props,
                    meta = _props.meta,
                    error = _props.error;


                if (meta) {
                    var touched = meta.touched,
                        submitFailed = meta.submitFailed,
                        metaError = meta.error;


                    if ((touched || submitFailed) && metaError) {
                        return metaError;
                    }
                }

                return error;
            }
        }, {
            key: 'focus',
            value: function focus() {
                this.fieldRef.current.focus();
            }
        }, {
            key: 'click',
            value: function click() {
                this.fieldRef.current.click();
            }
        }, {
            key: 'blur',
            value: function blur() {
                this.fieldRef.current.blur();
            }
        }, {
            key: 'render',
            value: function render() {
                var _props2 = this.props,
                    error = _props2.error,
                    input = _props2.input,
                    meta = _props2.meta,
                    rest = _objectWithoutProperties(_props2, ['error', 'input', 'meta']);

                return _react2.default.createElement(WrappedComponent, _extends({}, rest, input, {
                    error: this.getErrorMessage(),
                    ref: this.fieldRef
                }));
            }
        }]);

        return _class;
    }(_react.Component);
}
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageLookupMenuItem = require('./menuItem');

/**
 * Lookup page object class.
 * @class
 */

var PageLookup = function () {
    /**
     * Create a new Lookup page object.
     * @constructor
     * @param {string} rootElement - The selector of the Lookup root element.
     */
    function PageLookup(rootElement) {
        _classCallCheck(this, PageLookup);

        this.rootElement = rootElement;
    }

    /**
     * Clicks the input element.
     * @method
     */


    _createClass(PageLookup, [{
        key: 'click',
        value: function click() {
            $(this.rootElement).$('input[type="search"]').click();
        }

        /**
         * Clicks the close button element.
         * @method
         */

    }, {
        key: 'clickCloseButton',
        value: function clickCloseButton() {
            $(this.rootElement).$('button[title="close"]').click();
        }

        /**
         * Returns true when the input element has focus.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'hasFocusInput',
        value: function hasFocusInput() {
            return $(this.rootElement).$('input[type="search"]').isFocused();
        }

        /**
         * Type in the input element.
         * @method
         * @param {string} value - The value to type in the input element.
         */

    }, {
        key: 'setQuery',
        value: function setQuery(value) {
            $(this.rootElement).$('input[type="search"]').setValue(value);
        }

        /**
         * Clear the input element.
         * @method
         */

    }, {
        key: 'clearQuery',
        value: function clearQuery() {
            $(this.rootElement).$('input[type="search"]').clearValue();
        }

        /**
         * Get the value typed in the input element.
         * @method
         * @returns {string}
         */

    }, {
        key: 'getQuery',
        value: function getQuery() {
            return $(this.rootElement).$('input[type="search"]').getValue();
        }

        /**
         * Get the number of matched options.
         * @method
         * @returns {number}
         */

    }, {
        key: 'getOptionsLength',
        value: function getOptionsLength() {
            return $(this.rootElement).$$('li.rainbow-lookup_menu-item').length;
        }

        /**
         * Returns a new LookupMenuItem page object of the element in item position.
         * @method
         * @param {number} itemPosition - The base 0 index of the LookupMenuItem.
         */

    }, {
        key: 'getOption',
        value: function getOption(itemPosition) {
            var items = $(this.rootElement).$$('li.rainbow-lookup_menu-item');
            if (items[itemPosition]) {
                return new PageLookupMenuItem(this.rootElement + ' li.rainbow-lookup_menu-item:nth-child(' + (itemPosition + 1) + ')');
            }
            return null;
        }

        /**
         * Get the label of the selected option.
         * @method
         * @returns {string}
         */

    }, {
        key: 'getSelectedOptionLabel',
        value: function getSelectedOptionLabel() {
            var content = $(this.rootElement).$('.rainbow-lookup_chip-content_label');
            if (content) {
                return content.getText();
            }
            return '';
        }

        /**
         * Returns true when the options menu is open, false otherwise.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isMenuOpen',
        value: function isMenuOpen() {
            return $(this.rootElement).$('.rainbow-lookup_options-container').isDisplayed();
        }

        /**
         * Returns true when the empty message is displayed, false otherwise.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isMenuEmpty',
        value: function isMenuEmpty() {
            return $(this.rootElement).$('.rainbow-lookup_options-container--empty').isDisplayed();
        }

        /**
         * Wait until the options menu is open.
         * @method
         */

    }, {
        key: 'waitUntilOpen',
        value: function waitUntilOpen() {
            var _this = this;

            browser.waitUntil(function () {
                return _this.isMenuOpen();
            });
        }
    }]);

    return PageLookup;
}();

module.exports = PageLookup;
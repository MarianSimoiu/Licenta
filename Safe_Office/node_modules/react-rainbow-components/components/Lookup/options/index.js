'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _menuItem = require('./menuItem');

var _menuItem2 = _interopRequireDefault(_menuItem);

var _searchIcon = require('../icons/searchIcon');

var _searchIcon2 = _interopRequireDefault(_searchIcon);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function MenuItems(props) {
    var items = props.items,
        _onClick = props.onClick,
        focusedItemIndex = props.focusedItemIndex,
        onHover = props.onHover;


    return items.map(function (item, index) {
        var label = item.label,
            description = item.description,
            icon = item.icon,
            type = item.type;

        var isActive = index === focusedItemIndex;
        var key = 'lookup-item-' + index;

        if (type === 'header') {
            return _react2.default.createElement(
                'li',
                { key: key, className: 'rainbow-lookup_menu-item_header', role: 'separator' },
                _react2.default.createElement(
                    'span',
                    { className: 'rainbow-lookup_menu-item_header-label' },
                    label
                )
            );
        }

        return _react2.default.createElement(_menuItem2.default, {
            key: key,
            label: label,
            description: description,
            icon: icon,
            isActive: isActive,
            index: index,
            onHover: onHover,
            onClick: function onClick() {
                return _onClick(item);
            }
        });
    });
}

var Options = function (_React$PureComponent) {
    _inherits(Options, _React$PureComponent);

    function Options(props) {
        _classCallCheck(this, Options);

        var _this = _possibleConstructorReturn(this, (Options.__proto__ || Object.getPrototypeOf(Options)).call(this, props));

        _this.containerRef = _react2.default.createRef();
        return _this;
    }

    _createClass(Options, [{
        key: 'getRef',
        value: function getRef() {
            return this.containerRef.current;
        }
    }, {
        key: 'scrollTo',
        value: function scrollTo(offset) {
            this.containerRef.current.scrollTo(0, offset);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                items = _props.items,
                value = _props.value,
                onSelectOption = _props.onSelectOption,
                onHoverOption = _props.onHoverOption,
                focusedItemIndex = _props.focusedItemIndex,
                itemHeight = _props.itemHeight;


            if (items.length === 0) {
                return _react2.default.createElement(
                    'div',
                    { className: 'rainbow-lookup_options-container rainbow-lookup_options-container--empty' },
                    _react2.default.createElement(_searchIcon2.default, { className: 'rainbow-lookup_options-empty-message_search-icon' }),
                    _react2.default.createElement(
                        'span',
                        { className: 'rainbow-lookup_options-empty-message' },
                        'Our robots did not find any match for',
                        _react2.default.createElement(
                            'span',
                            { className: 'rainbow-lookup_options-empty-message_match-value' },
                            ' "' + value + '"'
                        )
                    )
                );
            }

            var resultContainerStyles = {
                height: itemHeight * items.length + 17,
                maxHeight: 256
            };

            return _react2.default.createElement(
                'ul',
                {
                    className: 'rainbow-lookup_options-container',
                    style: resultContainerStyles,
                    ref: this.containerRef
                },
                _react2.default.createElement(MenuItems, {
                    items: items,
                    focusedItemIndex: focusedItemIndex,
                    onClick: onSelectOption,
                    onHover: onHoverOption
                })
            );
        }
    }]);

    return Options;
}(_react2.default.PureComponent);

exports.default = Options;


Options.propTypes = {
    items: _propTypes2.default.array,
    value: _propTypes2.default.string,
    onSelectOption: _propTypes2.default.func,
    onHoverOption: _propTypes2.default.func,
    focusedItemIndex: _propTypes2.default.number,
    itemHeight: _propTypes2.default.number.isRequired
};

Options.defaultProps = {
    items: [],
    value: undefined,
    onSelectOption: function onSelectOption() {},
    onHoverOption: function onHoverOption() {},
    focusedItemIndex: undefined
};
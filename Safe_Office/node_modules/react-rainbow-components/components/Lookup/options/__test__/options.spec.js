'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('../');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Options />', function () {
    it('should render the empty message when items is an empty array', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { items: [], value: 'abc' }));
        expect(component.find('div').text()).toBe('Our robots did not find any match for "abc"');
    });
    it('should render the options list when there are items', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { items: [{}] }));
        expect(component.find('ul').exists()).toBe(true);
    });
    it('should pass the right height to the ul element', function () {
        var values = [[{}], [{}, {}], [{}, {}, {}, {}], [{}, {}, {}, {}, {}, {}]];
        var expects = [65, 113, 209, 305];
        values.forEach(function (items, index) {
            var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { items: items, itemHeight: 48 }));
            expect(component.find('ul').prop('style').height).toBe(expects[index]);
        });
    });
    it('should render the amount of menu items passed as items', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { items: [{}, {}, {}] }));
        expect(component.find('MenuItem').children().length).toBe(3);
    });
    it('should set the right isActive in the items when a focusedItemIndex is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { items: [{}, {}, {}], focusedItemIndex: 1 }));
        expect(component.find('MenuItem').at(0).prop('isActive')).toBe(false);
        expect(component.find('MenuItem').at(1).prop('isActive')).toBe(true);
        expect(component.find('MenuItem').at(2).prop('isActive')).toBe(false);
    });
    it('should render a header item when has type "header"', function () {
        var items = [{
            type: 'header',
            label: 'header item'
        }];
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { items: items }));
        expect(component.find('li.rainbow-lookup_menu-item_header').exists()).toBe(true);
        expect(component.find('li.rainbow-lookup_menu-item_header').text()).toBe('header item');
    });
    it('should fire an event with the right data when click an item', function () {
        var items = [{ label: 'London', description: 'awesome city' }, { label: 'Moscow' }];
        var onSelectOptionMockFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { items: items, onSelectOption: onSelectOptionMockFn }));
        component.find('li[role="presentation"]').at(1).simulate('click');
        expect(onSelectOptionMockFn).toHaveBeenCalledWith({ label: 'Moscow' });
    });
    it('should fire an event with the right data when hover an item', function () {
        var items = [{ label: 'London', description: 'awesome city' }, { label: 'Moscow' }];
        var onHoverOptionMockFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { items: items, onHoverOption: onHoverOptionMockFn }));
        component.find('li[role="presentation"]').at(1).simulate('mouseEnter');
        expect(onHoverOptionMockFn).toHaveBeenCalledWith(1);
    });
});
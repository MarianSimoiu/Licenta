'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _Chip = require('../Chip');

var _Chip2 = _interopRequireDefault(_Chip);

var _Spinner = require('../Spinner');

var _Spinner2 = _interopRequireDefault(_Spinner);

var _label = require('./label');

var _label2 = _interopRequireDefault(_label);

var _rightElement = require('./rightElement');

var _rightElement2 = _interopRequireDefault(_rightElement);

var _options = require('./options');

var _options2 = _interopRequireDefault(_options);

var _chipContent = require('./chipContent');

var _chipContent2 = _interopRequireDefault(_chipContent);

var _helpers = require('./helpers');

var _utils = require('../../libs/utils');

var _constants = require('../../libs/constants');

var _withReduxForm = require('../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/no-did-update-set-state, react/no-did-mount-set-state */


var OPTION_HEIGHT = 48;

/**
 * A Lookup is an autocomplete text input that will search against a database object,
 * it is enhanced by a panel of suggested options.
 * @category Form
 */

var Lookup = function (_Component) {
    _inherits(Lookup, _Component);

    function Lookup(props) {
        var _this$keyHandlerMap;

        _classCallCheck(this, Lookup);

        var _this = _possibleConstructorReturn(this, (Lookup.__proto__ || Object.getPrototypeOf(Lookup)).call(this, props));

        var normalizedOptions = (0, _helpers.getNormalizedOptions)(props.options || []);
        _this.state = {
            searchValue: '',
            isFocused: false,
            options: normalizedOptions,
            focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(normalizedOptions)
        };
        _this.inputId = (0, _utils.uniqueId)('lookup-input');
        _this.errorMessageId = (0, _utils.uniqueId)('error-message');
        _this.containerRef = _react2.default.createRef();
        _this.innerContainerRef = _react2.default.createRef();
        _this.inputRef = _react2.default.createRef();
        _this.menuRef = _react2.default.createRef();
        _this.handleSearch = _this.handleSearch.bind(_this);
        _this.clearInput = _this.clearInput.bind(_this);
        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleChange = _this.handleChange.bind(_this);
        _this.handleFocus = _this.handleFocus.bind(_this);
        _this.handleRemoveValue = _this.handleRemoveValue.bind(_this);

        _this.handleHover = _this.handleHover.bind(_this);
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
        _this.handleKeyUpPressed = _this.handleKeyUpPressed.bind(_this);
        _this.handleKeyDownPressed = _this.handleKeyDownPressed.bind(_this);
        _this.handleKeyEnterPressed = _this.handleKeyEnterPressed.bind(_this);
        _this.keyHandlerMap = (_this$keyHandlerMap = {}, _defineProperty(_this$keyHandlerMap, _constants.UP_KEY, _this.handleKeyUpPressed), _defineProperty(_this$keyHandlerMap, _constants.DOWN_KEY, _this.handleKeyDownPressed), _defineProperty(_this$keyHandlerMap, _constants.ENTER_KEY, _this.handleKeyEnterPressed), _this$keyHandlerMap);
        return _this;
    }

    _createClass(Lookup, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var prevOptions = prevProps.options;
            var options = this.props.options;

            if (prevOptions !== options) {
                var normalizedOptions = (0, _helpers.getNormalizedOptions)(options);
                this.setState({
                    options: normalizedOptions,
                    focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(normalizedOptions)
                });
            }
        }
    }, {
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var _props = this.props,
                className = _props.className,
                error = _props.error;

            return (0, _classnames2.default)('rainbow-lookup_container', {
                'rainbow-lookup_container--error': error
            }, className);
        }
    }, {
        key: 'getInputClassNames',
        value: function getInputClassNames() {
            var isLoading = this.props.isLoading;

            return (0, _classnames2.default)('rainbow-lookup_input', {
                'rainbow-lookup_input--loading': isLoading
            });
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            var value = this.props.value;

            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && !Array.isArray(value)) {
                return value;
            }
            return undefined;
        }
    }, {
        key: 'getErrorMessageId',
        value: function getErrorMessageId() {
            var error = this.props.error;

            if (error) {
                return this.errorMessageId;
            }
            return undefined;
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            var ref = this.innerContainerRef.current;
            var isClickInsideLookup = ref && ref.contains(event.target);
            if (isClickInsideLookup) {
                return null;
            }
            return this.closeMenu();
        }
    }, {
        key: 'handleChange',
        value: function handleChange(value) {
            var onChange = this.props.onChange;

            this.setState({
                searchValue: ''
            });
            onChange(value);
            this.containerRef.current.focus();
        }
    }, {
        key: 'handleSearch',
        value: function handleSearch(event) {
            var value = event.target.value;

            this.setState({
                searchValue: value
            });
            this.fireSearch(value);
        }
    }, {
        key: 'handleFocus',
        value: function handleFocus(event) {
            var onFocus = this.props.onFocus;

            this.openMenu();
            onFocus(event);
        }
    }, {
        key: 'handleRemoveValue',
        value: function handleRemoveValue() {
            var _this2 = this;

            var _props2 = this.props,
                onChange = _props2.onChange,
                onSearch = _props2.onSearch;

            onChange(null);
            onSearch('');
            setTimeout(function () {
                return _this2.focus();
            }, 0);
        }
    }, {
        key: 'fireSearch',
        value: function fireSearch(value) {
            var _props3 = this.props,
                onSearch = _props3.onSearch,
                debounce = _props3.debounce;

            if (debounce && value) {
                this.resetTimeout();
                this.timeout = setTimeout(function () {
                    onSearch(value);
                }, 500);
            } else {
                this.resetTimeout();
                onSearch(value);
            }
        }
    }, {
        key: 'clearInput',
        value: function clearInput() {
            var _this3 = this;

            var searchValue = '';
            this.setState({
                searchValue: searchValue
            });
            this.fireSearch(searchValue);
            setTimeout(function () {
                return _this3.focus();
            }, 0);
        }
    }, {
        key: 'resetTimeout',
        value: function resetTimeout() {
            if (this.timeout) {
                clearTimeout(this.timeout);
            }
        }
    }, {
        key: 'openMenu',
        value: function openMenu() {
            window.addEventListener('click', this.handleClick);
            window.addEventListener('touchstart', this.handleClick);
            return this.setState({
                isFocused: true
            });
        }
    }, {
        key: 'closeMenu',
        value: function closeMenu() {
            var options = this.state.options;

            window.removeEventListener('click', this.handleClick);
            window.removeEventListener('touchstart', this.handleClick);
            return this.setState({
                isFocused: false,
                focusedItemIndex: (0, _helpers.getInitialFocusedIndex)(options)
            });
        }
    }, {
        key: 'isMenuOpen',
        value: function isMenuOpen() {
            var _state = this.state,
                searchValue = _state.searchValue,
                isFocused = _state.isFocused;
            var options = this.props.options;

            var isMenuEmpty = isFocused && !!searchValue && Array.isArray(options) && options.length === 0;
            var isOpen = isFocused && Array.isArray(options) && !!options.length;
            return isOpen || isMenuEmpty;
        }
    }, {
        key: 'handleHover',
        value: function handleHover(index) {
            this.setState({
                focusedItemIndex: index
            });
        }
    }, {
        key: 'handleKeyDown',
        value: function handleKeyDown(event) {
            var searchValue = this.state.searchValue;
            var keyCode = event.keyCode;

            if (keyCode === _constants.ESCAPE_KEY && !!searchValue) {
                event.stopPropagation();
            }
            if ((0, _helpers.isNavigationKey)(keyCode) && this.isMenuOpen()) {
                event.preventDefault();
                event.stopPropagation();
                if (this.keyHandlerMap[keyCode]) {
                    this.keyHandlerMap[keyCode]();
                }
            }
        }
    }, {
        key: 'handleKeyUpPressed',
        value: function handleKeyUpPressed() {
            var _state2 = this.state,
                focusedItemIndex = _state2.focusedItemIndex,
                options = _state2.options;

            if (focusedItemIndex > 0) {
                var prevIndex = focusedItemIndex - 1;
                var prevFocusedIndex = options[prevIndex].type === 'header' ? focusedItemIndex - 2 : prevIndex;
                if (prevFocusedIndex >= 0) {
                    this.setState({
                        focusedItemIndex: prevFocusedIndex
                    });
                }
                this.scrollUp(prevFocusedIndex);
            }
        }
    }, {
        key: 'scrollUp',
        value: function scrollUp(prevFocusedIndex) {
            var options = this.state.options;

            var menu = this.menuRef.current.getRef();
            var prevIndex = prevFocusedIndex >= 0 ? prevFocusedIndex : 0;
            var prevFocusedOption = menu.childNodes[prevIndex];

            if (options.length > 5 && !(0, _helpers.isOptionVisible)(prevFocusedOption, menu)) {
                this.menuRef.current.scrollTo(OPTION_HEIGHT * prevIndex);
            }
        }
    }, {
        key: 'handleKeyDownPressed',
        value: function handleKeyDownPressed() {
            var _state3 = this.state,
                focusedItemIndex = _state3.focusedItemIndex,
                options = _state3.options;

            var lastIndex = options.length - 1;
            if (focusedItemIndex < lastIndex) {
                var nextIndex = focusedItemIndex + 1;
                var nextFocusedIndex = options[nextIndex].type === 'header' ? focusedItemIndex + 2 : nextIndex;
                if (nextFocusedIndex <= lastIndex) {
                    this.setState({
                        focusedItemIndex: nextFocusedIndex
                    });
                    this.scrollDown(nextFocusedIndex);
                }
            }
        }
    }, {
        key: 'scrollDown',
        value: function scrollDown(nextFocusedIndex) {
            var options = this.state.options;

            var menu = this.menuRef.current.getRef();
            var nextFocusedOption = menu.childNodes[nextFocusedIndex];

            if (options.length > 5 && !(0, _helpers.isOptionVisible)(nextFocusedOption, menu)) {
                this.menuRef.current.scrollTo(OPTION_HEIGHT * (nextFocusedIndex - 4));
            }
        }
    }, {
        key: 'handleKeyEnterPressed',
        value: function handleKeyEnterPressed() {
            var _this4 = this;

            var onChange = this.props.onChange;
            var focusedItemIndex = this.state.focusedItemIndex;
            var options = this.state.options;

            var value = options[focusedItemIndex];
            this.setState({
                searchValue: ''
            });
            onChange(value);
            setTimeout(function () {
                return _this4.containerRef.current.focus();
            }, 0);
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.inputRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.inputRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.inputRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props4 = this.props,
                style = _props4.style,
                label = _props4.label,
                error = _props4.error,
                placeholder = _props4.placeholder,
                disabled = _props4.disabled,
                readOnly = _props4.readOnly,
                tabIndex = _props4.tabIndex,
                onBlur = _props4.onBlur,
                onClick = _props4.onClick,
                required = _props4.required,
                id = _props4.id,
                name = _props4.name,
                hideLabel = _props4.hideLabel,
                isLoading = _props4.isLoading;
            var _state4 = this.state,
                searchValue = _state4.searchValue,
                focusedItemIndex = _state4.focusedItemIndex,
                options = _state4.options;

            var chipOnDelete = disabled || readOnly ? undefined : this.handleRemoveValue;
            var isOpenMenu = this.isMenuOpen();
            var errorMessageId = this.getErrorMessageId();
            var currentValue = this.getValue();

            return _react2.default.createElement(
                'div',
                {
                    id: id,
                    className: this.getContainerClassNames(),
                    style: style,
                    role: 'presentation',
                    onKeyDown: this.handleKeyDown,
                    ref: this.containerRef,
                    tabIndex: -1
                },
                _react2.default.createElement(_label2.default, {
                    label: label,
                    hideLabel: hideLabel,
                    required: required,
                    inputId: this.inputId,
                    readOnly: readOnly
                }),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!currentValue },
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-lookup_chip-content_container' },
                        _react2.default.createElement(_Chip2.default, {
                            className: 'rainbow-lookup_chip',
                            label: _react2.default.createElement(_chipContent2.default, currentValue),
                            variant: 'neutral',
                            onDelete: chipOnDelete
                        })
                    )
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !currentValue },
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-lookup_input-container', ref: this.innerContainerRef },
                        _react2.default.createElement(_rightElement2.default, { showCloseButton: !!searchValue, onClear: this.clearInput }),
                        _react2.default.createElement(_Spinner2.default, {
                            isVisible: isLoading,
                            className: 'rainbow-lookup_spinner',
                            size: 'x-small',
                            assistiveText: 'searching'
                        }),
                        _react2.default.createElement('input', {
                            id: this.inputId,
                            name: name,
                            type: 'search',
                            className: this.getInputClassNames(),
                            value: searchValue,
                            placeholder: placeholder,
                            onChange: this.handleSearch,
                            tabIndex: tabIndex,
                            onFocus: this.handleFocus,
                            onBlur: onBlur,
                            onClick: onClick,
                            disabled: disabled,
                            readOnly: readOnly,
                            required: required,
                            autoComplete: 'off',
                            'aria-describedby': errorMessageId,
                            ref: this.inputRef
                        }),
                        _react2.default.createElement(
                            _RenderIf2.default,
                            { isTrue: isOpenMenu },
                            _react2.default.createElement(
                                'div',
                                { className: 'rainbow-lookup_options-menu' },
                                _react2.default.createElement(_options2.default, {
                                    items: options,
                                    value: searchValue,
                                    onSelectOption: this.handleChange,
                                    focusedItemIndex: focusedItemIndex,
                                    onHoverOption: this.handleHover,
                                    itemHeight: OPTION_HEIGHT,
                                    ref: this.menuRef
                                })
                            )
                        )
                    )
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!error },
                    _react2.default.createElement(
                        'div',
                        { id: errorMessageId, className: 'rainbow-lookup_input-error' },
                        error
                    )
                )
            );
        }
    }]);

    return Lookup;
}(_react.Component);

Lookup.propTypes = {
    /** Text label for the Lookup. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    /** A boolean to hide the Lookup label. */
    hideLabel: _propTypes2.default.bool,
    /** Specifies the selected value of the Lookup. */
    value: _propTypes2.default.oneOfType([_propTypes2.default.shape({
        label: _propTypes2.default.string,
        description: _propTypes2.default.string,
        icon: _propTypes2.default.node
    }), _propTypes2.default.string]),
    /** An array of matched options to show in a menu. */
    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        label: _propTypes2.default.string,
        description: _propTypes2.default.string,
        icon: _propTypes2.default.node
    })),
    /** The name of the Lookup. */
    name: _propTypes2.default.string,
    /** If set to true the onSearch event is sent when the customer finish typing. */
    debounce: _propTypes2.default.bool,
    /** If is set to true, then is showed a loading symbol. */
    isLoading: _propTypes2.default.bool,
    /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
    placeholder: _propTypes2.default.string,
    /** Specifies that the Lookup must be filled out before submitting the form.
     * This value defaults to false. */
    required: _propTypes2.default.bool,
    /** Specifies that the Lookup must be filled out before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that the Lookup element should be disabled. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** Specifies that the Lookup is read-only. This value defaults to false. */
    readOnly: _propTypes2.default.bool,
    /** Specifies the tab order of an element (when the tab button is used for navigating). */
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** The action triggered for every key stroke when the customer is typing in the input.
     * It sent the value/query of the input. This value is normally used for filter/search
     * for more options. */
    onSearch: _propTypes2.default.func,
    /**  The action triggered when click/select an option. */
    onChange: _propTypes2.default.func,
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

Lookup.defaultProps = {
    value: undefined,
    name: undefined,
    placeholder: null,
    required: false,
    error: null,
    disabled: false,
    readOnly: false,
    onChange: function onChange() {},
    tabIndex: undefined,
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    className: undefined,
    style: undefined,
    id: undefined,
    hideLabel: false,
    isLoading: false,
    options: undefined,
    onSearch: function onSearch() {},
    debounce: false
};

exports.default = (0, _withReduxForm2.default)(Lookup);
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('./../../libs/utils');

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _label = require('./label');

var _label2 = _interopRequireDefault(_label);

require('./style.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * An input range slider lets the user specify a numeric value which must be between
 * two specified values.
 * @category Form
 */
var Slider = function (_Component) {
    _inherits(Slider, _Component);

    function Slider(props) {
        _classCallCheck(this, Slider);

        var _this = _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).call(this, props));

        _this.sliderId = (0, _utils.uniqueId)('slider-id');
        _this.errorMessageId = (0, _utils.uniqueId)('error-message');
        _this.sliderRef = _react2.default.createRef();
        return _this;
    }

    _createClass(Slider, [{
        key: 'getAriaDescribedBy',
        value: function getAriaDescribedBy() {
            var error = this.props.error;

            if (error) {
                return this.errorMessageId;
            }
            return undefined;
        }
    }, {
        key: 'getContainerClassName',
        value: function getContainerClassName() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-slider_container', className);
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.sliderRef.current.click();
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.sliderRef.current.focus();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.sliderRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                label = _props.label,
                value = _props.value,
                name = _props.name,
                min = _props.min,
                max = _props.max,
                step = _props.step,
                error = _props.error,
                disabled = _props.disabled,
                onBlur = _props.onBlur,
                onChange = _props.onChange,
                onClick = _props.onClick,
                onFocus = _props.onFocus,
                style = _props.style,
                hideLabel = _props.hideLabel;

            return _react2.default.createElement(
                'div',
                { className: this.getContainerClassName(), style: style },
                _react2.default.createElement(_label2.default, { label: label, hideLabel: hideLabel, sliderId: this.sliderId }),
                _react2.default.createElement(
                    'div',
                    { className: 'rainbow-slider' },
                    _react2.default.createElement('input', {
                        id: this.sliderId,
                        className: 'rainbow-slider_range',
                        type: 'range',
                        name: name,
                        value: value,
                        min: min,
                        max: max,
                        step: step,
                        'aria-describedby': this.getAriaDescribedBy(),
                        disabled: disabled,
                        onClick: onClick,
                        onChange: onChange,
                        onBlur: onBlur,
                        onFocus: onFocus,
                        ref: this.sliderRef
                    }),
                    _react2.default.createElement(
                        'span',
                        { className: 'rainbow-slider_value', 'aria-hidden': true },
                        value
                    )
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!error },
                    _react2.default.createElement(
                        'div',
                        { id: this.errorMessageId, className: 'rainbow-slider_error' },
                        error
                    )
                )
            );
        }
    }]);

    return Slider;
}(_react.Component);

exports.default = Slider;


Slider.propTypes = {
    /** The text label for the slider. Provide your own label to describe the slider.
     * Otherwise, no label is displayed. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    /** A boolean to hide the slider label */
    hideLabel: _propTypes2.default.bool,
    /** The numerical value of the slider. This value defaults to 0. */
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    name: _propTypes2.default.string,
    /** The min value of the slider. This value defaults to 0. */
    min: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    /** The max value of the slider. This value defaults to 100. */
    max: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    /** The step increment value of the slider. Example steps include 0.1, 1, or 10.
     * This value defaults to 1. */
    step: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    /** Specifies that the slider element must have a value selected before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that the slider element should be disabled. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** The action triggered when a value attribute changes. */
    onChange: _propTypes2.default.func,
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

Slider.defaultProps = {
    label: null,
    value: undefined,
    name: undefined,
    min: 0,
    max: 100,
    step: 1,
    error: undefined,
    disabled: false,
    onChange: function onChange() {},
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    className: undefined,
    style: null,
    hideLabel: false
};
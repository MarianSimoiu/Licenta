'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Modal page object class.
 * @class
 * @tutorial modal
 */
var PageModal = function () {
    /**
     * Create a new Modal page object.
     * @constructor
     * @param {string} rootElement - The selector of the Modal root element.
     */
    function PageModal(rootElement) {
        _classCallCheck(this, PageModal);

        this.rootElement = rootElement;
    }

    /**
     * Clicks the close button element.
     * @method
     */


    _createClass(PageModal, [{
        key: 'clickCloseButton',
        value: function clickCloseButton() {
            var _this = this;

            browser.waitUntil(function () {
                return $(_this.rootElement).$('.rainbow-modal_close-button').isDisplayed();
            });
            $(this.rootElement).$('.rainbow-modal_close-button').click();
        }

        /**
         * Clicks the backdrop element.
         * @method
         */
        // clickOutside() {}

        /**
         * Returns true when the modal is open, false otherwise.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isOpen',
        value: function isOpen() {
            if ($(this.rootElement).isDisplayed()) {
                return $(this.rootElement).$('section[role="dialog"]').isDisplayed() && $(this.rootElement).$('.rainbow-modal_close-button').isDisplayed();
            }
            return false;
        }

        /**
         * Returns true when the closeButton has focus.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'hasFocusCloseButton',
        value: function hasFocusCloseButton() {
            return $(this.rootElement).$('.rainbow-modal_close-button').isFocused();
        }

        /**
         * Wait until the open modal transition has finished.
         * @method
         */

    }, {
        key: 'waitUntilOpen',
        value: function waitUntilOpen() {
            var _this2 = this;

            browser.waitUntil(function () {
                return _this2.isOpen();
            });
        }

        /**
         * Wait until the close modal transition has finished.
         * @method
         */

    }, {
        key: 'waitUntilClose',
        value: function waitUntilClose() {
            var _this3 = this;

            browser.waitUntil(function () {
                return !_this3.isOpen();
            });
        }
    }]);

    return PageModal;
}();

module.exports = PageModal;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactDom = require('react-dom');

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _RenderIf = require('./../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _ButtonIcon = require('./../ButtonIcon');

var _ButtonIcon2 = _interopRequireDefault(_ButtonIcon);

var _utils = require('./../../libs/utils');

var _constants = require('./../../libs/constants');

var _header = require('./header');

var _header2 = _interopRequireDefault(_header);

var _closeIcon = require('./closeIcon');

var _closeIcon2 = _interopRequireDefault(_closeIcon);

var _manageTab = require('./manageTab');

var _manageTab2 = _interopRequireDefault(_manageTab);

var _scrollController = require('./scrollController');

var _counterManager = require('./counterManager');

var _counterManager2 = _interopRequireDefault(_counterManager);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Modals are used to display content in a layer above the app.
 * This is used in cases such as the creation or editing of a record,
 * as well as various types of messaging.
 * @category Layout
 */
var Modal = function (_Component) {
    _inherits(Modal, _Component);

    function Modal(props) {
        _classCallCheck(this, Modal);

        var _this = _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).call(this, props));

        _this.buttonRef = _react2.default.createRef();
        _this.modalRef = _react2.default.createRef();
        _this.modalHeadingId = (0, _utils.uniqueId)('modal-heading');
        _this.modalContentId = (0, _utils.uniqueId)('modal-content');
        _this.handleKeyPressed = _this.handleKeyPressed.bind(_this);
        _this.handleClick = _this.handleClick.bind(_this);
        _this.closeModal = _this.closeModal.bind(_this);
        return _this;
    }

    _createClass(Modal, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var isOpen = this.props.isOpen;

            if (isOpen) {
                _counterManager2.default.increment();
                (0, _scrollController.disableScroll)();
                this.modalTriggerElement = document.activeElement;
                this.modalRef.current.focus();
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var _props = this.props,
                isOpen = _props.isOpen,
                onOpened = _props.onOpened;
            var prevIsOpen = prevProps.isOpen;

            if (isOpen && !prevIsOpen) {
                _counterManager2.default.increment();
                (0, _scrollController.disableScroll)();
                this.modalTriggerElement = document.activeElement;
                this.modalRef.current.focus();
                onOpened();
            } else if (!isOpen && prevIsOpen) {
                _counterManager2.default.decrement();
                if (this.modalTriggerElement) {
                    this.modalTriggerElement.focus();
                }
                if (!_counterManager2.default.hasModalsOpen()) {
                    (0, _scrollController.enableScroll)();
                }
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            _counterManager2.default.decrement();
            if (!_counterManager2.default.hasModalsOpen()) {
                (0, _scrollController.enableScroll)();
            }
        }
    }, {
        key: 'getBackDropClassNames',
        value: function getBackDropClassNames() {
            var isOpen = this.props.isOpen;

            return (0, _classnames2.default)('rainbow-modal_backdrop', {
                'rainbow-modal_backdrop--open': isOpen
            });
        }
    }, {
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var _props2 = this.props,
                className = _props2.className,
                isOpen = _props2.isOpen;

            return (0, _classnames2.default)('rainbow-modal', {
                'rainbow-modal--open': isOpen,
                'rainbow-modal--close': !isOpen
            }, this.getSizeClassNames(), className);
        }
    }, {
        key: 'getSizeClassNames',
        value: function getSizeClassNames() {
            var size = this.props.size;

            if (size === 'small') {
                return null;
            }
            return 'rainbow-modal--' + size;
        }
    }, {
        key: 'handleKeyPressed',
        value: function handleKeyPressed(event) {
            event.stopPropagation();
            var isOpen = this.props.isOpen;

            if (isOpen && event.keyCode === _constants.ESCAPE_KEY) {
                this.closeModal();
            }
            if (event.keyCode === _constants.TAB_KEY) {
                (0, _manageTab2.default)(this.modalRef.current, event);
            }
            return null;
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            if (_counterManager2.default.counter > 1) {
                event.stopPropagation();
            }
            var isOpen = this.props.isOpen;

            if (isOpen) {
                var isClickOutsideModal = !this.modalRef.current.contains(event.target);
                if (isClickOutsideModal) {
                    return this.closeModal();
                }
            }
            return null;
        }
    }, {
        key: 'closeModal',
        value: function closeModal() {
            var onRequestClose = this.props.onRequestClose;

            return onRequestClose();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                title = _props3.title,
                style = _props3.style,
                children = _props3.children,
                footer = _props3.footer,
                isOpen = _props3.isOpen,
                id = _props3.id;


            if (isOpen) {
                return (0, _reactDom.createPortal)(_react2.default.createElement(
                    'div',
                    {
                        role: 'presentation',
                        id: id,
                        onClick: this.handleClick,
                        className: this.getBackDropClassNames(),
                        onKeyDown: this.handleKeyPressed
                    },
                    _react2.default.createElement(
                        'section',
                        {
                            role: 'dialog',
                            tabIndex: -1,
                            'aria-labelledby': this.modalHeadingId,
                            'aria-modal': true,
                            'aria-hidden': !isOpen,
                            'aria-describedby': this.modalContentId,
                            className: this.getContainerClassNames(),
                            style: style,
                            ref: this.modalRef
                        },
                        _react2.default.createElement(_ButtonIcon2.default, {
                            className: 'rainbow-modal_close-button',
                            icon: _react2.default.createElement(_closeIcon2.default, null),
                            title: 'Close',
                            onClick: this.closeModal,
                            ref: this.buttonRef
                        }),
                        _react2.default.createElement(_header2.default, { id: this.modalHeadingId, title: title }),
                        _react2.default.createElement(
                            'div',
                            { className: 'rainbow-modal_content', id: this.modalContentId },
                            children
                        ),
                        _react2.default.createElement(
                            _RenderIf2.default,
                            { isTrue: !!footer },
                            _react2.default.createElement(
                                'footer',
                                { className: 'rainbow-modal_footer' },
                                footer
                            )
                        )
                    )
                ), document.body);
            }
            return null;
        }
    }]);

    return Modal;
}(_react.Component);

exports.default = Modal;


Modal.propTypes = {
    /** The title can include text or another component,
     * and is displayed in the header of the component. */
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The size of the Modal. Valid values are small, medium, and large.
     * This value defaults to small. */
    size: _propTypes2.default.oneOf(['small', 'medium', 'large']),
    /** The footer can include text or another component. */
    footer: _propTypes2.default.node,
    /** Controls whether the Modal is opened or not. If true, the modal is open. */
    isOpen: _propTypes2.default.bool,
    /** The action triggered when the close button is clicked. */
    onRequestClose: _propTypes2.default.func,
    /** A callback triggered when the modal is opened. This is usefull for example to set focus
     * to an element inside the modal content after it is opened.
     */
    onOpened: _propTypes2.default.func,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /**
     * This prop that should not be visible in the documentation.
     * @ignore
     */
    children: _propTypes2.default.node
};

Modal.defaultProps = {
    isOpen: false,
    title: null,
    size: 'small',
    children: null,
    className: undefined,
    style: undefined,
    footer: null,
    onRequestClose: function onRequestClose() {},
    onOpened: function onOpened() {},
    id: undefined
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _clock = require('./icons/clock');

var _clock2 = _interopRequireDefault(_clock);

var _Modal = require('../Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _input = require('./input');

var _input2 = _interopRequireDefault(_input);

var _timeSelect = require('./timeSelect');

var _timeSelect2 = _interopRequireDefault(_timeSelect);

var _get12HourTime = require('./helpers/get12HourTime');

var _get12HourTime2 = _interopRequireDefault(_get12HourTime);

var _withReduxForm = require('../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

var _constants = require('../../libs/constants');

require('./styles.css');

require('./media-queries.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A TimePicker is used to input a time by displaying an interface the user can interact with.
 * @category Form
 */
var TimePicker = function (_Component) {
    _inherits(TimePicker, _Component);

    function TimePicker(props) {
        _classCallCheck(this, TimePicker);

        var _this = _possibleConstructorReturn(this, (TimePicker.__proto__ || Object.getPrototypeOf(TimePicker)).call(this, props));

        _this.state = {
            isOpen: false,
            value: (0, _get12HourTime2.default)(props.value)
        };
        _this.inputRef = _react2.default.createRef();
        _this.timeSelectRef = _react2.default.createRef();
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
        _this.handleClick = _this.handleClick.bind(_this);
        _this.closeModal = _this.closeModal.bind(_this);
        _this.setFocusToHourInput = _this.setFocusToHourInput.bind(_this);
        return _this;
    }

    _createClass(TimePicker, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate(_ref) {
            var prevValue = _ref.value;
            var value = this.props.value;

            if (prevValue !== value) {
                this.updateValue();
            }
        }
    }, {
        key: 'getContainerClassName',
        value: function getContainerClassName() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-time-picker_container', className);
        }
    }, {
        key: 'getTriggerInputValue',
        value: function getTriggerInputValue() {
            var value = this.state.value;
            var placeholder = this.props.placeholder;

            if (!value && placeholder) {
                return '';
            }
            return value || '--:-- --';
        }
    }, {
        key: 'setFocusToHourInput',
        value: function setFocusToHourInput() {
            this.timeSelectRef.current.focusHourInput();
        }
    }, {
        key: 'updateValue',
        value: function updateValue() {
            var value = this.props.value;

            this.setState({
                value: (0, _get12HourTime2.default)(value)
            });
        }
    }, {
        key: 'handleKeyDown',
        value: function handleKeyDown(event) {
            var keyCode = event.keyCode;
            var readOnly = this.props.readOnly;

            var shouldOpenModal = (keyCode === _constants.ENTER_KEY || keyCode === _constants.SPACE_KEY) && !readOnly;
            if (shouldOpenModal) {
                this.setState({ isOpen: true });
            }
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            var _props = this.props,
                onClick = _props.onClick,
                readOnly = _props.readOnly;

            if (!readOnly) {
                this.setState({ isOpen: true });
                onClick(event);
            }
        }
    }, {
        key: 'closeModal',
        value: function closeModal() {
            this.setState({ isOpen: false });
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.inputRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.inputRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.inputRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                placeholder = _props2.placeholder,
                label = _props2.label,
                required = _props2.required,
                style = _props2.style,
                hideLabel = _props2.hideLabel,
                name = _props2.name,
                bottomHelpText = _props2.bottomHelpText,
                isCentered = _props2.isCentered,
                error = _props2.error,
                readOnly = _props2.readOnly,
                disabled = _props2.disabled,
                tabIndex = _props2.tabIndex,
                onFocus = _props2.onFocus,
                onBlur = _props2.onBlur,
                id = _props2.id,
                cancelLabel = _props2.cancelLabel,
                okLabel = _props2.okLabel,
                onChange = _props2.onChange;
            var _state = this.state,
                isOpen = _state.isOpen,
                value = _state.value;


            return _react2.default.createElement(
                'div',
                { id: id, className: this.getContainerClassName(), style: style },
                _react2.default.createElement(_input2.default, {
                    ref: this.inputRef,
                    label: label,
                    placeholder: placeholder,
                    icon: _react2.default.createElement(_clock2.default, null),
                    iconPosition: 'right',
                    required: required,
                    value: this.getTriggerInputValue(),
                    onKeyDown: this.handleKeyDown,
                    onClick: this.handleClick,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    hideLabel: hideLabel,
                    name: name,
                    bottomHelpText: bottomHelpText,
                    isCentered: isCentered,
                    error: error,
                    readOnly: readOnly,
                    disabled: disabled,
                    tabIndex: tabIndex,
                    autoComplete: 'off'
                }),
                _react2.default.createElement(
                    _Modal2.default,
                    {
                        className: 'rainbow-time-picker_modal',
                        isOpen: isOpen,
                        onRequestClose: this.closeModal,
                        onOpened: this.setFocusToHourInput
                    },
                    _react2.default.createElement(_timeSelect2.default, {
                        onCloseModal: this.closeModal,
                        onChange: onChange,
                        cancelLabel: cancelLabel,
                        okLabel: okLabel,
                        value: value,
                        ref: this.timeSelectRef
                    })
                )
            );
        }
    }]);

    return TimePicker;
}(_react.Component);

TimePicker.propTypes = {
    /** Sets the date for the TimePicker programmatically. */
    value: _propTypes2.default.string,
    /** Override the label of the 'Cancel' button. */
    cancelLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Override the label of the 'OK' button. */
    okLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The action triggered when a value attribute changes. */
    onChange: _propTypes2.default.func,
    /** Text that is displayed when the TimePicker is empty,
     * to prompt the user for a valid entry. */
    placeholder: _propTypes2.default.string,
    /** Text label for the TimePicker. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    /** A boolean to hide the TimePicker label. */
    hideLabel: _propTypes2.default.bool,
    /** Specifies that the TimePicker must be filled out before submitting the form.
     * This value defaults to false. */
    required: _propTypes2.default.bool,
    /** The name of the TimePicker. */
    name: _propTypes2.default.string,
    /** Shows the help message below the TimePicker. */
    bottomHelpText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that the TimePicker text will be centered. This value defaults to false. */
    isCentered: _propTypes2.default.bool,
    /** Specifies that the TimePicker must be filled out before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that the TimePicker is read-only. This value defaults to false. */
    readOnly: _propTypes2.default.bool,
    /** Specifies that the TimePicker element should be disabled. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** Specifies the tab order of an element (when the tab button is used for navigating). */
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

TimePicker.defaultProps = {
    value: undefined,
    cancelLabel: 'Cancel',
    okLabel: 'OK',
    onChange: function onChange() {},
    placeholder: null,
    hideLabel: false,
    required: false,
    name: undefined,
    bottomHelpText: null,
    isCentered: false,
    error: null,
    readOnly: false,
    disabled: false,
    tabIndex: undefined,
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    id: undefined,
    className: undefined,
    style: undefined
};

exports.default = (0, _withReduxForm2.default)(TimePicker);
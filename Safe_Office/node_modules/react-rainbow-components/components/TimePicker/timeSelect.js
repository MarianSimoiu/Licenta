'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ButtonIcon = require('../ButtonIcon');

var _ButtonIcon2 = _interopRequireDefault(_ButtonIcon);

var _Button = require('../Button');

var _Button2 = _interopRequireDefault(_Button);

var _ampmSelect = require('./ampmSelect');

var _ampmSelect2 = _interopRequireDefault(_ampmSelect);

var _upArrow = require('./icons/upArrow');

var _upArrow2 = _interopRequireDefault(_upArrow);

var _downArrow = require('./icons/downArrow');

var _downArrow2 = _interopRequireDefault(_downArrow);

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _normalizeHour = require('./helpers/normalizeHour');

var _normalizeHour2 = _interopRequireDefault(_normalizeHour);

var _normalizeMinutes = require('./helpers/normalizeMinutes');

var _normalizeMinutes2 = _interopRequireDefault(_normalizeMinutes);

var _getNextHour = require('./helpers/getNextHour');

var _getNextHour2 = _interopRequireDefault(_getNextHour);

var _getPrevHour = require('./helpers/getPrevHour');

var _getPrevHour2 = _interopRequireDefault(_getPrevHour);

var _getNextMinute = require('./helpers/getNextMinute');

var _getNextMinute2 = _interopRequireDefault(_getNextMinute);

var _getPrevMinute = require('./helpers/getPrevMinute');

var _getPrevMinute2 = _interopRequireDefault(_getPrevMinute);

var _getNextAmPmValue = require('./helpers/getNextAmPmValue');

var _getNextAmPmValue2 = _interopRequireDefault(_getNextAmPmValue);

var _get24HourTime = require('./helpers/get24HourTime');

var _get24HourTime2 = _interopRequireDefault(_get24HourTime);

var _getSingleNewTypedValue = require('./helpers/getSingleNewTypedValue');

var _getSingleNewTypedValue2 = _interopRequireDefault(_getSingleNewTypedValue);

var _isNumber = require('./helpers/isNumber');

var _isNumber2 = _interopRequireDefault(_isNumber);

var _constants = require('../../libs/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function getHour(value) {
    if (value) {
        return value.split(':')[0];
    }
    return '';
}

function getMinutes(value) {
    if (value) {
        return value.split(':')[1].split(' ')[0];
    }
    return '';
}

function getAmPm(value) {
    if (value) {
        return value.split(' ')[1];
    }
    return undefined;
}

var TimeSelect = function (_Component) {
    _inherits(TimeSelect, _Component);

    function TimeSelect(props) {
        _classCallCheck(this, TimeSelect);

        var _this = _possibleConstructorReturn(this, (TimeSelect.__proto__ || Object.getPrototypeOf(TimeSelect)).call(this, props));

        _this.state = {
            hour: getHour(props.value),
            minutes: getMinutes(props.value),
            ampm: getAmPm(props.value)
        };
        _this.hourInputRef = _react2.default.createRef();
        _this.minutesInputRef = _react2.default.createRef();
        _this.amPmInputRef = _react2.default.createRef();
        _this.inputsMap = {
            0: _this.hourInputRef,
            1: _this.minutesInputRef,
            2: _this.amPmInputRef
        };
        _this.inputFocusedIndex = 0;
        _this.hasPropValue = !!props.value;
        _this.handleChangeHour = _this.handleChangeHour.bind(_this);
        _this.handleFocusHour = _this.handleFocusHour.bind(_this);
        _this.handleBlurHour = _this.handleBlurHour.bind(_this);
        _this.handleChangeMinutes = _this.handleChangeMinutes.bind(_this);
        _this.handleFocusMinutes = _this.handleFocusMinutes.bind(_this);
        _this.handleAmPmChange = _this.handleAmPmChange.bind(_this);
        _this.hanldeFocusAmPm = _this.hanldeFocusAmPm.bind(_this);
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
        _this.incrementHandler = _this.incrementHandler.bind(_this);
        _this.decrementHandler = _this.decrementHandler.bind(_this);
        _this.handleButtonsFocus = _this.handleButtonsFocus.bind(_this);
        _this.handleChangeTime = _this.handleChangeTime.bind(_this);
        return _this;
    }

    _createClass(TimeSelect, [{
        key: 'setNextAmPmValue',
        value: function setNextAmPmValue() {
            var ampm = this.state.ampm;

            var nextAmPmValue = (0, _getNextAmPmValue2.default)(ampm);
            this.setState({
                ampm: nextAmPmValue
            });
        }
    }, {
        key: 'handleChangeHour',
        value: function handleChangeHour(event) {
            var hour = this.state.hour;
            var value = event.target.value;

            var normalizedValue = void 0;

            if ((0, _isNumber2.default)(value)) {
                this.value = value;
                if (Number(value) > 19 || this.isUpOrDownKeyPressed || this.hasPropValue) {
                    var newTypedValue = (0, _getSingleNewTypedValue2.default)(hour, value);
                    normalizedValue = (0, _normalizeHour2.default)(newTypedValue);
                    this.setState({
                        hour: normalizedValue
                    });
                } else {
                    normalizedValue = (0, _normalizeHour2.default)(value);
                    var numberValue = Number(value);
                    this.defaultAmPM = numberValue > 11 && numberValue < 20 ? 'PM' : 'AM';
                    this.setState({
                        hour: normalizedValue
                    });
                }

                var shouldNotFocusNextInput = Number(normalizedValue) < 2 && (!hour || this.isUpOrDownKeyPressed || this.hasPropValue);

                if (shouldNotFocusNextInput) {
                    this.isUpOrDownKeyPressed = false;
                    this.hasPropValue = false;
                    return;
                }
                this.minutesInputRef.current.focus();
            }
        }
    }, {
        key: 'handleFocusHour',
        value: function handleFocusHour() {
            var hour = this.state.hour;

            this.inputFocusedIndex = 0;
            this.prevHour = hour || this.prevHour;
            this.setState({
                hour: ''
            });
        }
    }, {
        key: 'handleBlurHour',
        value: function handleBlurHour() {
            var hour = this.state.hour;

            if (hour === '00' && this.value === '0') {
                this.setState({
                    hour: '12'
                });
            }
        }
    }, {
        key: 'handleChangeMinutes',
        value: function handleChangeMinutes(event) {
            var minutes = this.state.minutes;
            var value = event.target.value;

            var normalizedValue = void 0;

            if ((0, _isNumber2.default)(value)) {
                if (Number(value) > 60 || this.isUpOrDownKeyPressed) {
                    var newTypedValue = (0, _getSingleNewTypedValue2.default)(minutes, value);
                    normalizedValue = (0, _normalizeMinutes2.default)(newTypedValue);
                    this.setState({
                        minutes: normalizedValue
                    });
                } else {
                    normalizedValue = (0, _normalizeMinutes2.default)(value);
                    this.setState({
                        minutes: normalizedValue
                    });
                }

                var shouldNotFocusNextInput = Number(normalizedValue) < 6 && (!minutes || this.isUpOrDownKeyPressed);

                if (shouldNotFocusNextInput) {
                    this.isUpOrDownKeyPressed = false;
                    return;
                }
                this.amPmInputRef.current.focus();
            }
        }
    }, {
        key: 'handleFocusMinutes',
        value: function handleFocusMinutes() {
            var minutes = this.state.minutes;

            this.inputFocusedIndex = 1;
            this.prevMinutes = minutes || this.prevMinutes;
            this.setState({
                minutes: ''
            });
        }
    }, {
        key: 'handleAmPmChange',
        value: function handleAmPmChange(value) {
            this.setState({
                ampm: value
            });
        }
    }, {
        key: 'hanldeFocusAmPm',
        value: function hanldeFocusAmPm() {
            this.inputFocusedIndex = 2;
        }
    }, {
        key: 'handleKeyDown',
        value: function handleKeyDown(event) {
            var keyCode = event.keyCode;

            this.keyPressed = keyCode;

            if (keyCode === _constants.RIGHT_KEY) {
                this.handleRightKeyPressed();
            }
            if (keyCode === _constants.LEFT_KEY) {
                this.handleLeftKeyPressed();
            }
            if (keyCode === _constants.UP_KEY) {
                this.incrementHandler();
            }
            if (keyCode === _constants.DOWN_KEY) {
                this.decrementHandler();
            }
            if (keyCode === _constants.DELETE_KEY) {
                this.resetState();
            }
            if (keyCode === _constants.ENTER_KEY) {
                this.handleChangeTime(event);
            }
        }
    }, {
        key: 'handleRightKeyPressed',
        value: function handleRightKeyPressed() {
            var nextInputIndex = this.inputFocusedIndex + 1;
            var nextInputToFocus = this.inputsMap[nextInputIndex];
            if (nextInputToFocus) {
                this.inputFocusedIndex += 1;
                nextInputToFocus.current.focus();
            }
        }
    }, {
        key: 'handleLeftKeyPressed',
        value: function handleLeftKeyPressed() {
            var prevInputIndex = this.inputFocusedIndex - 1;
            var prevInputToFocus = this.inputsMap[prevInputIndex];
            if (prevInputToFocus) {
                this.inputFocusedIndex -= 1;
                prevInputToFocus.current.focus();
            }
        }
    }, {
        key: 'incrementHandler',
        value: function incrementHandler() {
            this.isUpOrDownKeyPressed = true;
            if (this.inputFocusedIndex === 0) {
                this.incrementHour();
            }
            if (this.inputFocusedIndex === 1) {
                this.incrementMinutes();
            }
            if (this.inputFocusedIndex === 2) {
                this.setNextAmPmValue();
            }
        }
    }, {
        key: 'decrementHandler',
        value: function decrementHandler() {
            this.isUpOrDownKeyPressed = true;
            if (this.inputFocusedIndex === 0) {
                this.decrementHour();
            }
            if (this.inputFocusedIndex === 1) {
                this.decrementMinutes();
            }
            if (this.inputFocusedIndex === 2) {
                this.setNextAmPmValue();
            }
        }
    }, {
        key: 'handleButtonsFocus',
        value: function handleButtonsFocus() {
            var currentInputFocused = this.inputsMap[this.inputFocusedIndex];
            if (currentInputFocused) {
                currentInputFocused.current.focus();
            }
        }
    }, {
        key: 'resetState',
        value: function resetState() {
            if (this.inputFocusedIndex === 0) {
                this.setState({
                    hour: ''
                });
                this.prevHour = '';
            }
            if (this.inputFocusedIndex === 1) {
                this.setState({
                    minutes: ''
                });
                this.prevMinutes = '';
            }
        }
    }, {
        key: 'focusHourInput',
        value: function focusHourInput() {
            this.hourInputRef.current.focus();
            this.inputFocusedIndex = 0;
        }
    }, {
        key: 'incrementHour',
        value: function incrementHour() {
            var hour = this.state.hour;

            var hourValue = hour || this.prevHour;
            this.setState({
                hour: (0, _normalizeHour2.default)((0, _getNextHour2.default)(hourValue))
            });
        }
    }, {
        key: 'decrementHour',
        value: function decrementHour() {
            var hour = this.state.hour;

            var hourValue = hour || this.prevHour;
            this.setState({
                hour: (0, _normalizeHour2.default)((0, _getPrevHour2.default)(hourValue))
            });
        }
    }, {
        key: 'incrementMinutes',
        value: function incrementMinutes() {
            var minutes = this.state.minutes;

            var minutesValue = minutes || this.prevMinutes;
            this.setState({
                minutes: (0, _normalizeMinutes2.default)((0, _getNextMinute2.default)(minutesValue))
            });
        }
    }, {
        key: 'decrementMinutes',
        value: function decrementMinutes() {
            var minutes = this.state.minutes;

            var minutesValue = minutes || this.prevMinutes;
            this.setState({
                minutes: (0, _normalizeMinutes2.default)((0, _getPrevMinute2.default)(minutesValue))
            });
        }
    }, {
        key: 'handleChangeTime',
        value: function handleChangeTime(event) {
            event.preventDefault();
            event.stopPropagation();
            var _state = this.state,
                hour = _state.hour,
                minutes = _state.minutes,
                ampm = _state.ampm;
            var _props = this.props,
                onChange = _props.onChange,
                onCloseModal = _props.onCloseModal;

            var currentHour = hour || this.prevHour;
            var currentMinutes = minutes || this.prevMinutes;
            var time = (0, _get24HourTime2.default)({
                hour: currentHour,
                minutes: currentMinutes,
                ampm: ampm
            });

            if (currentHour && currentMinutes && ampm) {
                onChange(time);
            }
            onCloseModal();
        }
    }, {
        key: 'render',
        value: function render() {
            var _state2 = this.state,
                hour = _state2.hour,
                minutes = _state2.minutes,
                ampm = _state2.ampm;
            var _props2 = this.props,
                onCloseModal = _props2.onCloseModal,
                cancelLabel = _props2.cancelLabel,
                okLabel = _props2.okLabel,
                hours24 = _props2.hours24;

            var hourPlaceholder = this.prevHour || '--';
            var minutesPlaceholder = this.prevMinutes || '--';

            return _react2.default.createElement(
                'article',
                null,
                _react2.default.createElement(
                    'div',
                    {
                        role: 'presentation',
                        className: 'rainbow-time-picker_time-select-content',
                        onKeyDown: this.handleKeyDown
                    },
                    _react2.default.createElement('input', {
                        'data-id': 'hour',
                        className: 'rainbow-time-picker_time-select-value',
                        type: 'text',
                        value: hour,
                        placeholder: hourPlaceholder,
                        onChange: this.handleChangeHour,
                        onFocus: this.handleFocusHour,
                        onBlur: this.handleBlurHour,
                        pattern: '\\d*',
                        ref: this.hourInputRef
                    }),
                    _react2.default.createElement(
                        'span',
                        { className: 'rainbow-time-picker_dots' },
                        ':'
                    ),
                    _react2.default.createElement('input', {
                        'data-id': 'minutes',
                        className: 'rainbow-time-picker_time-select-value',
                        tabIndex: '-1',
                        type: 'text',
                        value: minutes,
                        placeholder: minutesPlaceholder,
                        onChange: this.handleChangeMinutes,
                        onFocus: this.handleFocusMinutes,
                        pattern: '\\d*',
                        ref: this.minutesInputRef
                    }),
                    _react2.default.createElement(
                        _RenderIf2.default,
                        { isTrue: !hours24 },
                        _react2.default.createElement(_ampmSelect2.default, {
                            tabIndex: '-1',
                            value: ampm,
                            defaultValue: this.defaultAmPM,
                            onFocus: this.hanldeFocusAmPm,
                            onChange: this.handleAmPmChange,
                            ref: this.amPmInputRef
                        })
                    ),
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-time-picker_icon-button-container' },
                        _react2.default.createElement(_ButtonIcon2.default, {
                            tabIndex: '-1',
                            variant: 'border-filled',
                            icon: _react2.default.createElement(_upArrow2.default, null),
                            size: 'small',
                            onClick: this.incrementHandler,
                            onFocus: this.handleButtonsFocus,
                            assistiveText: 'Previous value'
                        }),
                        _react2.default.createElement(_ButtonIcon2.default, {
                            tabIndex: '-1',
                            variant: 'border-filled',
                            icon: _react2.default.createElement(_downArrow2.default, null),
                            size: 'small',
                            onClick: this.decrementHandler,
                            onFocus: this.handleButtonsFocus,
                            assistiveText: 'Next value'
                        })
                    )
                ),
                _react2.default.createElement(
                    'footer',
                    { className: 'rainbow-time-picker_footer' },
                    _react2.default.createElement(_Button2.default, {
                        className: 'rainbow-time-picker_button',
                        variant: 'base',
                        label: cancelLabel,
                        onClick: onCloseModal
                    }),
                    _react2.default.createElement(_Button2.default, {
                        className: 'rainbow-time-picker_button',
                        variant: 'brand',
                        label: okLabel,
                        onClick: this.handleChangeTime
                    })
                )
            );
        }
    }]);

    return TimeSelect;
}(_react.Component);

exports.default = TimeSelect;


TimeSelect.propTypes = {
    onCloseModal: _propTypes2.default.func,
    hours24: _propTypes2.default.bool,
    cancelLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    okLabel: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    onChange: _propTypes2.default.func,
    value: _propTypes2.default.string
};

TimeSelect.defaultProps = {
    onCloseModal: function onCloseModal() {},
    hours24: false,
    cancelLabel: 'Cancel',
    okLabel: 'OK',
    onChange: function onChange() {},
    value: undefined
};
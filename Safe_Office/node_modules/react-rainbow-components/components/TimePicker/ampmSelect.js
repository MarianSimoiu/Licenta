'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _getNextAmPmValue = require('./helpers/getNextAmPmValue');

var _getNextAmPmValue2 = _interopRequireDefault(_getNextAmPmValue);

var _utils = require('./../../libs/utils');

var _constants = require('../../libs/constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function handleAmPmBlur(event) {
    event.stopPropagation();
}

var AmPmSelect = function (_PureComponent) {
    _inherits(AmPmSelect, _PureComponent);

    function AmPmSelect(props) {
        _classCallCheck(this, AmPmSelect);

        var _this = _possibleConstructorReturn(this, (AmPmSelect.__proto__ || Object.getPrototypeOf(AmPmSelect)).call(this, props));

        _this.state = {
            isFocused: false
        };
        _this.fieldsetRef = _react2.default.createRef();
        _this.inputAmId = (0, _utils.uniqueId)('am');
        _this.inputPmId = (0, _utils.uniqueId)('pm');
        _this.handleFocus = _this.handleFocus.bind(_this);
        _this.handleBlur = _this.handleBlur.bind(_this);
        _this.handleOnChange = _this.handleOnChange.bind(_this);
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
        _this.handleAmClick = _this.handleAmClick.bind(_this);
        _this.handlePmClick = _this.handlePmClick.bind(_this);
        return _this;
    }

    _createClass(AmPmSelect, [{
        key: 'handleFocus',
        value: function handleFocus() {
            var _this2 = this;

            var _props = this.props,
                onChange = _props.onChange,
                defaultValue = _props.defaultValue,
                value = _props.value;

            this.setState({
                isFocused: true
            });
            setTimeout(function () {
                return _this2.fieldsetRef.current.focus();
            }, 0);
            if (!value) {
                onChange(defaultValue || 'AM');
            }
        }
    }, {
        key: 'handleBlur',
        value: function handleBlur() {
            this.setState({
                isFocused: false
            });
        }
    }, {
        key: 'handleOnChange',
        value: function handleOnChange(event) {
            var onChange = this.props.onChange;
            var value = event.target.value;

            onChange(value);
        }
    }, {
        key: 'handleAmClick',
        value: function handleAmClick() {
            var value = this.state.value;
            var onChange = this.props.onChange;

            if (!value) {
                onChange('AM');
            }
            this.setState({ isFocused: false });
        }
    }, {
        key: 'handlePmClick',
        value: function handlePmClick() {
            var value = this.state.value;
            var onChange = this.props.onChange;

            if (!value) {
                onChange('PM');
            }
            this.setState({ isFocused: false });
        }
    }, {
        key: 'handleKeyDown',
        value: function handleKeyDown(event) {
            var keyCode = event.keyCode;
            var onChange = this.props.onChange;
            var value = this.state.value;

            var nextValue = (0, _getNextAmPmValue2.default)(value);
            if (keyCode === _constants.UP_KEY || keyCode === _constants.DOWN_KEY) {
                onChange(nextValue);
            }
        }
    }, {
        key: 'isChecked',
        value: function isChecked(inputValue) {
            var _props2 = this.props,
                value = _props2.value,
                defaultValue = _props2.defaultValue;

            if (value) {
                return inputValue === value;
            }
            if (defaultValue) {
                return inputValue === defaultValue;
            }
            return inputValue === 'AM';
        }
    }, {
        key: 'focus',
        value: function focus() {
            this.fieldsetRef.current.focus();
        }
    }, {
        key: 'render',
        value: function render() {
            var isFocused = this.state.isFocused;
            var _props3 = this.props,
                tabIndex = _props3.tabIndex,
                onFocus = _props3.onFocus,
                value = _props3.value;


            if (isFocused) {
                return _react2.default.createElement(
                    'fieldset',
                    {
                        className: 'rainbow-time-picker_time-select-value rainbow-time-picker_select-ampm',
                        role: 'presentation',
                        tabIndex: tabIndex,
                        onBlur: this.handleBlur,
                        onFocus: onFocus,
                        onKeyDown: this.handleKeyDown,
                        ref: this.fieldsetRef
                    },
                    _react2.default.createElement('input', {
                        className: 'rainbow-time-picker_time-input--hidden',
                        type: 'radio',
                        id: this.inputAmId,
                        name: 'ampmOptions',
                        value: 'AM',
                        checked: this.isChecked('AM'),
                        onChange: this.handleOnChange,
                        onClick: this.handleAmClick,
                        onBlur: handleAmPmBlur
                    }),
                    _react2.default.createElement(
                        'label',
                        { className: 'rainbow-time-picker_select-option', htmlFor: this.inputAmId },
                        'am'
                    ),
                    _react2.default.createElement('input', {
                        className: 'rainbow-time-picker_time-input--hidden',
                        type: 'radio',
                        id: this.inputPmId,
                        name: 'ampmOptions',
                        value: 'PM',
                        checked: this.isChecked('PM'),
                        onChange: this.handleOnChange,
                        onClick: this.handlePmClick,
                        onBlur: handleAmPmBlur
                    }),
                    _react2.default.createElement(
                        'label',
                        { className: 'rainbow-time-picker_select-option', htmlFor: this.inputPmId },
                        'pm'
                    )
                );
            }
            return _react2.default.createElement('input', {
                className: 'rainbow-time-picker_time-select-value',
                tabIndex: tabIndex,
                onFocus: this.handleFocus,
                placeholder: '--',
                defaultValue: value,
                ref: this.fieldsetRef
            });
        }
    }]);

    return AmPmSelect;
}(_react.PureComponent);

exports.default = AmPmSelect;


AmPmSelect.propTypes = {
    value: _propTypes2.default.string,
    defaultValue: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    onFocus: _propTypes2.default.func,
    tabIndex: _propTypes2.default.string
};

AmPmSelect.defaultProps = {
    value: undefined,
    defaultValue: undefined,
    onChange: function onChange() {},
    onFocus: function onFocus() {},
    tabIndex: undefined
};
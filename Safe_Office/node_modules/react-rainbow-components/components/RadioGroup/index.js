'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withReduxForm = require('./../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

var _radioItems = require('./radioItems');

var _radioItems2 = _interopRequireDefault(_radioItems);

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _RequiredAsterisk = require('../RequiredAsterisk');

var _RequiredAsterisk2 = _interopRequireDefault(_RequiredAsterisk);

var _utils = require('../../libs/utils');

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A select list that can have a single entry checked at any one time.
 * @category Form
 */
var RadioGroup = function (_Component) {
    _inherits(RadioGroup, _Component);

    function RadioGroup(props) {
        _classCallCheck(this, RadioGroup);

        var _this = _possibleConstructorReturn(this, (RadioGroup.__proto__ || Object.getPrototypeOf(RadioGroup)).call(this, props));

        _this.errorId = (0, _utils.uniqueId)('error-message');
        _this.groupNameId = props.name || (0, _utils.uniqueId)('options');
        return _this;
    }

    _createClass(RadioGroup, [{
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var _props = this.props,
                className = _props.className,
                error = _props.error;

            return (0, _classnames2.default)('rainbow-radio-group_container', { 'rainbow-radio-group--error': !!error }, className);
        }
    }, {
        key: 'getErrorMessageId',
        value: function getErrorMessageId() {
            var error = this.props.error;

            if (error) {
                return this.errorId;
            }
            return undefined;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                style = _props2.style,
                label = _props2.label,
                required = _props2.required,
                error = _props2.error,
                onChange = _props2.onChange,
                options = _props2.options,
                value = _props2.value,
                id = _props2.id;


            return _react2.default.createElement(
                'fieldset',
                { id: id, className: this.getContainerClassNames(), style: style },
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!label },
                    _react2.default.createElement(
                        'legend',
                        { className: 'rainbow-radio-group_label' },
                        _react2.default.createElement(_RequiredAsterisk2.default, { required: required }),
                        label
                    )
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'rainbow-radio-group_inner-container' },
                    _react2.default.createElement(_radioItems2.default, {
                        value: value,
                        onChange: onChange,
                        options: options,
                        name: this.groupNameId,
                        required: required,
                        ariaDescribedby: this.getErrorMessageId()
                    })
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!error },
                    _react2.default.createElement(
                        'div',
                        { id: this.getErrorMessageId(), className: 'rainbow-radio-group_text-error' },
                        error
                    )
                )
            );
        }
    }]);

    return RadioGroup;
}(_react.Component);

RadioGroup.propTypes = {
    /** The radio group label */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The name of the radio group */
    name: _propTypes2.default.string,
    /** The value of the element. */
    value: _propTypes2.default.string,
    /** The action triggered when a value attribute changes. */
    onChange: _propTypes2.default.func,
    /** If is set to true the radio group is required. This value defaults to false. */
    required: _propTypes2.default.bool,
    /** An array with the radio options. */
    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
        value: _propTypes2.default.string,
        disabled: _propTypes2.default.bool
    })),
    /** Specifies that an radio group must be filled out before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied for the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string
};

RadioGroup.defaultProps = {
    label: null,
    name: null,
    className: undefined,
    style: undefined,
    value: undefined,
    onChange: function onChange() {},
    required: false,
    options: [],
    error: null,
    id: undefined
};

exports.default = (0, _withReduxForm2.default)(RadioGroup);
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _utils = require('../../libs/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Radio = function (_Component) {
    _inherits(Radio, _Component);

    function Radio(props) {
        _classCallCheck(this, Radio);

        var _this = _possibleConstructorReturn(this, (Radio.__proto__ || Object.getPrototypeOf(Radio)).call(this, props));

        _this.radioId = (0, _utils.uniqueId)('radio');
        return _this;
    }

    _createClass(Radio, [{
        key: 'getLabelClassNames',
        value: function getLabelClassNames() {
            var disabled = this.props.disabled;

            return (0, _classnames2.default)('rainbow-radio-group_radio-label', {
                'rainbow-radio-group_radio-label--disabled': disabled
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                label = _props.label,
                ariaDescribedby = _props.ariaDescribedby,
                onChange = _props.onChange,
                value = _props.value,
                disabled = _props.disabled,
                isChecked = _props.isChecked,
                name = _props.name,
                required = _props.required;


            return _react2.default.createElement(
                'span',
                { className: 'rainbow-radio-group_radio' },
                _react2.default.createElement('input', {
                    type: 'radio',
                    required: required,
                    id: this.radioId,
                    name: name,
                    value: value,
                    checked: isChecked,
                    'aria-describedby': ariaDescribedby,
                    onChange: onChange,
                    disabled: disabled
                }),
                _react2.default.createElement(
                    'label',
                    { className: 'rainbow-radio-group_radio-label-container', htmlFor: this.radioId },
                    _react2.default.createElement('span', { className: 'rainbow-radio-group_radio-faux' }),
                    _react2.default.createElement(
                        _RenderIf2.default,
                        { isTrue: !!label },
                        _react2.default.createElement(
                            'span',
                            { className: this.getLabelClassNames() },
                            label
                        )
                    )
                )
            );
        }
    }]);

    return Radio;
}(_react.Component);

exports.default = Radio;


Radio.propTypes = {
    label: _propTypes2.default.node.isRequired,
    value: _propTypes2.default.string,
    onChange: _propTypes2.default.func,
    ariaDescribedby: _propTypes2.default.string,
    disabled: _propTypes2.default.bool,
    isChecked: _propTypes2.default.bool,
    name: _propTypes2.default.string,
    required: _propTypes2.default.bool.isRequired
};

Radio.defaultProps = {
    value: undefined,
    onChange: function onChange() {},
    ariaDescribedby: undefined,
    disabled: false,
    isChecked: false,
    name: undefined
};
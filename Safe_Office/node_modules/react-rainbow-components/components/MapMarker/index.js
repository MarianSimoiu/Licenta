'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = MapMarker;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _context = require('./../GMap/context');

var _utils = require('./../../libs/utils');

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/prop-types */


var marker = Symbol('marker');

var Marker = function (_Component) {
    _inherits(Marker, _Component);

    function Marker(props) {
        _classCallCheck(this, Marker);

        var _this = _possibleConstructorReturn(this, (Marker.__proto__ || Object.getPrototypeOf(Marker)).call(this, props));

        _this.getLocationInfo = _this.getLocationInfo.bind(_this);
        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleMarkerClick = _this.handleMarkerClick.bind(_this);
        _this.startAnimation = _this.startAnimation.bind(_this);
        _this.stopAnimation = _this.stopAnimation.bind(_this);
        _this.name = (0, _utils.uniqueId)('marker');

        var label = props.label,
            description = props.description;

        _this.state = {
            label: label,
            description: description
        };
        return _this;
    }

    _createClass(Marker, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            if (this.props.map) {
                this.setMarker();
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var _props = this.props,
                map = _props.map,
                latitude = _props.latitude,
                longitude = _props.longitude;


            if (!this[marker] && map && latitude && longitude) {
                this.setMarker();
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            window.google.maps.event.removeListener(this.markerListener);
        }
    }, {
        key: 'setMarker',
        value: function setMarker() {
            var _props2 = this.props,
                map = _props2.map,
                latitude = _props2.latitude,
                longitude = _props2.longitude,
                geocoder = _props2.geocoder,
                label = _props2.label,
                description = _props2.description;


            var position = {
                lat: latitude,
                lng: longitude
            };
            this[marker] = new window.google.maps.Marker({
                position: position,
                map: map
            });
            this.markerListener = this[marker].addListener('click', this.handleMarkerClick);
            if (!label && !description) {
                geocoder.geocode({ location: position }, this.getLocationInfo);
            } else if (!this.state.infowindow) {
                this.setInfoWindow();
            }
        }
    }, {
        key: 'getLocationInfo',
        value: function getLocationInfo(results, status) {
            if (status === 'OK' && results[0]) {
                var geoLabel = results[0].address_components[0].long_name;
                var geoDescription = results[0].formatted_address;
                var infowindow = new window.google.maps.InfoWindow({
                    content: geoDescription
                });
                this.setState({
                    label: geoLabel,
                    description: geoDescription,
                    infowindow: infowindow
                });
            }
        }
    }, {
        key: 'setInfoWindow',
        value: function setInfoWindow() {
            var _props3 = this.props,
                description = _props3.description,
                label = _props3.label;

            this.setState({
                infowindow: new window.google.maps.InfoWindow({
                    content: description || label
                })
            });
        }
    }, {
        key: 'getAssistiveAriaLiveText',
        value: function getAssistiveAriaLiveText() {
            var label = this.state.label;

            if (this.isSelected()) {
                return label + ' is currently selected';
            }
            return undefined;
        }
    }, {
        key: 'handleMarkerClick',
        value: function handleMarkerClick() {
            var privateMarkerClick = this.props.privateMarkerClick;
            var infowindow = this.state.infowindow;

            if (this[marker]) {
                privateMarkerClick(infowindow, this[marker]);
            }
        }
    }, {
        key: 'handleClick',
        value: function handleClick() {
            var _props4 = this.props,
                privateOnClick = _props4.privateOnClick,
                latitude = _props4.latitude,
                longitude = _props4.longitude;

            var position = {
                lat: latitude,
                lng: longitude
            };
            if (this[marker]) {
                this[marker].setAnimation(null);
                privateOnClick(this.name, position);
            }
        }
    }, {
        key: 'startAnimation',
        value: function startAnimation() {
            if (this[marker]) {
                this[marker].setAnimation(window.google.maps.Animation.BOUNCE);
            }
        }
    }, {
        key: 'stopAnimation',
        value: function stopAnimation() {
            if (this[marker]) {
                this[marker].setAnimation(null);
            }
        }
    }, {
        key: 'isSelected',
        value: function isSelected() {
            var selectedMarker = this.props.selectedMarker;

            return this.name === selectedMarker;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props5 = this.props,
                className = _props5.className,
                style = _props5.style,
                latitude = _props5.latitude,
                longitude = _props5.longitude,
                icon = _props5.icon;
            var _state = this.state,
                label = _state.label,
                description = _state.description;


            if (latitude && longitude) {
                return _react2.default.createElement(
                    'li',
                    { className: className, style: style },
                    _react2.default.createElement(
                        'span',
                        {
                            className: 'rainbow-google-map-marker_assistive-aria-live',
                            'aria-live': 'polite'
                        },
                        this.getAssistiveAriaLiveText()
                    ),
                    _react2.default.createElement(
                        'button',
                        {
                            className: 'rainbow-google-map-marker_button',
                            'aria-pressed': this.isSelected(),
                            onClick: this.handleClick,
                            onMouseOver: this.startAnimation,
                            onFocus: this.startAnimation,
                            onMouseLeave: this.stopAnimation,
                            onBlur: this.stopAnimation
                        },
                        _react2.default.createElement(_icon2.default, { icon: icon }),
                        _react2.default.createElement(
                            'span',
                            { className: 'rainbow-google-map-marker_text-container' },
                            _react2.default.createElement(
                                'span',
                                { className: 'rainbow-google-map-marker_label' },
                                label
                            ),
                            _react2.default.createElement(
                                'span',
                                null,
                                description
                            )
                        )
                    )
                );
            }
            return null;
        }
    }]);

    return Marker;
}(_react.Component);

/**
 * The MapMarker component is a single section of information that is nested in the GMap component.
 * This component shows you the detailed information of each location that is displayed in the GMap.
 */


function MapMarker(props) {
    return _react2.default.createElement(
        _context.Consumer,
        null,
        function (context) {
            return _react2.default.createElement(Marker, _extends({}, props, context));
        }
    );
}

MapMarker.propTypes = {
    /** The label of the marker. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The description of the marker. */
    description: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The angular distance of a place north or south of the earth's equator. */
    latitude: _propTypes2.default.number.isRequired,
    /** The angular distance of a place east or west of the meridian at Greenwich. */
    longitude: _propTypes2.default.number.isRequired,
    /** The icon to show if it is passed. If not passed a fallback icon will be showed. */
    icon: _propTypes2.default.node,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

MapMarker.defaultProps = {
    label: undefined,
    description: undefined,
    icon: null,
    className: undefined,
    style: undefined
};
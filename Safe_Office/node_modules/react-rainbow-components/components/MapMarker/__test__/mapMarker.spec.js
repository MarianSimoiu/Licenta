'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _index = require('./../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var marker = {
    addListener: jest.fn(),
    setAnimation: jest.fn()
};

global.google = {
    maps: {
        Marker: jest.fn(function () {
            return marker;
        }),
        event: {
            removeListener: jest.fn()
        },
        Animation: {
            BOUNCE: 'bounce animation'
        },
        InfoWindow: jest.fn()
    }
};

var newContext = {
    map: 'my map',
    geocoder: {
        geocode: jest.fn()
    }
};

describe('<MapMarker/>', function () {
    it('should set aria-pressed to true in marker button when it is selected', function () {
        marker.setAnimation.mockReset();
        // here actually selectedMarker is injected via context, not props
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10, selectedMarker: 'marker-1' }));
        expect(component.find('.rainbow-google-map-marker_button').prop('aria-pressed')).toBe(true);
    });
    it('should not retrun anything when latitude and longitude are not passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, null));
        expect(component.find('li').exists()).toBe(false);
    });
    it('should render the marker when latitude and longitude are passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        expect(component.find('li').exists()).toBe(true);
    });
    it('should not call google.maps.Marker when latitude is not passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        expect(global.google.maps.Marker).not.toHaveBeenCalled();
    });
    it('should not call google.maps.Marker when longitude is not passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        expect(global.google.maps.Marker).not.toHaveBeenCalled();
    });
    it('should call google.maps.Marker with the right data', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        expect(global.google.maps.Marker).toHaveBeenCalledWith({
            position: {
                lat: 5,
                lng: 10
            },
            map: 'my map'
        });
    });
    it('should call addListener on marker with the right data', function () {
        marker.addListener.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        expect(marker.addListener).toHaveBeenCalledWith('click', expect.any(Function));
    });
    it('should call geocoder.geocode with the right data when label and description are not passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        expect(newContext.geocoder.geocode).toHaveBeenCalledWith({
            location: {
                lat: 5,
                lng: 10
            }
        }, expect.any(Function));
    });
    it('should not call geocoder.geocode when label is passed', function () {
        newContext.geocoder.geocode.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10, label: 'my label' }));
        // this actually is context not props
        component.setProps(newContext);
        expect(newContext.geocoder.geocode).not.toHaveBeenCalled();
    });
    it('should not call geocoder.geocode when description is passed', function () {
        newContext.geocoder.geocode.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10, description: 'my description' }));
        // this actually is context not props
        component.setProps(newContext);
        expect(newContext.geocoder.geocode).not.toHaveBeenCalled();
    });
    it('should call global.google.maps.InfoWindow with the description is passed', function () {
        global.google.maps.InfoWindow.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10, description: 'my description' }));
        // this actually is context not props
        component.setProps(newContext);
        expect(global.google.maps.InfoWindow).toHaveBeenCalledWith({
            content: 'my description'
        });
    });
    it('should call global.google.maps.InfoWindow with the label is passed', function () {
        global.google.maps.InfoWindow.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10, label: 'my label' }));
        // this actually is context not props
        component.setProps(newContext);
        expect(global.google.maps.InfoWindow).toHaveBeenCalledWith({
            content: 'my label'
        });
    });

    it('should call google.maps.event.removeListener when unmount the component', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        component.unmount();
        expect(global.google.maps.event.removeListener).toHaveBeenCalled();
    });
    it('should call setAnimation on marker with null when the marker button is clicked', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        var context = _extends({}, newContext, {
            privateOnClick: jest.fn()
        });
        // this actually is context not props
        component.setProps(context);
        component.find('.rainbow-google-map-marker_button').simulate('click');
        expect(marker.setAnimation).toHaveBeenCalledWith(null);
    });
    it('should call setAnimation on marker with the bounce animation when mouseover event occurs on marker button', function () {
        marker.setAnimation.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        component.find('.rainbow-google-map-marker_button').simulate('mouseover');
        expect(marker.setAnimation).toHaveBeenCalledWith(global.google.maps.Animation.BOUNCE);
    });
    it('should call setAnimation on marker with the bounce animation when the marker button is focused', function () {
        marker.setAnimation.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        component.find('.rainbow-google-map-marker_button').simulate('focus');
        expect(marker.setAnimation).toHaveBeenCalledWith(global.google.maps.Animation.BOUNCE);
    });
    it('should call setAnimation on marker with null when mouseleave event occurs on marker button', function () {
        marker.setAnimation.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        component.find('.rainbow-google-map-marker_button').simulate('mouseleave');
        expect(marker.setAnimation).toHaveBeenCalledWith(null);
    });
    it('should call setAnimation on marker with null when the marker button is blurred', function () {
        marker.setAnimation.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        // this actually is context not props
        component.setProps(newContext);
        component.find('.rainbow-google-map-marker_button').simulate('blur');
        expect(marker.setAnimation).toHaveBeenCalledWith(null);
    });
    it('should set aria-pressed to false in marker button when it is not selected', function () {
        marker.setAnimation.mockReset();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { latitude: 5, longitude: 10 }));
        expect(component.find('.rainbow-google-map-marker_button').prop('aria-pressed')).toBe(false);
    });
});
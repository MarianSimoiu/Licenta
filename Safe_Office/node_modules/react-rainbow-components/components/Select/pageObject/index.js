'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Select page object class.
 * @class
 */
var PageSelect = function () {
    /**
     * Create a new Select page object.
     * @constructor
     * @param {string} rootElement - The selector of the Select root element.
     */
    function PageSelect(rootElement) {
        _classCallCheck(this, PageSelect);

        this.rootElement = rootElement;
    }

    /**
     * Clicks the select element.
     * @method
     */


    _createClass(PageSelect, [{
        key: 'click',
        value: function click() {
            $(this.rootElement).$('select').click();
        }

        /**
         * Clicks the label element.
         * @method
         */

    }, {
        key: 'clickLabel',
        value: function clickLabel() {
            $(this.rootElement).$('label').click();
        }

        /**
         * Returns true when the select element has focus.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'hasFocusSelect',
        value: function hasFocusSelect() {
            return $(this.rootElement).$('select').isFocused();
        }

        /**
         * Returns true when the select item with item position is selected.
         * @method
         * @returns {bool}
         * @param {number} itemPosition - The base 0 index of the select item.
         */

    }, {
        key: 'isSelectedItem',
        value: function isSelectedItem(itemPosition) {
            var items = $(this.rootElement).$$('option');
            if (items[itemPosition]) {
                return items[itemPosition].isSelected();
            }
            return false;
        }
    }]);

    return PageSelect;
}();

module.exports = PageSelect;
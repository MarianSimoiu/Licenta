'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withReduxForm = require('./../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

var _utils = require('./../../libs/utils');

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _RequiredAsterisk = require('../RequiredAsterisk');

var _RequiredAsterisk2 = _interopRequireDefault(_RequiredAsterisk);

var _options = require('./options');

var _options2 = _interopRequireDefault(_options);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Select element presents a menu of options.
 * @category Form
 */
var Select = function (_Component) {
    _inherits(Select, _Component);

    function Select(props) {
        _classCallCheck(this, Select);

        var _this = _possibleConstructorReturn(this, (Select.__proto__ || Object.getPrototypeOf(Select)).call(this, props));

        _this.selectId = (0, _utils.uniqueId)('select');
        _this.selectRef = _react2.default.createRef();
        return _this;
    }

    _createClass(Select, [{
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var _props = this.props,
                className = _props.className,
                error = _props.error;

            return (0, _classnames2.default)('rainbow-select_container', {
                'rainbow-select--error': error
            }, className);
        }
    }, {
        key: 'getLabelClassNames',
        value: function getLabelClassNames() {
            var hideLabel = this.props.hideLabel;

            return (0, _classnames2.default)('rainbow-select_label', {
                'rainbow-select_label--hide-label': hideLabel
            });
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.selectRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.selectRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.selectRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                label = _props2.label,
                value = _props2.value,
                onChange = _props2.onChange,
                onFocus = _props2.onFocus,
                onBlur = _props2.onBlur,
                onClick = _props2.onClick,
                error = _props2.error,
                required = _props2.required,
                disabled = _props2.disabled,
                options = _props2.options,
                style = _props2.style,
                id = _props2.id,
                name = _props2.name;


            return _react2.default.createElement(
                'div',
                { className: this.getContainerClassNames(), style: style, id: id },
                _react2.default.createElement(
                    'label',
                    { className: this.getLabelClassNames(), htmlFor: this.selectId },
                    _react2.default.createElement(_RequiredAsterisk2.default, { required: required }),
                    label
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'rainbow-select_inner-container', disabled: disabled },
                    _react2.default.createElement(
                        'select',
                        {
                            className: 'rainbow-select',
                            id: this.selectId,
                            name: name,
                            onChange: onChange,
                            onFocus: onFocus,
                            onBlur: onBlur,
                            onClick: onClick,
                            value: value,
                            required: required,
                            disabled: disabled,
                            ref: this.selectRef
                        },
                        _react2.default.createElement(_options2.default, { options: options })
                    )
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!error },
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-select_text-error' },
                        error
                    )
                )
            );
        }
    }]);

    return Select;
}(_react.Component);

Select.propTypes = {
    /** Text label for the select. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    /** The name of the select */
    name: _propTypes2.default.string,
    /** Specifies the selected value. */
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    /** The action triggered when a option item is selected. */
    onChange: _propTypes2.default.func,
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** Specifies that an input field must be filled out before submitting the form.
     * This value defaults to false. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that an input field must be filled out before submitting the form.
     * This value defaults to false. */
    required: _propTypes2.default.bool,
    /** Specifies that an input element should be disabled. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** The option items to be displayed. */
    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
        value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
        disabled: _propTypes2.default.bool
    })),
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** The id of the outer element. */
    hideLabel: _propTypes2.default.bool
};

Select.defaultProps = {
    value: undefined,
    name: undefined,
    onChange: function onChange() {},
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    error: null,
    required: false,
    disabled: false,
    options: [],
    className: undefined,
    style: undefined,
    id: undefined,
    hideLabel: false
};

exports.default = (0, _withReduxForm2.default)(Select);
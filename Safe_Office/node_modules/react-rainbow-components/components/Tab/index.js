'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = Tab;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _context = require('../Tabset/context');

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-script-url, react/prop-types */


var TabItem = function (_Component) {
    _inherits(TabItem, _Component);

    function TabItem(props) {
        _classCallCheck(this, TabItem);

        var _this = _possibleConstructorReturn(this, (TabItem.__proto__ || Object.getPrototypeOf(TabItem)).call(this, props));

        _this.tabRef = _react2.default.createRef();
        _this.handleSelect = _this.handleSelect.bind(_this);
        return _this;
    }

    _createClass(TabItem, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var _props = this.props,
                privateRegisterTab = _props.privateRegisterTab,
                name = _props.name,
                disabled = _props.disabled;

            if (!disabled) {
                setTimeout(function () {
                    return privateRegisterTab({ name: name, ref: _this2.tabRef.current });
                }, 0);
            }
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(_ref) {
            var prevName = _ref.name;
            var _props2 = this.props,
                name = _props2.name,
                privateUpdateTab = _props2.privateUpdateTab;

            if (name !== prevName) {
                privateUpdateTab({ name: name, ref: this.tabRef.current }, prevName);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var _props3 = this.props,
                privateUnRegisterTab = _props3.privateUnRegisterTab,
                name = _props3.name;

            privateUnRegisterTab(name);
        }
    }, {
        key: 'getContainerClassName',
        value: function getContainerClassName() {
            var _props4 = this.props,
                className = _props4.className,
                fullWidth = _props4.fullWidth;

            return (0, _classnames2.default)('rainbow-tab', {
                'rainbow-tab--full-width': fullWidth,
                'rainbow-tab--active': this.isSelected()
            }, className);
        }
    }, {
        key: 'getTabClassName',
        value: function getTabClassName() {
            var _props5 = this.props,
                disabled = _props5.disabled,
                fullWidth = _props5.fullWidth;

            return (0, _classnames2.default)('rainbow-tab_anchor', {
                'rainbow-tab--active': this.isSelected(),
                'rainbow-tab--disabled': disabled,
                'rainbow-tab--full-width': fullWidth
            });
        }
    }, {
        key: 'getTabIndex',
        value: function getTabIndex() {
            if (this.isSelected()) {
                return 0;
            }
            return -1;
        }
    }, {
        key: 'handleSelect',
        value: function handleSelect(e) {
            var _props6 = this.props,
                disabled = _props6.disabled,
                onSelect = _props6.onSelect,
                name = _props6.name;

            if (!disabled) {
                onSelect(e, name);
            }
        }
    }, {
        key: 'isSelected',
        value: function isSelected() {
            var _props7 = this.props,
                activeTabName = _props7.activeTabName,
                name = _props7.name;

            return activeTabName === name;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props8 = this.props,
                label = _props8.label,
                style = _props8.style,
                title = _props8.title,
                id = _props8.id,
                ariaControls = _props8.ariaControls;


            return _react2.default.createElement(
                'li',
                {
                    className: this.getContainerClassName(),
                    style: style,
                    title: title,
                    role: 'presentation'
                },
                _react2.default.createElement(
                    'a',
                    {
                        href: 'javascript:void(0);',
                        role: 'tab',
                        className: this.getTabClassName(),
                        'aria-selected': this.isSelected(),
                        onClick: this.handleSelect,
                        tabIndex: this.getTabIndex(),
                        id: id,
                        'aria-controls': ariaControls,
                        ref: this.tabRef
                    },
                    _react2.default.createElement(
                        'span',
                        { className: 'rainbow-tab_anchor-inner-text' },
                        label
                    )
                )
            );
        }
    }]);

    return TabItem;
}(_react.Component);

/** @category Layout */


function Tab(props) {
    return _react2.default.createElement(
        _context.Consumer,
        null,
        function (context) {
            return _react2.default.createElement(TabItem, _extends({}, props, context));
        }
    );
}

Tab.propTypes = {
    /** The text displayed for the tab item. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string]),
    /** The name is used during tabset's onSelect
     * event to determine which tab was clicked. */
    name: _propTypes2.default.string.isRequired,
    /** Displays tooltip text when the mouse moves over the element. */
    title: _propTypes2.default.string,
    /** Specifies whether this tab should be displayed in a disabled state.
     * Disabled tabs can't be clicked. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** This ID is to be associated with the aria-labelledby attribute of the container
     * that show the content of this tab. */
    id: _propTypes2.default.string,
    /** This prop is associated with the id attribute of the container
     * that show the content of this tab. */
    ariaControls: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied for the outer element. */
    style: _propTypes2.default.object
};

Tab.defaultProps = {
    label: null,
    name: undefined,
    title: undefined,
    disabled: false,
    id: undefined,
    ariaControls: undefined,
    className: undefined,
    style: undefined
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = AccordionSection;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _RenderIf = require('./../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _utils = require('./../../libs/utils');

var _context = require('./../Accordion/context');

var _ButtonIcon = require('./../ButtonIcon');

var _ButtonIcon2 = _interopRequireDefault(_ButtonIcon);

var _rightArrow = require('./rightArrow');

var _rightArrow2 = _interopRequireDefault(_rightArrow);

var _isInArray = require('./isInArray');

var _isInArray2 = _interopRequireDefault(_isInArray);

var _removeItemFromArray = require('./removeItemFromArray');

var _removeItemFromArray2 = _interopRequireDefault(_removeItemFromArray);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/prop-types */


var AccordionItem = function (_Component) {
    _inherits(AccordionItem, _Component);

    function AccordionItem(props) {
        _classCallCheck(this, AccordionItem);

        var _this = _possibleConstructorReturn(this, (AccordionItem.__proto__ || Object.getPrototypeOf(AccordionItem)).call(this, props));

        _this.accordionDetailsId = (0, _utils.uniqueId)('accordion-section-details');
        _this.name = (0, _utils.uniqueId)('accordion-section');
        _this.handleToggleSection = _this.handleToggleSection.bind(_this);
        _this.handleFocusSection = _this.handleFocusSection.bind(_this);
        _this.handleKeyPressed = _this.handleKeyPressed.bind(_this);
        _this.containerRef = _react2.default.createRef();
        _this.buttonRef = _react2.default.createRef();
        return _this;
    }

    _createClass(AccordionItem, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var _props = this.props,
                privateRegisterAccordionSection = _props.privateRegisterAccordionSection,
                disabled = _props.disabled;

            if (!disabled) {
                return setTimeout(function () {
                    return privateRegisterAccordionSection({
                        name: _this2.getCurrentName(),
                        ref: _this2.containerRef.current,
                        focusButtonIcon: _this2.buttonRef.current.focus.bind(_this2)
                    });
                }, 0);
            }
            return null;
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var privateUnregisterAccordionSection = this.props.privateUnregisterAccordionSection;

            privateUnregisterAccordionSection(this.getCurrentName());
        }
    }, {
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var _props2 = this.props,
                className = _props2.className,
                disabled = _props2.disabled;

            return (0, _classnames2.default)('rainbow-accordion-section_container', {
                'rainbow-accordion-section_container--disabled': disabled
            }, className);
        }
    }, {
        key: 'getCollapsedClassNames',
        value: function getCollapsedClassNames() {
            var isExpanded = this.isExpanded();
            return (0, _classnames2.default)('rainbow-accordion-section_content', {
                'rainbow-accordion-section_content--collapsed': !isExpanded
            });
        }
    }, {
        key: 'getCurrentName',
        value: function getCurrentName() {
            var name = this.props.name;

            return name || this.name;
        }
    }, {
        key: 'resolveActiveNamesWhenMultiple',
        value: function resolveActiveNamesWhenMultiple() {
            var activeNames = this.props.activeNames;

            var nameToToggle = this.getCurrentName();

            if (activeNames === undefined) {
                return [nameToToggle];
            }
            if ((0, _isInArray2.default)(activeNames, nameToToggle)) {
                return (0, _removeItemFromArray2.default)(activeNames, nameToToggle);
            }
            return activeNames.concat([nameToToggle]);
        }
    }, {
        key: 'resolveActiveNames',
        value: function resolveActiveNames() {
            var _props3 = this.props,
                multiple = _props3.multiple,
                activeNames = _props3.activeNames;

            var nameToToggle = this.getCurrentName();
            if (multiple) {
                return this.resolveActiveNamesWhenMultiple();
            }
            if (nameToToggle === activeNames) {
                return '';
            }
            return nameToToggle;
        }
    }, {
        key: 'handleToggleSection',
        value: function handleToggleSection(event) {
            var _props4 = this.props,
                disabled = _props4.disabled,
                privateOnToggleSection = _props4.privateOnToggleSection;

            if (!disabled) {
                privateOnToggleSection(event, this.resolveActiveNames());
            }
        }
    }, {
        key: 'handleFocusSection',
        value: function handleFocusSection() {
            var _props5 = this.props,
                disabled = _props5.disabled,
                privateOnFocusSection = _props5.privateOnFocusSection;

            if (!disabled) {
                privateOnFocusSection(this.getCurrentName());
            }
        }
    }, {
        key: 'handleKeyPressed',
        value: function handleKeyPressed(event) {
            var _props6 = this.props,
                disabled = _props6.disabled,
                privateOnKeyPressed = _props6.privateOnKeyPressed;

            if (!disabled) {
                privateOnKeyPressed(event);
            }
        }
    }, {
        key: 'isExpanded',
        value: function isExpanded() {
            var _props7 = this.props,
                activeNames = _props7.activeNames,
                multiple = _props7.multiple;

            var currentName = this.getCurrentName();
            if (multiple && Array.isArray(activeNames)) {
                return (0, _isInArray2.default)(activeNames, currentName);
            }
            return activeNames === currentName;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props8 = this.props,
                style = _props8.style,
                disabled = _props8.disabled,
                children = _props8.children,
                label = _props8.label,
                icon = _props8.icon,
                assistiveText = _props8.assistiveText;


            var isExpanded = this.isExpanded();

            return _react2.default.createElement(
                'li',
                {
                    className: this.getContainerClassNames(),
                    style: style,
                    disabled: disabled,
                    ref: this.containerRef
                },
                _react2.default.createElement(
                    'section',
                    null,
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-accordion-section_summary' },
                        _react2.default.createElement(
                            'h3',
                            { className: 'rainbow-accordion-section_summary-heading' },
                            _react2.default.createElement(
                                _RenderIf2.default,
                                { isTrue: !!icon },
                                _react2.default.createElement(
                                    'span',
                                    { className: 'rainbow-accordion-section_summary-icon' },
                                    icon
                                )
                            ),
                            _react2.default.createElement(
                                _RenderIf2.default,
                                { isTrue: !!label },
                                _react2.default.createElement(
                                    'span',
                                    { title: 'Accordion Label' },
                                    label
                                )
                            )
                        ),
                        _react2.default.createElement(_ButtonIcon2.default, {
                            size: 'small',
                            disabled: disabled,
                            onClick: this.handleToggleSection,
                            onFocus: this.handleFocusSection,
                            onKeyDown: this.handleKeyPressed,
                            assistiveText: assistiveText,
                            ariaControls: this.accordionDetailsId,
                            ariaExpanded: isExpanded,
                            ref: this.buttonRef,
                            icon: _react2.default.createElement(_rightArrow2.default, { isExpanded: isExpanded, disabled: disabled })
                        })
                    ),
                    _react2.default.createElement(
                        'div',
                        {
                            'aria-hidden': !isExpanded,
                            className: this.getCollapsedClassNames(),
                            id: this.accordionDetailsId
                        },
                        children
                    )
                )
            );
        }
    }]);

    return AccordionItem;
}(_react.Component);

/**
 * An AccordionSection is single section that is nested in the Accordion component.
 * @category Layout
 */


function AccordionSection(props) {
    return _react2.default.createElement(
        _context.Consumer,
        null,
        function (context) {
            return _react2.default.createElement(AccordionItem, _extends({}, props, context));
        }
    );
}

AccordionSection.propTypes = {
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied for the outer element. */
    style: _propTypes2.default.object,
    /** Specifies that the AccordionSection element should be disabled.
     * This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /**
     * This prop that should not be visible in the documentation.
     * @ignore
     */
    children: _propTypes2.default.node,
    /** The text to be displayed as the AccordionSection's label. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The icon to show at the left of the label. */
    icon: _propTypes2.default.node,
    /** A description for assistive sreen readers. */
    assistiveText: _propTypes2.default.string,
    /** The name is used to determine which AccordionSection was clicked.
     * If `name` is not passed it will be generated. */
    name: _propTypes2.default.string
};

AccordionSection.defaultProps = {
    className: undefined,
    style: undefined,
    assistiveText: undefined,
    disabled: false,
    children: null,
    label: undefined,
    icon: null,
    name: undefined
};
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _index = require('./../index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Textarea/>', function () {
    it('should set an id in the textarea element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, null));
        expect(component.find('textarea').prop('id')).toMatch(/textarea/);
    });
    it('should set the value passed in the textarea element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { value: 'textarea value' }));
        expect(component.find('textarea').prop('value')).toBe('textarea value');
    });
    it('should set the placeholder passed in the textarea element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { placeholder: 'Placeholder Text' }));
        expect(component.find('textarea').prop('placeholder')).toBe('Placeholder Text');
    });
    it('should fire an event when the user change the textarea', function () {
        var onChangeFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { onChange: onChangeFn }));
        component.find('textarea').simulate('change');
        expect(onChangeFn).toHaveBeenCalledTimes(1);
    });
    it('should set the disabled passed in the textarea element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { disabled: true }));
        expect(component.find('textarea').prop('disabled')).toBe(true);
    });
    it('should set the readonly passed in the textarea element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { readOnly: true }));
        expect(component.find('textarea').prop('readOnly')).toBe(true);
    });
    it('should set required in the textarea element if it is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { required: true }));
        expect(component.find('textarea').prop('required')).toBe(true);
    });
    it('should set the maxLength passed in the textarea element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { maxLength: 0 }));
        expect(component.find('textarea').prop('maxLength')).toBe(0);
    });
    it('should set the minLength passed in the textarea element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { minLength: 0 }));
        expect(component.find('textarea').prop('minLength')).toBe(0);
    });
    it('should pass a generated id to the Label component and set the same id to the aria-labelledby for the textarea when a bottomHelpText is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { bottomHelpText: 'Help text' }));
        expect(component.find('Label').prop('id')).toMatch(/inline-text-label/);
        expect(component.find('textarea').prop('aria-labelledby')).toMatch(/inline-text-label/);
    });
    it('should pass the right props to the Label component', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { label: 'custom label', required: true }));
        expect(component.find('Label').props()).toEqual({
            label: 'custom label',
            required: true,
            readOnly: false,
            hideLabel: false,
            textareaId: expect.any(String)
        });
    });
    it('should have the right class name in the container element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, null));
        expect(component.find('div[className="rainbow-textarea_container"]').exists()).toBe(true);
    });
    it('should have the right class names when error is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_index2.default, { error: 'Error text' }));
        expect(component.find('div[className="rainbow-textarea_container rainbow-textarea--error"]').exists()).toBe(true);
    });
});
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _autosize = require('autosize');

var _autosize2 = _interopRequireDefault(_autosize);

var _withReduxForm = require('./../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

var _utils = require('./../../libs/utils');

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _label = require('./label');

var _label2 = _interopRequireDefault(_label);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Textarea inputs are used for freeform data entry.
 * @category Form
 */
var Textarea = function (_Component) {
    _inherits(Textarea, _Component);

    function Textarea(props) {
        _classCallCheck(this, Textarea);

        var _this = _possibleConstructorReturn(this, (Textarea.__proto__ || Object.getPrototypeOf(Textarea)).call(this, props));

        _this.textareaRef = _react2.default.createRef();
        _this.textareaId = (0, _utils.uniqueId)('textarea');
        _this.inlineTextLabelId = (0, _utils.uniqueId)('inline-text-label');
        _this.errorMessageId = (0, _utils.uniqueId)('error-message');
        return _this;
    }

    _createClass(Textarea, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var grow = this.props.grow;

            if (grow) {
                return (0, _autosize2.default)(this.textareaRef.current);
            }
            return null;
        }
    }, {
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var _props = this.props,
                className = _props.className,
                error = _props.error;

            return (0, _classnames2.default)('rainbow-textarea_container', { 'rainbow-textarea--error': error }, className);
        }
    }, {
        key: 'getInlineTextLabelId',
        value: function getInlineTextLabelId() {
            var bottomHelpText = this.props.bottomHelpText;

            if (bottomHelpText) {
                return this.inlineTextLabelId;
            }
            return undefined;
        }
    }, {
        key: 'getErrorMessageId',
        value: function getErrorMessageId() {
            var error = this.props.error;

            if (error) {
                return this.errorMessageId;
            }
            return undefined;
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.textareaRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.textareaRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.textareaRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                style = _props2.style,
                onChange = _props2.onChange,
                onClick = _props2.onClick,
                onFocus = _props2.onFocus,
                onBlur = _props2.onBlur,
                onPaste = _props2.onPaste,
                value = _props2.value,
                readOnly = _props2.readOnly,
                label = _props2.label,
                error = _props2.error,
                placeholder = _props2.placeholder,
                disabled = _props2.disabled,
                maxLength = _props2.maxLength,
                minLength = _props2.minLength,
                bottomHelpText = _props2.bottomHelpText,
                required = _props2.required,
                rows = _props2.rows,
                id = _props2.id,
                hideLabel = _props2.hideLabel,
                name = _props2.name;


            return _react2.default.createElement(
                'div',
                { className: this.getContainerClassNames(), style: style, id: id },
                _react2.default.createElement(_label2.default, {
                    label: label,
                    hideLabel: hideLabel,
                    required: required,
                    textareaId: this.textareaId,
                    readOnly: readOnly,
                    id: this.getInlineTextLabelId()
                }),
                _react2.default.createElement('textarea', {
                    id: this.textareaId,
                    className: 'rainbow-textarea',
                    name: name,
                    placeholder: placeholder,
                    disabled: disabled,
                    required: required,
                    maxLength: maxLength,
                    minLength: minLength,
                    onChange: onChange,
                    onClick: onClick,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    onPaste: onPaste,
                    readOnly: readOnly,
                    rows: rows,
                    value: value,
                    'aria-labelledby': this.getInlineTextLabelId(),
                    'aria-describedby': this.getErrorMessageId(),
                    ref: this.textareaRef
                }),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!bottomHelpText },
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-textarea_bottom-help' },
                        bottomHelpText
                    )
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!error },
                    _react2.default.createElement(
                        'div',
                        { id: this.getErrorMessageId(), className: 'rainbow-textarea_text-error' },
                        error
                    )
                )
            );
        }
    }]);

    return Textarea;
}(_react.Component);

Textarea.propTypes = {
    /** Text that describes the desired textarea input. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    /** A boolean to hide the textarea label */
    hideLabel: _propTypes2.default.bool,
    /** The name of the textarea */
    name: _propTypes2.default.string,
    /** The value of the textarea, also used as the default value during init. */
    value: _propTypes2.default.string,
    /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
    placeholder: _propTypes2.default.string,
    /** The maximum number of characters allowed in the textarea. */
    maxLength: _propTypes2.default.number,
    /** The minimum number of characters allowed in the textarea. */
    minLength: _propTypes2.default.number,
    /** This make to textarea grow. This value defaults to false. */
    grow: _propTypes2.default.bool,
    /** Shows the help message below the textarea. */
    bottomHelpText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that the textarea field must be filled out before submitting the form.
     * This value defaults to false. */
    required: _propTypes2.default.bool,
    /** Specifies that the textarea field must be filled out before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that the textarea element should be disabled. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** The number of visible text lines for the control. The value by default is 3. */
    rows: _propTypes2.default.number,
    /** Specifies that the textarea field is read-only. This value defaults to false. */
    readOnly: _propTypes2.default.bool,
    /** The action triggered when a value attribute changes. */
    onChange: _propTypes2.default.func,
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** Event fired when the user paste on the textarea */
    onPaste: _propTypes2.default.func,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string
};

Textarea.defaultProps = {
    value: undefined,
    name: undefined,
    placeholder: null,
    maxLength: undefined,
    minLength: undefined,
    grow: false,
    bottomHelpText: null,
    required: false,
    error: null,
    disabled: false,
    rows: 3,
    readOnly: false,
    onChange: function onChange() {},
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    onPaste: function onPaste() {},
    className: undefined,
    style: undefined,
    id: undefined,
    hideLabel: false
};

exports.default = (0, _withReduxForm2.default)(Textarea);
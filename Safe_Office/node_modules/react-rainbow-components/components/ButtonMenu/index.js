'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = ButtonMenu;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _ButtonIcon = require('./../ButtonIcon');

var _ButtonIcon2 = _interopRequireDefault(_ButtonIcon);

var _PrimitiveMenu = require('../PrimitiveMenu');

var _PrimitiveMenu2 = _interopRequireDefault(_PrimitiveMenu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A Button Menu offers a list of actions or functions that a user can access.
 */
function ButtonMenu(props) {
    var icon = props.icon,
        buttonSize = props.buttonSize,
        title = props.title,
        assistiveText = props.assistiveText,
        buttonVariant = props.buttonVariant,
        buttonShaded = props.buttonShaded,
        disabled = props.disabled,
        tabIndex = props.tabIndex,
        onFocus = props.onFocus,
        onBlur = props.onBlur,
        children = props.children,
        rest = _objectWithoutProperties(props, ['icon', 'buttonSize', 'title', 'assistiveText', 'buttonVariant', 'buttonShaded', 'disabled', 'tabIndex', 'onFocus', 'onBlur', 'children']);

    return _react2.default.createElement(
        _PrimitiveMenu2.default,
        _extends({}, rest, {
            icon: icon,
            size: buttonSize,
            assistiveText: assistiveText,
            disabled: disabled,
            tabIndex: tabIndex,
            variant: buttonVariant,
            shaded: buttonShaded,
            title: title,
            onFocus: onFocus,
            onBlur: onBlur,
            trigger: _ButtonIcon2.default
        }),
        children
    );
}

ButtonMenu.propTypes = {
    /** The icon to show if it is passed.
     * It must be a svg icon or a font icon. It is a required value. */
    icon: _propTypes2.default.node.isRequired,
    /** The content of the ButtonMenu. Used to render the menuItem elements
     * when the ButtonMenu is open. */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.object]),
    /** The variant changes the look of the button. Accepted variants include base,
     * brand, success, border, border-filled, bare-inverse, and inverse.
     * This value defaults to border-filled. */
    buttonVariant: _propTypes2.default.oneOf(['base', 'brand', 'success', 'border', 'border-filled', 'border-inverse', 'inverse']),
    /** The size of the button. Options include xx-small, x-small, medium, or large.
     * This value defaults to medium. */
    buttonSize: _propTypes2.default.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),
    /** Specify true when the button has a shadow around it.
     * This value defaults to false.
     * Only neutral, brand, destructive and success variant can be shaded. */
    buttonShaded: _propTypes2.default.bool,
    /** The size of the menu. Options include xx-small, x-small, medium, or large.
     * This value defaults to small. */
    menuSize: _propTypes2.default.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),
    /** Determines the alignment of the menu relative to the button.
     * Available options are: left, center, right, bottom, bottom-left, bottom-right.
     * This value defaults to left. */
    menuAlignment: _propTypes2.default.oneOf(['left', 'right', 'bottom', 'center', 'bottom-right', 'bottom-left']),
    /** If true, the menu is disabled. Disabling the menu prevents users from opening it.
     * This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** If is set to true, then is showed a loading symbol. */
    isLoading: _propTypes2.default.bool,
    /** Displays tooltip text when the mouse moves over the element. */
    title: _propTypes2.default.string,
    /** A description for assistive sreen readers. */
    assistiveText: _propTypes2.default.string,
    /** Specifies the tab order of an element (when the tab button is used for navigating). */
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string
};

ButtonMenu.defaultProps = {
    children: null,
    buttonVariant: 'border-filled',
    buttonSize: 'medium',
    buttonShaded: false,
    menuSize: 'xx-small',
    menuAlignment: 'left',
    disabled: false,
    isLoading: false,
    tabIndex: undefined,
    title: undefined,
    assistiveText: undefined,
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    className: undefined,
    style: undefined,
    id: undefined
};
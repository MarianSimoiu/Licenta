'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageMenuItem = require('../../MenuItem/pageObject');

/**
 * ButtonMenu page object class.
 * @class
 * @tutorial buttonMenu
 */

var PageButtonMenu = function () {
    /**
     * Create a new ButtonMenu page object.
     * @constructor
     * @param {string} rootElement - The selector of the ButtonMenu root element.
     */
    function PageButtonMenu(rootElement) {
        _classCallCheck(this, PageButtonMenu);

        this.rootElement = rootElement;
    }

    /**
     * Returns a new MenuItem page object of the element in item position.
     * @method
     * @param {number} itemPosition - The base 0 index of the MenuItem.
     */


    _createClass(PageButtonMenu, [{
        key: 'getItem',
        value: function getItem(itemPosition) {
            var menuItems = $(this.rootElement).$$('li.rainbow-menu-item');
            var buttonMenuItems = $(this.rootElement).$$('ul > *');
            if (menuItems[itemPosition]) {
                var indexPosition = buttonMenuItems.findIndex(function (element) {
                    return element.ELEMENT === menuItems[itemPosition].ELEMENT;
                });
                return new PageMenuItem(this.rootElement + ' li.rainbow-menu-item:nth-child(' + (indexPosition + 1) + ')');
            }
            return null;
        }

        /**
         * Clicks the button element.
         * @method
         */

    }, {
        key: 'click',
        value: function click() {
            $(this.rootElement).$('button').click();
        }

        /**
         * Returns true when the menu is open, false otherwise.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isOpen',
        value: function isOpen() {
            return $(this.rootElement).$('.rainbow-primitive-menu_dropdown').isDisplayed();
        }

        /**
         * Returns true when the button element has focus.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'hasFocusButton',
        value: function hasFocusButton() {
            return $(this.rootElement).$('button').isFocused();
        }
    }]);

    return PageButtonMenu;
}();

module.exports = PageButtonMenu;
'use strict';

var _isOptionSelected = require('./../isOptionSelected');

var _isOptionSelected2 = _interopRequireDefault(_isOptionSelected);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var option = {
    value: 'value-1'
};

describe('isOptionSelected', function () {
    it('should return false if values is falsy', function () {
        expect((0, _isOptionSelected2.default)(undefined, option)).toBe(false);
        expect((0, _isOptionSelected2.default)(null, option)).toBe(false);
        expect((0, _isOptionSelected2.default)('', option)).toBe(false);
        expect((0, _isOptionSelected2.default)(0, option)).toBe(false);
    });
    it('should return false if values is truty but not an array', function () {
        expect((0, _isOptionSelected2.default)({}, option)).toBe(false);
        expect((0, _isOptionSelected2.default)('some text', option)).toBe(false);
        expect((0, _isOptionSelected2.default)(12, option)).toBe(false);
        expect((0, _isOptionSelected2.default)(function () {}, option)).toBe(false);
    });
    it('should return false if the option does not exists in the values array', function () {
        expect((0, _isOptionSelected2.default)([], option)).toBe(false);
        expect((0, _isOptionSelected2.default)(['value-2'], option)).toBe(false);
    });
    it('should return true if the option exists in the values array', function () {
        expect((0, _isOptionSelected2.default)(['value-2', 'value-1', 'value-5'], option)).toBe(true);
    });
});
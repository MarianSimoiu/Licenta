'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withReduxForm = require('./../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

var _utils = require('../../libs/utils');

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _RequiredAsterisk = require('../RequiredAsterisk');

var _RequiredAsterisk2 = _interopRequireDefault(_RequiredAsterisk);

var _checkboxList = require('./checkboxList');

var _checkboxList2 = _interopRequireDefault(_checkboxList);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A checkable input that communicates if an option is true, false or indeterminate.
 * @category Form
 */
var CheckboxGroup = function (_Component) {
    _inherits(CheckboxGroup, _Component);

    function CheckboxGroup(props) {
        _classCallCheck(this, CheckboxGroup);

        var _this = _possibleConstructorReturn(this, (CheckboxGroup.__proto__ || Object.getPrototypeOf(CheckboxGroup)).call(this, props));

        _this.errorMessageId = (0, _utils.uniqueId)('error-message');
        _this.handleOnChange = _this.handleOnChange.bind(_this);
        return _this;
    }

    _createClass(CheckboxGroup, [{
        key: 'getErrorMessageId',
        value: function getErrorMessageId() {
            var error = this.props.error;

            if (error) {
                return this.errorMessageId;
            }
            return undefined;
        }
    }, {
        key: 'getValue',
        value: function getValue() {
            var value = this.props.value;

            if (typeof value === 'string') {
                return [];
            }
            return value;
        }
    }, {
        key: 'getCheckboxContainerClassNames',
        value: function getCheckboxContainerClassNames() {
            var _props = this.props,
                error = _props.error,
                className = _props.className;

            return (0, _classnames2.default)('rainbow-checkbox-group_container', { 'rainbow-checkbox-group--error': !!error }, className);
        }
    }, {
        key: 'handleOnChange',
        value: function handleOnChange(event) {
            var _event$target = event.target,
                value = _event$target.value,
                checked = _event$target.checked;
            var _props2 = this.props,
                values = _props2.value,
                onChange = _props2.onChange;

            if (checked && Array.isArray(values)) {
                return onChange(values.concat([value]));
            }
            if (checked && !Array.isArray(values)) {
                return onChange([].concat([value]));
            }
            return onChange(values.filter(function (valueId) {
                return valueId !== value;
            }));
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                id = _props3.id,
                options = _props3.options,
                required = _props3.required,
                label = _props3.label,
                error = _props3.error,
                style = _props3.style,
                name = _props3.name;

            return _react2.default.createElement(
                'fieldset',
                { id: id, className: this.getCheckboxContainerClassNames(), style: style },
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!label },
                    _react2.default.createElement(
                        'legend',
                        { className: 'rainbow-checkbox-group_label' },
                        _react2.default.createElement(_RequiredAsterisk2.default, { required: required }),
                        label
                    )
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'rainbow-checkbox-group_content-container' },
                    _react2.default.createElement(_checkboxList2.default, {
                        values: this.getValue(),
                        options: options,
                        onChange: this.handleOnChange,
                        describedBy: this.getErrorMessageId(),
                        name: name
                    })
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!error },
                    _react2.default.createElement(
                        'div',
                        {
                            id: this.getErrorMessageId(),
                            className: 'rainbow-checkbox-group_text-error'
                        },
                        error
                    )
                )
            );
        }
    }]);

    return CheckboxGroup;
}(_react.Component);

CheckboxGroup.propTypes = {
    /** An Array of checkbox options with label, value and disabled for each checkbox. */
    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
        label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
        value: _propTypes2.default.string,
        disabled: _propTypes2.default.bool
    })),
    /** Text label for the checkbox group. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The name of the checkbox group */
    name: _propTypes2.default.string,
    /** The list of selected checkboxes. Each array entry contains the value of a selected checkbox.
     * The value of each checkbox is set in the options attribute. */
    value: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.string), _propTypes2.default.string]),
    /** Set to true if at least one checkbox must be selected. This value defaults to false. */
    required: _propTypes2.default.bool,
    /** Specifies that an input field must be filled out before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Text label for the checkbox group. */
    onChange: _propTypes2.default.func,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string
};

CheckboxGroup.defaultProps = {
    options: [],
    value: [],
    label: null,
    name: undefined,
    onChange: function onChange() {},
    required: false,
    error: null,
    className: undefined,
    style: undefined,
    id: undefined
};

exports.default = (0, _withReduxForm2.default)(CheckboxGroup);
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _utils = require('./../../../libs/utils');

var _label = require('./label');

var _label2 = _interopRequireDefault(_label);

var _RenderIf = require('../../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Input = function (_Component) {
    _inherits(Input, _Component);

    function Input(props) {
        _classCallCheck(this, Input);

        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

        _this.inputId = (0, _utils.uniqueId)('input');
        _this.inlineTextLabelId = (0, _utils.uniqueId)('inline-text-label');
        _this.errorMessageId = (0, _utils.uniqueId)('error-message');
        _this.inputRef = _react2.default.createRef();
        return _this;
    }

    _createClass(Input, [{
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var _props = this.props,
                className = _props.className,
                error = _props.error;

            return (0, _classnames3.default)('rainbow-date-picker_input-container', {
                'rainbow-date-picker_input--error': error
            }, className);
        }
    }, {
        key: 'getIconPositionClassNames',
        value: function getIconPositionClassNames() {
            var _props2 = this.props,
                icon = _props2.icon,
                iconPosition = _props2.iconPosition;

            return (0, _classnames3.default)(_defineProperty({
                'rainbow-date-picker_input-icon-container': icon
            }, 'rainbow-date-picker_input-icon--' + iconPosition, icon));
        }
    }, {
        key: 'getInputClassNames',
        value: function getInputClassNames() {
            var _props3 = this.props,
                isBare = _props3.isBare,
                isCentered = _props3.isCentered,
                readOnly = _props3.readOnly;

            return (0, _classnames3.default)('rainbow-date-picker_input', {
                'rainbow-date-picker_input--bare': isBare,
                'rainbow-date-picker_input--counter': isCentered,
                'rainbow-date-picker_input--readonly': readOnly
            });
        }
    }, {
        key: 'getInlineTextLabelId',
        value: function getInlineTextLabelId() {
            var bottomHelpText = this.props.bottomHelpText;

            if (bottomHelpText) {
                return this.inlineTextLabelId;
            }
            return undefined;
        }
    }, {
        key: 'getErrorMessageId',
        value: function getErrorMessageId() {
            var error = this.props.error;

            if (error) {
                return this.errorMessageId;
            }
            return undefined;
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.inputRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.inputRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.inputRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props4 = this.props,
                style = _props4.style,
                value = _props4.value,
                onChange = _props4.onChange,
                label = _props4.label,
                error = _props4.error,
                placeholder = _props4.placeholder,
                disabled = _props4.disabled,
                readOnly = _props4.readOnly,
                tabIndex = _props4.tabIndex,
                onFocus = _props4.onFocus,
                onBlur = _props4.onBlur,
                onClick = _props4.onClick,
                onKeyDown = _props4.onKeyDown,
                type = _props4.type,
                maxLength = _props4.maxLength,
                minLength = _props4.minLength,
                pattern = _props4.pattern,
                icon = _props4.icon,
                bottomHelpText = _props4.bottomHelpText,
                required = _props4.required,
                id = _props4.id,
                autoComplete = _props4.autoComplete,
                name = _props4.name,
                hideLabel = _props4.hideLabel;


            return _react2.default.createElement(
                'div',
                { id: id, className: this.getContainerClassNames(), style: style },
                _react2.default.createElement(_label2.default, {
                    label: label,
                    hideLabel: hideLabel,
                    required: required,
                    inputId: this.inputId,
                    readOnly: readOnly,
                    id: this.getInlineTextLabelId()
                }),
                _react2.default.createElement(
                    'div',
                    { className: this.getIconPositionClassNames() },
                    _react2.default.createElement(
                        _RenderIf2.default,
                        { isTrue: !!icon },
                        _react2.default.createElement(
                            'span',
                            { className: 'rainbow-date-picker_input-icon' },
                            icon
                        )
                    ),
                    _react2.default.createElement('input', {
                        id: this.inputId,
                        name: name,
                        type: type,
                        className: this.getInputClassNames(),
                        value: value,
                        placeholder: placeholder,
                        onChange: onChange,
                        tabIndex: tabIndex,
                        onFocus: onFocus,
                        onBlur: onBlur,
                        onClick: onClick,
                        onKeyDown: onKeyDown,
                        disabled: disabled,
                        readOnly: true,
                        required: required,
                        maxLength: maxLength,
                        minLength: minLength,
                        pattern: pattern,
                        autoComplete: autoComplete,
                        'aria-labelledby': this.getInlineTextLabelId(),
                        'aria-describedby': this.getErrorMessageId(),
                        ref: this.inputRef
                    })
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!bottomHelpText },
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-date-picker_input--help' },
                        bottomHelpText
                    )
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!error },
                    _react2.default.createElement(
                        'div',
                        { id: this.getErrorMessageId(), className: 'rainbow-date-picker_input-error' },
                        error
                    )
                )
            );
        }
    }]);

    return Input;
}(_react.Component);

exports.default = Input;


Input.propTypes = {
    value: _propTypes2.default.string,
    name: _propTypes2.default.string,
    type: _propTypes2.default.oneOf(['text', 'password', 'datetime', 'datetime-local', 'date', 'month', 'time', 'week', 'number', 'email', 'url', 'search', 'tel', 'color']),
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    placeholder: _propTypes2.default.string,
    icon: _propTypes2.default.node,
    iconPosition: _propTypes2.default.oneOf(['left', 'right']),
    maxLength: _propTypes2.default.number,
    minLength: _propTypes2.default.number,
    bottomHelpText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    required: _propTypes2.default.bool,
    pattern: _propTypes2.default.string,
    isCentered: _propTypes2.default.bool,
    isBare: _propTypes2.default.bool,
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    disabled: _propTypes2.default.bool,
    readOnly: _propTypes2.default.bool,
    onChange: _propTypes2.default.func,
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    onClick: _propTypes2.default.func,
    onFocus: _propTypes2.default.func,
    onBlur: _propTypes2.default.func,
    onKeyDown: _propTypes2.default.func,
    className: _propTypes2.default.string,
    style: _propTypes2.default.object,
    id: _propTypes2.default.string,
    autoComplete: _propTypes2.default.string,
    hideLabel: _propTypes2.default.bool
};

Input.defaultProps = {
    value: undefined,
    name: undefined,
    type: 'text',
    placeholder: null,
    icon: undefined,
    iconPosition: 'left',
    maxLength: undefined,
    minLength: undefined,
    bottomHelpText: null,
    required: false,
    pattern: undefined,
    isCentered: false,
    isBare: false,
    error: null,
    disabled: false,
    readOnly: false,
    onChange: function onChange() {},
    tabIndex: undefined,
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    onKeyDown: function onKeyDown() {},
    className: undefined,
    style: undefined,
    id: undefined,
    autoComplete: 'on',
    hideLabel: false
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _calendarIcon = require('./calendarIcon');

var _calendarIcon2 = _interopRequireDefault(_calendarIcon);

var _Modal = require('./../Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _Calendar = require('./../Calendar');

var _Calendar2 = _interopRequireDefault(_Calendar);

var _input = require('./input');

var _input2 = _interopRequireDefault(_input);

var _formatDate = require('./helpers/formatDate');

var _formatDate2 = _interopRequireDefault(_formatDate);

var _withReduxForm = require('../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

var _constants = require('../../libs/constants');

require('./styles.css');

require('./media-queries.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A DatePicker is a text input to capture a date.
 * @category Form
 */
var DatePicker = function (_Component) {
    _inherits(DatePicker, _Component);

    function DatePicker(props) {
        _classCallCheck(this, DatePicker);

        var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

        _this.state = {
            isOpen: false
        };
        _this.inputRef = _react2.default.createRef();
        _this.handleChange = _this.handleChange.bind(_this);
        _this.handleKeyDown = _this.handleKeyDown.bind(_this);
        _this.openModal = _this.openModal.bind(_this);
        _this.closeModal = _this.closeModal.bind(_this);
        return _this;
    }

    _createClass(DatePicker, [{
        key: 'getContainerClassName',
        value: function getContainerClassName() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-date-picker_container', className);
        }
    }, {
        key: 'handleChange',
        value: function handleChange() {
            var onChange = this.props.onChange;

            this.setState({
                isOpen: false
            });
            onChange.apply(undefined, arguments);
        }
    }, {
        key: 'handleKeyDown',
        value: function handleKeyDown(event) {
            var keyCode = event.keyCode;
            var readOnly = this.props.readOnly;

            var shouldOpenModal = (keyCode === _constants.ENTER_KEY || keyCode === _constants.SPACE_KEY) && !readOnly;
            if (shouldOpenModal) {
                this.setState({ isOpen: true });
            }
        }
    }, {
        key: 'openModal',
        value: function openModal(event) {
            var _props = this.props,
                onClick = _props.onClick,
                readOnly = _props.readOnly;

            if (!readOnly) {
                this.setState({ isOpen: true });
                onClick(event);
            }
        }
    }, {
        key: 'closeModal',
        value: function closeModal() {
            this.setState({ isOpen: false });
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.inputRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.inputRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.inputRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                value = _props2.value,
                minDate = _props2.minDate,
                maxDate = _props2.maxDate,
                placeholder = _props2.placeholder,
                label = _props2.label,
                required = _props2.required,
                style = _props2.style,
                formatStyle = _props2.formatStyle,
                hideLabel = _props2.hideLabel,
                name = _props2.name,
                bottomHelpText = _props2.bottomHelpText,
                isCentered = _props2.isCentered,
                error = _props2.error,
                readOnly = _props2.readOnly,
                disabled = _props2.disabled,
                tabIndex = _props2.tabIndex,
                onFocus = _props2.onFocus,
                onBlur = _props2.onBlur,
                id = _props2.id;
            var isOpen = this.state.isOpen;


            var formattedDate = (0, _formatDate2.default)(value, formatStyle);

            return _react2.default.createElement(
                'div',
                { id: id, className: this.getContainerClassName(), style: style },
                _react2.default.createElement(_input2.default, {
                    ref: this.inputRef,
                    label: label,
                    placeholder: placeholder,
                    icon: _react2.default.createElement(_calendarIcon2.default, null),
                    iconPosition: 'right',
                    required: required,
                    value: formattedDate,
                    onKeyDown: this.handleKeyDown,
                    onClick: this.openModal,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    hideLabel: hideLabel,
                    name: name,
                    bottomHelpText: bottomHelpText,
                    isCentered: isCentered,
                    error: error,
                    readOnly: readOnly,
                    disabled: disabled,
                    tabIndex: tabIndex,
                    autoComplete: 'off'
                }),
                _react2.default.createElement(
                    _Modal2.default,
                    {
                        className: 'rainbow-date-picker_modal',
                        isOpen: isOpen,
                        onRequestClose: this.closeModal
                    },
                    _react2.default.createElement(
                        'header',
                        { className: 'rainbow-date-picker_calendar-details-header' },
                        _react2.default.createElement(
                            'h2',
                            { className: 'rainbow-date-picker_calendar-date--selected' },
                            formattedDate
                        )
                    ),
                    _react2.default.createElement(_Calendar2.default, {
                        value: value,
                        minDate: minDate,
                        maxDate: maxDate,
                        formatStyle: formatStyle,
                        onChange: this.handleChange,
                        className: 'rainbow-date-picker_calendar-container'
                    })
                )
            );
        }
    }]);

    return DatePicker;
}(_react.Component);

DatePicker.propTypes = {
    /** Sets the date for the DatePicker programmatically. */
    value: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(Date), _propTypes2.default.string]),
    /** The ending of a range of valid dates. The range includes the endDate.
     * The default value is current date + 100 years. */
    maxDate: _propTypes2.default.instanceOf(Date),
    /** The beginning of a range of valid dates. The range includes the startDate.
     * The default value is current date - 100 years. */
    minDate: _propTypes2.default.instanceOf(Date),
    /** This function is called to format the date displayed in the input field.
     * Valid values are small, medium, and large. */
    formatStyle: _propTypes2.default.oneOf(['small', 'medium', 'large']),
    /** The action triggered when a value attribute changes. */
    onChange: _propTypes2.default.func,
    /** Text that is displayed when the DatePicker is empty,
     * to prompt the user for a valid entry. */
    placeholder: _propTypes2.default.string,
    /** Text label for the DatePicker. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    /** A boolean to hide the DatePicker label. */
    hideLabel: _propTypes2.default.bool,
    /** Specifies that the DatePicker field must be filled out before submitting the form.
     * This value defaults to false. */
    required: _propTypes2.default.bool,
    /** The name of the DatePicker. */
    name: _propTypes2.default.string,
    /** Shows the help message below the DatePicker. */
    bottomHelpText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that the DatePicker text will be centered. This value defaults to false. */
    isCentered: _propTypes2.default.bool,
    /** Specifies that the DatePicker must be filled out before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that the DatePicker is read-only. This value defaults to false. */
    readOnly: _propTypes2.default.bool,
    /** Specifies that the DatePicker element should be disabled. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** Specifies the tab order of an element (when the tab button is used for navigating). */
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

DatePicker.defaultProps = {
    value: undefined,
    minDate: undefined,
    maxDate: undefined,
    formatStyle: 'medium',
    onChange: function onChange() {},
    placeholder: null,
    hideLabel: false,
    required: false,
    name: undefined,
    bottomHelpText: null,
    isCentered: false,
    error: null,
    readOnly: false,
    disabled: false,
    tabIndex: undefined,
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    id: undefined,
    className: undefined,
    style: undefined
};

exports.default = (0, _withReduxForm2.default)(DatePicker);
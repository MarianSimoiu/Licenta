'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _resolveOptions = require('../resolveOptions');

var _resolveOptions2 = _interopRequireDefault(_resolveOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var baseOptions = {
    legend: {
        display: true,
        position: 'bottom',
        fullWidth: true,
        labels: {
            usePointStyle: true
        }
    }
};

describe('resolveOptions function', function () {
    it('should return the conf option with legend parameters only', function () {
        var conditions = {
            disableAnimations: false,
            disableLines: false,
            disableCurves: false,
            showLegend: true,
            legendPosition: 'bottom',
            showStacked: false
        };

        var options = (0, _resolveOptions2.default)(conditions);

        expect(options).toEqual(baseOptions);
    });

    it('should return the conf option with legend and animation parameters', function () {
        var conditions = {
            disableAnimations: true,
            disableLines: false,
            disableCurves: false,
            showLegend: true,
            legendPosition: 'bottom',
            showStacked: false
        };

        var options = (0, _resolveOptions2.default)(conditions);

        expect(options).toEqual(_extends({}, baseOptions, {
            animation: {
                duration: 0
            },
            hover: {
                animationDuration: 0
            },
            responsiveAnimationDuration: 0
        }));
    });
    it('should return the conf option with legend and line parameters', function () {
        var conditions = {
            disableAnimations: false,
            disableLines: true,
            disableCurves: false,
            showLegend: true,
            legendPosition: 'bottom',
            showStacked: false
        };

        var options = (0, _resolveOptions2.default)(conditions);

        expect(options).toEqual(_extends({}, baseOptions, {
            showLines: false
        }));
    });
    it('should return the conf option with legend and curves parameters', function () {
        var conditions = {
            disableAnimations: false,
            disableLines: false,
            disableCurves: true,
            showLegend: true,
            legendPosition: 'bottom',
            showStacked: false
        };

        var options = (0, _resolveOptions2.default)(conditions);

        expect(options).toEqual(_extends({}, baseOptions, {
            elements: {
                line: {
                    tension: 0
                }
            }
        }));
    });
    it('should return the conf option with legend and stacked parameters', function () {
        var conditions = {
            disableAnimations: false,
            disableLines: false,
            disableCurves: false,
            showLegend: true,
            legendPosition: 'bottom',
            showStacked: true
        };

        var options = (0, _resolveOptions2.default)(conditions);

        expect(options).toEqual(_extends({}, baseOptions, {
            scales: {
                xAxes: [{
                    stacked: true
                }],
                yAxes: [{
                    stacked: true
                }]
            }
        }));
    });
    it('should return the conf option with all parameters', function () {
        var conditions = {
            disableAnimations: true,
            disableLines: true,
            disableCurves: true,
            showLegend: true,
            legendPosition: 'bottom',
            showStacked: true
        };

        var options = (0, _resolveOptions2.default)(conditions);

        expect(options).toEqual(_extends({}, baseOptions, {
            animation: {
                duration: 0
            },
            hover: {
                animationDuration: 0
            },
            responsiveAnimationDuration: 0,
            showLines: false,
            elements: {
                line: {
                    tension: 0
                }
            },
            scales: {
                xAxes: [{
                    stacked: true
                }],
                yAxes: [{
                    stacked: true
                }]
            }
        }));
    });
});
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _chart = require('chart.js');

var _chart2 = _interopRequireDefault(_chart);

var _resolveOptions = require('./resolveOptions');

var _resolveOptions2 = _interopRequireDefault(_resolveOptions);

var _resolveDatasets = require('./resolveDatasets');

var _resolveDatasets2 = _interopRequireDefault(_resolveDatasets);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The Chart components are based on Charts.js an open source HTML5 based charting library.
 * You can learn more about it here:
 * @category DataView
 */
var Chart = function (_Component) {
    _inherits(Chart, _Component);

    function Chart(props) {
        _classCallCheck(this, Chart);

        var _this = _possibleConstructorReturn(this, (Chart.__proto__ || Object.getPrototypeOf(Chart)).call(this, props));

        _this.chartRef = _react2.default.createRef();
        _this.datasets = [];
        return _this;
    }

    _createClass(Chart, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var children = this.props.children;

            this.datasets = (0, _resolveDatasets2.default)(children);
            this.renderChart();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
            var children = this.props.children;

            this.datasets = (0, _resolveDatasets2.default)(children);
            this.updateChart();
        }
    }, {
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-chart', className);
        }
    }, {
        key: 'updateChart',
        value: function updateChart() {
            var _props = this.props,
                labels = _props.labels,
                conditions = _objectWithoutProperties(_props, ['labels']);

            this.chartInstance.data = {
                labels: labels,
                datasets: this.datasets
            };
            this.chartInstance.options = (0, _resolveOptions2.default)(_extends({}, conditions));
            this.chartInstance.update();
        }
    }, {
        key: 'renderChart',
        value: function renderChart() {
            var _props2 = this.props,
                type = _props2.type,
                labels = _props2.labels,
                conditions = _objectWithoutProperties(_props2, ['type', 'labels']);

            var node = this.chartRef.current;

            this.chartInstance = new _chart2.default(node, {
                type: type,
                data: {
                    labels: labels,
                    datasets: this.datasets
                },
                options: (0, _resolveOptions2.default)(_extends({}, conditions))
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var style = this.props.style;


            return _react2.default.createElement(
                'div',
                { className: this.getContainerClassNames(), style: style },
                _react2.default.createElement('canvas', { ref: this.chartRef })
            );
        }
    }]);

    return Chart;
}(_react.Component);

exports.default = Chart;


Chart.propTypes = {
    /** The type of chart to draw. */
    type: _propTypes2.default.oneOf(['bar', 'horizontalBar', 'line', 'radar', 'pie', 'doughnut', 'polarArea', 'bubble']).isRequired,
    /** Defines the names of the sections for the corresponding values. */
    labels: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
    /** Determines whether to show the stacked bars in a bar chart. */
    showStacked: _propTypes2.default.bool,
    /** Defines if the legend is shown. */
    showLegend: _propTypes2.default.bool,
    /** The position of the legend. */
    legendPosition: _propTypes2.default.oneOf(['top', 'bottom', 'right', 'left']),
    /** Determines whether it should perform animations when rendering the chart,
     * this would improve general performance
     * and is recommended for high data volumes charts. */
    disableAnimations: _propTypes2.default.bool,
    /** Determines whether to draw the lines that join the dots in a line chart,
     * is recommended for high data volumes charts. */
    disableLines: _propTypes2.default.bool,
    /** Determines whether the lines that join the dots in a
     * line chart should be curved or straight.  */
    disableCurves: _propTypes2.default.bool,
    /** Maintain the original canvas aspect ratio. */
    maintainAspectRatio: _propTypes2.default.bool,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied for the outer element. */
    style: _propTypes2.default.object,
    /**
     * This prop that should not be visible in the documentation.
     * @ignore
     */
    children: _propTypes2.default.node
};

Chart.defaultProps = {
    showStacked: false,
    showLegend: true,
    legendPosition: 'bottom',
    disableAnimations: false,
    disableLines: false,
    disableCurves: false,
    maintainAspectRatio: true,
    className: undefined,
    style: undefined,
    children: undefined
};
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Input page object class.
 * @class
 */
var PageInput = function () {
  /**
   * Create a new Input page object.
   * @constructor
   * @param {string} rootElement - The selector of the Input root element.
   */
  function PageInput(rootElement) {
    _classCallCheck(this, PageInput);

    this.rootElement = rootElement;
  }

  /**
   * Clicks the input element.
   * @method
   */


  _createClass(PageInput, [{
    key: 'click',
    value: function click() {
      $(this.rootElement).$('input').click();
    }

    /**
     * Clicks the label element.
     * @method
     */

  }, {
    key: 'clickLabel',
    value: function clickLabel() {
      $(this.rootElement).$('label').click();
    }

    /**
     * Returns true when the input element has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: 'hasFocusInput',
    value: function hasFocusInput() {
      return $(this.rootElement).$('input').isFocused();
    }

    /**
     * Type in the input element.
     * @method
     * @param {string} value - The value to type in the input element.
     */

  }, {
    key: 'setValue',
    value: function setValue(value) {
      $(this.rootElement).$('input').setValue(value);
    }

    /**
     * Get the value typed in the input element.
     * @method
     * @returns {string}
     */

  }, {
    key: 'getValue',
    value: function getValue() {
      return $(this.rootElement).$('input').getValue();
    }
  }]);

  return PageInput;
}();

module.exports = PageInput;
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _inputBase = require('./inputBase');

var _inputBase2 = _interopRequireDefault(_inputBase);

var _inputRadio = require('./inputRadio');

var _inputRadio2 = _interopRequireDefault(_inputRadio);

var _inputCheckbox = require('./inputCheckbox');

var _inputCheckbox2 = _interopRequireDefault(_inputCheckbox);

var _withReduxForm = require('./../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Text inputs are used for freeform data entry.
 * @category Form
 */
var Input = function (_Component) {
    _inherits(Input, _Component);

    function Input(props) {
        _classCallCheck(this, Input);

        var _this = _possibleConstructorReturn(this, (Input.__proto__ || Object.getPrototypeOf(Input)).call(this, props));

        _this.inputRef = _react2.default.createRef();
        return _this;
    }

    /**
     * Sets focus on the element.
     * @public
     */


    _createClass(Input, [{
        key: 'focus',
        value: function focus() {
            this.inputRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.inputRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.inputRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var type = this.props.type;


            if (type === 'radio') {
                return _react2.default.createElement(_inputRadio2.default, _extends({ ref: this.inputRef }, this.props));
            }
            if (type === 'checkbox') {
                return _react2.default.createElement(_inputCheckbox2.default, _extends({ ref: this.inputRef }, this.props));
            }
            return _react2.default.createElement(_inputBase2.default, _extends({ ref: this.inputRef }, this.props));
        }
    }]);

    return Input;
}(_react.Component);

Input.propTypes = {
    /** Specifies the value of an input element. */
    value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.bool]),
    /** The name of the input */
    name: _propTypes2.default.string,
    /** The type of the input. This value defaults to text. */
    type: _propTypes2.default.oneOf(['text', 'password', 'datetime', 'datetime-local', 'date', 'month', 'time', 'week', 'number', 'email', 'url', 'search', 'tel', 'color', 'radio', 'checkbox']),
    /** Text label for the input. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    /** A boolean to hide the input label. */
    hideLabel: _propTypes2.default.bool,
    /** Text that is displayed when the field is empty, to prompt the user for a valid entry. */
    placeholder: _propTypes2.default.string,
    /** The icon to show if it is passed. It must be a svg icon or a font icon. */
    icon: _propTypes2.default.node,
    /** Describes the position of the icon with respect to body. Options include left and right.
     * This value defaults to left. */
    iconPosition: _propTypes2.default.oneOf(['left', 'right']),
    /** The maximum number of characters allowed in the field. */
    maxLength: _propTypes2.default.number,
    /** The minimum number of characters allowed in the field. */
    minLength: _propTypes2.default.number,
    /** Shows the help message below the input. */
    bottomHelpText: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that an input field must be filled out before submitting the form.
     * This value defaults to false. */
    required: _propTypes2.default.bool,
    /** Specifies the regular expression that the input's value is checked against.
     * This attribute is supported for text, search, url, tel, email, and password types. */
    pattern: _propTypes2.default.string,
    /** Specifies that an input text will be centered. This value defaults to false. */
    isCentered: _propTypes2.default.bool,
    /** Specifies that an input will not have border. This value defaults to false. */
    isBare: _propTypes2.default.bool,
    /** Specifies that an input field must be filled out before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** Specifies that an input element should be disabled. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** Specifies that an input field is read-only. This value defaults to false. */
    readOnly: _propTypes2.default.bool,
    /** The action triggered when a value attribute changes. */
    onChange: _propTypes2.default.func,
    /** Specifies the tab order of an element (when the tab button is used for navigating). */
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** The action triggered when a key is pressed on the element. */
    onKeyDown: _propTypes2.default.func,
    /** Set the input to checked state when true. It is used only for input type checkbox. */
    checked: _propTypes2.default.bool,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** A string indicating the type of autocomplete functionality.
     * If any, to allow on the input. */
    autoComplete: _propTypes2.default.string
};

Input.defaultProps = {
    value: undefined,
    type: 'text',
    name: undefined,
    placeholder: null,
    icon: undefined,
    iconPosition: 'left',
    maxLength: undefined,
    minLength: undefined,
    bottomHelpText: null,
    required: false,
    pattern: undefined,
    isCentered: false,
    isBare: false,
    error: null,
    disabled: false,
    readOnly: false,
    onChange: function onChange() {},
    tabIndex: undefined,
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    onKeyDown: function onKeyDown() {},
    checked: undefined,
    className: undefined,
    style: undefined,
    id: undefined,
    autoComplete: 'on',
    hideLabel: false
};

exports.default = (0, _withReduxForm2.default)(Input);
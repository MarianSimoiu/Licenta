'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _reactAsyncScriptLoader = require('react-async-script-loader');

var _reactAsyncScriptLoader2 = _interopRequireDefault(_reactAsyncScriptLoader);

var _withReduxForm = require('../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

var _getUrl = require('./getUrl');

var _getUrl2 = _interopRequireDefault(_getUrl);

var _wrapper = require('./wrapper');

var _wrapper2 = _interopRequireDefault(_wrapper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The reCAPTCHA component is used to protects your website from spam and abuse.
 */
var ReCaptcha = function (_Component) {
    _inherits(ReCaptcha, _Component);

    function ReCaptcha(props) {
        _classCallCheck(this, ReCaptcha);

        var _this = _possibleConstructorReturn(this, (ReCaptcha.__proto__ || Object.getPrototypeOf(ReCaptcha)).call(this, props));

        var lang = props.lang;

        _this.ReCaptchaComponent = (0, _reactAsyncScriptLoader2.default)((0, _getUrl2.default)(lang))(_wrapper2.default);
        return _this;
    }

    _createClass(ReCaptcha, [{
        key: 'render',
        value: function render() {
            var ReCaptchaComponent = this.ReCaptchaComponent;
            return _react2.default.createElement(ReCaptchaComponent, this.props);
        }
    }]);

    return ReCaptcha;
}(_react.Component);

ReCaptcha.propTypes = {
    /** Specifies the site key for the recaptcha. */
    siteKey: _propTypes2.default.string.isRequired,
    /** Forces the widget to render in a specific language.
     * Auto-detects the user's language if unspecified. */
    lang: _propTypes2.default.string,
    /** The color theme of the widget. */
    theme: _propTypes2.default.oneOf(['light', 'dark']),
    /** The size of the widget. */
    size: _propTypes2.default.oneOf(['normal', 'compact']),
    /** The tabindex of the widget and challenge.
     * If other elements in your page use tabindex,
     * it should be set to make user navigation easier. */
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** Specifies that the recaptcha must be completed before submitting the form. */
    error: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string]),
    /** The action triggered when the value of the recaptcha changes. It receive the
     * recaptcha token when is fired.
     */
    onChange: _propTypes2.default.func,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied for the outer element. */
    style: _propTypes2.default.object
};

ReCaptcha.defaultProps = {
    lang: undefined,
    theme: 'light',
    size: 'normal',
    tabIndex: 0,
    error: undefined,
    onChange: function onChange() {},
    className: undefined,
    style: undefined
};

exports.default = (0, _withReduxForm2.default)(ReCaptcha);
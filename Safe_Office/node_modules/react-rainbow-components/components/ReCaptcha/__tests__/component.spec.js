'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _component = require('../component');

var _component2 = _interopRequireDefault(_component);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.grecaptcha = {
    ready: jest.fn()
};

describe('<ReCaptchaComponent />', function () {
    it('it should call the ready function', function () {
        (0, _enzyme.mount)(_react2.default.createElement(_component2.default, {
            value: 'site-Key',
            theme: 'light',
            size: 'normal',
            tabIndex: 0,
            onChange: function onChange() {}
        }));
        expect(window.grecaptcha.ready).toHaveBeenCalledTimes(1);
    });
    it('it should call the render function with the right params', function () {
        window.grecaptcha = {
            ready: function ready(callback) {
                return callback();
            },
            render: jest.fn()
        };

        var component = (0, _enzyme.mount)(_react2.default.createElement(_component2.default, {
            siteKey: 'site-key',
            theme: 'light',
            size: 'normal',
            tabIndex: 0,
            onChange: function onChange() {}
        }));

        var _component$instance = component.instance(),
            recaptchaID = _component$instance.recaptchaID;

        expect(component.find('div#' + recaptchaID).exists()).toBe(true);
        expect(window.grecaptcha.render).toHaveBeenCalledWith(recaptchaID, {
            sitekey: 'site-key',
            theme: 'light',
            size: 'normal',
            tabIndex: 0,
            callback: expect.any(Function),
            'expired-callback': expect.any(Function),
            'error-callback': expect.any(Function)
        });
    });
});
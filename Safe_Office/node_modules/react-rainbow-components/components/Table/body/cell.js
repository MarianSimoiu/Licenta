'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = Cell;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _columns = require('../helpers/columns');

var _selectableCell = require('./selectableCell');

var _selectableCell2 = _interopRequireDefault(_selectableCell);

var _actionsCell = require('./actionsCell');

var _actionsCell2 = _interopRequireDefault(_actionsCell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CellValue(_ref) {
    var CellComponent = _ref.component,
        value = _ref.value;

    if (CellComponent) {
        return _react2.default.createElement(CellComponent, { value: value });
    }
    return value;
}

CellValue.propTypes = {
    component: _propTypes2.default.func,
    value: _propTypes2.default.any
};

CellValue.defaultProps = {
    component: undefined,
    value: undefined
};

function Cell(props) {
    var header = props.header,
        component = props.component,
        value = props.value,
        columnType = props.columnType,
        isFirst = props.isFirst,
        columnChildren = props.columnChildren,
        rowIndex = props.rowIndex,
        rowsLength = props.rowsLength,
        rowData = props.rowData,
        isSelected = props.isSelected,
        isDisabled = props.isDisabled,
        tableId = props.tableId,
        onSelectRow = props.onSelectRow,
        onDeselectRow = props.onDeselectRow,
        inputType = props.inputType;


    var getHeaderLabel = function getHeaderLabel() {
        if (typeof header === 'string') {
            return header;
        }
        return undefined;
    };

    if (columnType === 'action') {
        return _react2.default.createElement(_actionsCell2.default, {
            columnChildren: columnChildren,
            rowIndex: rowIndex,
            rowsLength: rowsLength,
            rowData: rowData
        });
    }

    if (columnType === _columns.SELECTABLE_CHECKBOX) {
        return _react2.default.createElement(_selectableCell2.default, {
            isSelected: isSelected,
            isDisabled: isDisabled,
            tableId: tableId,
            onSelectRow: onSelectRow,
            onDeselectRow: onDeselectRow,
            inputType: inputType
        });
    }

    if (isFirst) {
        return _react2.default.createElement(
            'th',
            {
                className: 'rainbow-table_cell-container',
                scope: 'row',
                tabIndex: -1,
                'data-label': getHeaderLabel()
            },
            _react2.default.createElement(
                'div',
                { className: 'rainbow-table_cell-content' },
                _react2.default.createElement(CellValue, { component: component, value: value })
            )
        );
    }

    return _react2.default.createElement(
        'td',
        {
            className: 'rainbow-table_cell-container',
            role: 'gridcell',
            tabIndex: -1,
            'data-label': getHeaderLabel()
        },
        _react2.default.createElement(
            'div',
            { className: 'rainbow-table_cell-content' },
            _react2.default.createElement(CellValue, { component: component, value: value })
        )
    );
}

Cell.propTypes = {
    header: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string]),
    component: _propTypes2.default.func,
    value: _propTypes2.default.any,
    isFirst: _propTypes2.default.bool,
    columnType: _propTypes2.default.string,
    isSelected: _propTypes2.default.bool,
    isDisabled: _propTypes2.default.bool,
    tableId: _propTypes2.default.string.isRequired,
    onSelectRow: _propTypes2.default.func,
    onDeselectRow: _propTypes2.default.func,
    inputType: _propTypes2.default.string,
    columnChildren: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.object]),
    rowsLength: _propTypes2.default.number,
    rowIndex: _propTypes2.default.number,
    rowData: _propTypes2.default.object
};

Cell.defaultProps = {
    header: undefined,
    component: undefined,
    value: undefined,
    isFirst: false,
    columnType: undefined,
    isSelected: false,
    isDisabled: false,
    onSelectRow: function onSelectRow() {},
    onDeselectRow: function onDeselectRow() {},
    inputType: 'checkbox',
    columnChildren: undefined,
    rowsLength: undefined,
    rowIndex: undefined,
    rowData: {}
};
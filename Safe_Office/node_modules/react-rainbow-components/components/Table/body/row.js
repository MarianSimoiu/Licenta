'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Row;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _columns = require('../helpers/columns');

var _rows = require('../helpers/rows');

var _cell = require('./cell');

var _cell2 = _interopRequireDefault(_cell);

var _loadingCells = require('./loadingCells');

var _loadingCells2 = _interopRequireDefault(_loadingCells);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function isFirstAndNoSelectable(index, type) {
    if (index === 0 && type !== _columns.SELECTABLE_CHECKBOX) {
        return true;
    }
    return false;
}

function Row(props) {
    var rowData = props.rowData,
        columns = props.columns,
        isSelected = props.isSelected,
        rest = _objectWithoutProperties(props, ['rowData', 'columns', 'isSelected']);

    var getClassName = function getClassName() {
        return (0, _classnames2.default)('rainbow-table_body-row', {
            'rainbow-table_body-row-selected': isSelected
        });
    };

    var isFirstColumn = void 0;
    var cells = columns.map(function (column, index) {
        var header = column.header,
            component = column.component,
            field = column.field,
            columnType = column.type,
            children = column.children;

        var key = 'cell-' + index;
        var value = (0, _rows.getFieldValue)(rowData, field);
        isFirstColumn = !isFirstColumn && (isFirstAndNoSelectable(index, columnType) || index === 1);

        return _react2.default.createElement(_cell2.default, _extends({}, rest, {
            key: key,
            rowData: rowData,
            header: header,
            component: component,
            value: value,
            columnType: columnType,
            isFirst: isFirstColumn,
            isSelected: isSelected,
            columnChildren: children
        }));
    });

    if (rowData.type === 'LOADING') {
        return _react2.default.createElement(
            'tr',
            null,
            _react2.default.createElement(_loadingCells2.default, { columns: columns, value: columns.length })
        );
    }

    return _react2.default.createElement(
        'tr',
        { tabIndex: -1, 'aria-selected': isSelected, className: getClassName() },
        cells
    );
}

Row.propTypes = {
    rowData: _propTypes2.default.object,
    columns: _propTypes2.default.array,
    isSelected: _propTypes2.default.bool
};

Row.defaultProps = {
    rowData: {},
    columns: [],
    isSelected: false
};
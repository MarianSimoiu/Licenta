'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _row = require('./row');

var _row2 = _interopRequireDefault(_row);

var _loading = require('./loading');

var _loading2 = _interopRequireDefault(_loading);

var _empty = require('./empty');

var _empty2 = _interopRequireDefault(_empty);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function getData() {
    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var isLoading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var newData = void 0;
    if (isLoading) {
        newData = [].concat(_toConsumableArray(data), [{ type: 'LOADING' }]);
    } else {
        newData = data;
    }
    return newData;
}

var Body = function (_PureComponent) {
    _inherits(Body, _PureComponent);

    function Body() {
        _classCallCheck(this, Body);

        return _possibleConstructorReturn(this, (Body.__proto__ || Object.getPrototypeOf(Body)).apply(this, arguments));
    }

    _createClass(Body, [{
        key: 'render',
        value: function render() {
            var _props = this.props,
                data = _props.data,
                columns = _props.columns,
                rows = _props.rows,
                tableId = _props.tableId,
                _onSelectRow = _props.onSelectRow,
                _onDeselectRow = _props.onDeselectRow,
                isLoading = _props.isLoading,
                emptyIcon = _props.emptyIcon,
                emptyTitle = _props.emptyTitle,
                emptyDescription = _props.emptyDescription;

            var isEmpty = data.length === 0;
            var columnsLength = columns.length;

            if (isEmpty && isLoading) {
                return _react2.default.createElement(_loading2.default, { columns: columns });
            }

            if (isEmpty && !isLoading) {
                return _react2.default.createElement(_empty2.default, {
                    columnsLength: columnsLength,
                    emptyIcon: emptyIcon,
                    emptyTitle: emptyTitle,
                    emptyDescription: emptyDescription
                });
            }

            var newData = getData(data, isLoading);
            return newData.map(function (item, index) {
                var row = rows[index];
                var rowsLength = rows.length;
                var rowKeyValue = rows[index] && rows[index].key;
                var key = rowKeyValue || 'row-' + (index + 1);

                return _react2.default.createElement(_row2.default, _extends({}, row, {
                    key: key,
                    rowData: item,
                    columns: columns,
                    tableId: tableId,
                    rowIndex: index,
                    rowsLength: rowsLength,
                    onSelectRow: function onSelectRow(event, isMultiple) {
                        return _onSelectRow(event, isMultiple, rowKeyValue);
                    },
                    onDeselectRow: function onDeselectRow(event, isMultiple) {
                        return _onDeselectRow(event, isMultiple, rowKeyValue);
                    }
                }));
            });
        }
    }]);

    return Body;
}(_react.PureComponent);

exports.default = Body;


Body.propTypes = {
    data: _propTypes2.default.array,
    columns: _propTypes2.default.array,
    rows: _propTypes2.default.array,
    tableId: _propTypes2.default.string.isRequired,
    onSelectRow: _propTypes2.default.func,
    onDeselectRow: _propTypes2.default.func,
    emptyIcon: _propTypes2.default.node,
    emptyTitle: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    emptyDescription: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node])
};

Body.defaultProps = {
    data: [],
    columns: [],
    rows: [],
    emptyIcon: undefined,
    emptyTitle: undefined,
    emptyDescription: undefined,
    onSelectRow: function onSelectRow() {},
    onDeselectRow: function onDeselectRow() {}
};
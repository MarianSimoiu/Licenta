'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _cell = require('../cell');

var _cell2 = _interopRequireDefault(_cell);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var CellComponent = function CellComponent(_ref) {
    var value = _ref.value;
    return _react2.default.createElement(
        'h1',
        null,
        value
    );
}; /* eslint-disable react/prop-types */


describe('<Cell /> when isFirst is not passed', function () {
    it('should render a td element with text "cell-1" ', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1' }));
        var td = component.find('td');
        expect(td.text()).toBe('cell-1');
    });
    it('should render a td element with a component to display de value', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-2', component: CellComponent }));
        var td = component.find('td');
        expect(td.find('h1').text()).toBe('cell-2');
    });
    it('should set role="gridcell" in td element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1' }));
        var td = component.find('td');
        expect(td.prop('role')).toBe('gridcell');
    });
    it('should set tabIndex={-1} in td element ', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1' }));
        var td = component.find('td');
        expect(td.prop('tabIndex')).toBe(-1);
    });
    it('should set the right data-label in td element when the header passed is a string', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', header: 'column header' }));
        var td = component.find('td');
        expect(td.prop('data-label')).toBe('column header');
    });
    it('should not set any data-label in td element when the header passed is not a string', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', header: _react2.default.createElement('span', null) }));
        var td = component.find('td');
        expect(td.prop('data-label')).toBe(undefined);
    });
    it('should render the SelectableCell component when columnType is "SELECTABLE_CHECKBOX"', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', columnType: 'SELECTABLE_CHECKBOX' }));
        expect(component.find('SelectableCell').exists()).toBe(true);
    });
    it('should render the ActionsCell component when columnType is "action"', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', columnType: 'action' }));
        expect(component.find('ActionsCell').exists()).toBe(true);
    });
});

describe('<Cell /> when isFirst is passed', function () {
    it('should render a th element with text "cell-1" ', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', isFirst: true }));
        var th = component.find('th');
        expect(th.text()).toBe('cell-1');
    });
    it('should render a th element with a component to display de value if isFirst is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-2', isFirst: true, component: CellComponent }));
        var th = component.find('th');
        expect(th.find('h1').text()).toBe('cell-2');
    });
    it('should set scope="row" in th element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', isFirst: true }));
        var th = component.find('th');
        expect(th.prop('scope')).toBe('row');
    });
    it('should set tabIndex={-1} in th element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', isFirst: true }));
        var th = component.find('th');
        expect(th.prop('tabIndex')).toBe(-1);
    });
    it('should set the right data-label in th element when the header passed is a string', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', isFirst: true, header: 'column header' }));
        var th = component.find('th');
        expect(th.prop('data-label')).toBe('column header');
    });
    it('should not set any data-label in th element when the header passed is not a string', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', isFirst: true, header: _react2.default.createElement('span', null) }));
        var th = component.find('th');
        expect(th.prop('data-label')).toBe(undefined);
    });
    it('should render the SelectableCell component when columnType is "SELECTABLE_CHECKBOX"', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_cell2.default, { value: 'cell-1', isFirst: true, columnType: 'SELECTABLE_CHECKBOX' }));
        expect(component.find('SelectableCell').exists()).toBe(true);
    });
});
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _RenderIf = require('../../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ResizeBar = function (_Component) {
    _inherits(ResizeBar, _Component);

    function ResizeBar(props) {
        _classCallCheck(this, ResizeBar);

        var _this = _possibleConstructorReturn(this, (ResizeBar.__proto__ || Object.getPrototypeOf(ResizeBar)).call(this, props));

        _this.state = {
            resizeBarStyle: {
                willChange: 'transform'
            }
        };
        _this.handleMouseDown = _this.handleMouseDown.bind(_this);
        _this.handleMouseMove = _this.handleMouseMove.bind(_this);
        _this.handleMouseUp = _this.handleMouseUp.bind(_this);
        return _this;
    }

    _createClass(ResizeBar, [{
        key: 'handleMouseUp',
        value: function handleMouseUp(event) {
            event.preventDefault();
            var onResize = this.props.onResize;

            document.removeEventListener('mouseup', this.handleMouseUp);
            document.removeEventListener('mousemove', this.handleMouseMove);
            onResize(this.newXPosition);
            this.setState({
                resizeBarStyle: { willChange: 'transform' }
            });
        }
    }, {
        key: 'handleMouseMove',
        value: function handleMouseMove(event) {
            event.preventDefault();
            var _props = this.props,
                minColumnWidth = _props.minColumnWidth,
                maxColumnWidth = _props.maxColumnWidth,
                headerWidth = _props.headerWidth;

            this.newXPosition = event.clientX - this.startXPosition;
            var minXPosition = minColumnWidth - headerWidth;
            var maxXPosition = maxColumnWidth - headerWidth;
            if (this.newXPosition < minXPosition) {
                this.newXPosition = minXPosition;
            } else if (this.newXPosition > maxXPosition) {
                this.newXPosition = maxXPosition;
            }
            this.setState({
                resizeBarStyle: {
                    transform: 'translateX(' + this.newXPosition + 'px)',
                    willChange: 'transform'
                }
            });
        }
    }, {
        key: 'handleMouseDown',
        value: function handleMouseDown(event) {
            event.preventDefault();
            this.newXPosition = 0;
            this.startXPosition = event.clientX;
            document.addEventListener('mousemove', this.handleMouseMove);
            document.addEventListener('mouseup', this.handleMouseUp);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                minColumnWidth = _props2.minColumnWidth,
                maxColumnWidth = _props2.maxColumnWidth,
                isResizable = _props2.isResizable,
                ariaLabel = _props2.ariaLabel;
            var resizeBarStyle = this.state.resizeBarStyle;


            return _react2.default.createElement(
                _RenderIf2.default,
                { isTrue: isResizable },
                _react2.default.createElement(
                    'span',
                    {
                        className: 'rainbow-table_header-resize-bar',
                        role: 'presentation',
                        draggable: true,
                        onMouseDown: this.handleMouseDown,
                        style: resizeBarStyle
                    },
                    _react2.default.createElement('input', {
                        type: 'range',
                        min: minColumnWidth,
                        max: maxColumnWidth,
                        'aria-label': ariaLabel,
                        tabIndex: -1,
                        className: 'rainbow-table_header-resize-bar_input'
                    }),
                    _react2.default.createElement('span', {
                        className: 'rainbow-table_header-resize-bar_table-guideline',
                        role: 'presentation',
                        draggable: true,
                        onMouseDown: this.handleMouseDown
                    })
                )
            );
        }
    }]);

    return ResizeBar;
}(_react.Component);

exports.default = ResizeBar;


ResizeBar.propTypes = {
    minColumnWidth: _propTypes2.default.number,
    maxColumnWidth: _propTypes2.default.number,
    isResizable: _propTypes2.default.bool.isRequired,
    ariaLabel: _propTypes2.default.string,
    onResize: _propTypes2.default.func,
    headerWidth: _propTypes2.default.number.isRequired
};

ResizeBar.defaultProps = {
    minColumnWidth: undefined,
    maxColumnWidth: undefined,
    ariaLabel: undefined,
    onResize: function onResize() {}
};
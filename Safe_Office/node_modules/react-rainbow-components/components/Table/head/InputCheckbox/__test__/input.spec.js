'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('./../');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<InputCheckbox/>', function () {
    it('should set an id in the input element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, null));
        expect(component.find('input').prop('id')).toMatch(/input/);
    });
    it('should set the value passed in the input element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { value: 'Input value' }));
        expect(component.find('input').prop('value')).toBe('Input value');
    });
    it('should fire an event when the user change the input', function () {
        var onChangeFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { onChange: onChangeFn }));
        component.find('input').simulate('change');
        expect(onChangeFn).toHaveBeenCalledTimes(1);
    });
    it('should set the tabIndex passed in the input element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { tabIndex: 0 }));
        expect(component.find('input').prop('tabIndex')).toBe(0);
    });
    it('should set the disabled passed in the input element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { disabled: true }));
        expect(component.find('input').prop('disabled')).toBe(true);
    });
    it('should pass a generated id to the Label component and set the same id to the aria-labelledby for the input when a bottomHelpText is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { bottomHelpText: 'Help text' }));
        expect(component.find('Label').prop('id')).toMatch(/inline-text-label/);
        expect(component.find('input').prop('aria-labelledby')).toMatch(/inline-text-label/);
    });
    it('should pass a generated id to the Error element and set the same id to the aria-describedby for the input when a error is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { error: 'error message' }));
        expect(component.find('.rainbow-table-input-checkbox_error-message').prop('id')).toMatch(/error-message/);
        expect(component.find('input').prop('aria-describedby')).toMatch(/error-message/);
    });
    it('should pass the right props to the Label component', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { label: 'custom label', disabled: true }));
        expect(component.find('Label').props()).toEqual({
            label: 'custom label',
            hideLabel: false,
            disabled: true,
            inputId: expect.any(String)
        });
    });
    it('should have the right class name in the container element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, null));
        expect(component.find('div[className="rainbow-table-input-checkbox_container"]').exists()).toBe(true);
    });
    it('should have the right class names when error is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { error: 'Error text' }));
        expect(component.find('div[className="rainbow-table-input-checkbox_container rainbow-table-input-checkbox--error"]').exists()).toBe(true);
    });
    it('should set indeterminate prop to true in input reference when it is passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { indeterminate: true }));
        expect(component.instance().inputRef.current.indeterminate).toBe(true);
    });
    it('should set indeterminate prop to true in input reference when it is passed later the component is mounted', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, null));
        component.setProps({
            indeterminate: true
        });
        expect(component.instance().inputRef.current.indeterminate).toBe(true);
    });
    it('should set checked prop passed in input element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { checked: true }));
        expect(component.find('input').prop('checked')).toBe(true);
    });
});
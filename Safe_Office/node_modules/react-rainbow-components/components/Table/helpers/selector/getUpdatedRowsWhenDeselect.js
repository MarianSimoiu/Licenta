'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = getUpdatedRowsWhenDeselect;

var _getStartRowKey = require('./getStartRowKey');

var _getStartRowKey2 = _interopRequireDefault(_getStartRowKey);

var _getCurrentSelectionLength = require('./getCurrentSelectionLength');

var _getCurrentSelectionLength2 = _interopRequireDefault(_getCurrentSelectionLength);

var _getRowIntervalIndexes = require('./getRowIntervalIndexes');

var _getRowIntervalIndexes2 = _interopRequireDefault(_getRowIntervalIndexes);

var _isSelectedRow = require('./isSelectedRow');

var _isSelectedRow2 = _interopRequireDefault(_isSelectedRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getUpdatedRowsWhenDeselect() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var maxRowSelection = params.maxRowSelection,
        _params$rows = params.rows,
        rows = _params$rows === undefined ? [] : _params$rows,
        _params$indexes = params.indexes,
        indexes = _params$indexes === undefined ? {} : _params$indexes,
        isMultiple = params.isMultiple,
        rowKeyValue = params.rowKeyValue,
        lastSelectedRowKey = params.lastSelectedRowKey,
        _params$selectedRowsK = params.selectedRowsKeys,
        selectedRowsKeys = _params$selectedRowsK === undefined ? {} : _params$selectedRowsK;


    var startRowKey = (0, _getStartRowKey2.default)({
        isMultiple: isMultiple,
        rowKeyValue: rowKeyValue,
        indexes: indexes,
        lastSelectedRowKey: lastSelectedRowKey
    });

    var _getRowIntervalIndexe = (0, _getRowIntervalIndexes2.default)({
        indexes: indexes,
        startRowKey: startRowKey,
        endRowKey: rowKeyValue
    }),
        start = _getRowIntervalIndexe.start,
        end = _getRowIntervalIndexe.end;

    var rowsWithSelection = rows.map(function (row, index) {
        var currentSelectionLength = (0, _getCurrentSelectionLength2.default)(selectedRowsKeys);
        var maxSelectionReached = currentSelectionLength > maxRowSelection;

        if (index >= start && index <= end && !maxSelectionReached) {
            selectedRowsKeys[row.key] = false;
            return _extends({}, row, {
                isSelected: false
            });
        }
        return row;
    });

    return rowsWithSelection.map(function (row) {
        var maxSelectionReached = (0, _getCurrentSelectionLength2.default)(selectedRowsKeys) <= maxRowSelection - 1;

        if (maxSelectionReached && !(0, _isSelectedRow2.default)(selectedRowsKeys, row.key)) {
            return _extends({}, row, {
                isDisabled: false
            });
        }
        return row;
    });
}
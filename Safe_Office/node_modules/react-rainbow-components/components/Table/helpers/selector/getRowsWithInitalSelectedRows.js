'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /* eslint-disable no-console */


exports.default = getRowsWithInitalSelectedRows;

var _isSelectedRow = require('./isSelectedRow');

var _isSelectedRow2 = _interopRequireDefault(_isSelectedRow);

var _getCurrentSelectionLength = require('./getCurrentSelectionLength');

var _getCurrentSelectionLength2 = _interopRequireDefault(_getCurrentSelectionLength);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rowKeyExists(indexes, key) {
    return !!indexes[key];
}

function filterValidKeys(indexes, keys) {
    return keys.filter(function (key) {
        return rowKeyExists(indexes, key);
    });
}

function getRowsWithInitalSelectedRows() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var _params$rows = params.rows,
        rows = _params$rows === undefined ? [] : _params$rows,
        selectedRows = params.selectedRows,
        maxRowSelection = params.maxRowSelection,
        indexes = params.indexes,
        _params$selectedRowsK = params.selectedRowsKeys,
        selectedRowsKeys = _params$selectedRowsK === undefined ? {} : _params$selectedRowsK;


    if (Array.isArray(selectedRows) && maxRowSelection > 0) {
        var previousSelectionLength = (0, _getCurrentSelectionLength2.default)(selectedRowsKeys);
        var validSelectedRowsKeys = filterValidKeys(indexes, selectedRows);
        if (validSelectedRowsKeys.length > maxRowSelection) {
            console.warn('The number of keys in selectedRows for Table component\n            exceeds the limit defined by maxRowSelection.');
            validSelectedRowsKeys = validSelectedRowsKeys.slice(0, maxRowSelection);
        }
        validSelectedRowsKeys.forEach(function (item) {
            selectedRowsKeys[item] = true;
        });

        if (validSelectedRowsKeys.length === maxRowSelection && maxRowSelection > 1) {
            return rows.map(function (row) {
                if (!(0, _isSelectedRow2.default)(selectedRowsKeys, row.key)) {
                    return _extends({}, row, {
                        isDisabled: true
                    });
                }
                return _extends({}, row, {
                    isSelected: true
                });
            });
        }
        if (selectedRows.length < maxRowSelection && previousSelectionLength === maxRowSelection) {
            return rows.map(function (row) {
                return _extends({}, row, {
                    isDisabled: false
                });
            });
        }
        return rows.map(function (row) {
            return _extends({}, row, {
                isSelected: (0, _isSelectedRow2.default)(selectedRowsKeys, row.key)
            });
        });
    }
    return rows;
}
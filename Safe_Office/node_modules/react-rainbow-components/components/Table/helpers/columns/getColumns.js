'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = getColumns;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ = require('./');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function getDefaultWidth(defaultWidth, minColumnWidth, maxColumnWidth) {
    var minColWidth = Number(minColumnWidth);
    var maxColWidth = Number(maxColumnWidth);
    var defaultWidtNumber = Number(defaultWidth);

    if (minColWidth >= defaultWidtNumber) {
        return minColWidth;
    }
    if (maxColWidth <= defaultWidtNumber) {
        return maxColWidth;
    }
    return defaultWidtNumber || undefined;
}

function getColumns(params) {
    var _params$children = params.children,
        children = _params$children === undefined ? [] : _params$children,
        showCheckboxColumn = params.showCheckboxColumn,
        minColumnWidth = params.minColumnWidth,
        maxColumnWidth = params.maxColumnWidth;


    var columnsData = _react2.default.Children.map(children, function (column) {
        if (column && column.props) {
            var _column$props = column.props,
                type = _column$props.type,
                width = _column$props.width,
                defaultWidth = _column$props.defaultWidth;

            var widthNumber = Number(width);
            if (type === 'action') {
                return _extends({}, column.props, {
                    width: widthNumber || 50
                });
            }
            return _extends({}, column.props, {
                width: widthNumber || undefined,
                defaultWidth: getDefaultWidth(defaultWidth, minColumnWidth, maxColumnWidth)
            });
        }
        return null;
    }, null);

    if (showCheckboxColumn) {
        return [{
            type: _.SELECTABLE_CHECKBOX,
            width: 52
        }].concat(_toConsumableArray(columnsData));
    }
    return columnsData;
}
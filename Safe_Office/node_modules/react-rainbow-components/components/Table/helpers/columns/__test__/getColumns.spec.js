'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Column = require('../../../../Column');

var _Column2 = _interopRequireDefault(_Column);

var _getColumns = require('../getColumns');

var _getColumns2 = _interopRequireDefault(_getColumns);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('getColumns', function () {
    it('should return null when children is null and showCheckboxColumn is false', function () {
        var children = null;
        var showCheckboxColumn = false;
        expect((0, _getColumns2.default)({ children: children, showCheckboxColumn: showCheckboxColumn })).toBeNull();
    });
    it('should return an empty array when children is not passed', function () {
        var children = undefined;
        var showCheckboxColumn = false;
        expect((0, _getColumns2.default)({ children: children, showCheckboxColumn: showCheckboxColumn })).toEqual([]);
    });
    it('should return an empty array when children is an array with falsy values and showCheckboxColumn is false', function () {
        var children = [null, undefined];
        var showCheckboxColumn = false;
        expect((0, _getColumns2.default)({ children: children, showCheckboxColumn: showCheckboxColumn })).toEqual([]);
    });
    it('should return an array with the columns props when showCheckboxColumn is false', function () {
        var children = [_react2.default.createElement(_Column2.default, { field: 'a', header: 'header', component: _react2.default.createElement('span', null) })];
        var showCheckboxColumn = false;
        expect((0, _getColumns2.default)({ children: children, showCheckboxColumn: showCheckboxColumn })).toEqual([{
            field: 'a',
            header: 'header',
            component: _react2.default.createElement('span', null),
            sortable: false,
            type: 'text',
            width: undefined
        }]);
    });
    it('should return an array with the columns props plus the selectable column when showCheckboxColumn is true', function () {
        var children = [_react2.default.createElement(_Column2.default, { field: 'a', header: 'header', component: _react2.default.createElement('span', null) })];
        var showCheckboxColumn = true;
        expect((0, _getColumns2.default)({ children: children, showCheckboxColumn: showCheckboxColumn })).toEqual([{
            type: 'SELECTABLE_CHECKBOX',
            width: 52
        }, {
            field: 'a',
            header: 'header',
            component: _react2.default.createElement('span', null),
            sortable: false,
            type: 'text',
            width: undefined
        }]);
    });
    it('should return an array with the right columns props when one column is type "action"', function () {
        var children = [_react2.default.createElement(_Column2.default, { field: 'a', header: 'header', component: _react2.default.createElement('span', null) }), _react2.default.createElement(_Column2.default, { type: 'action' })];
        var showCheckboxColumn = false;
        expect((0, _getColumns2.default)({ children: children, showCheckboxColumn: showCheckboxColumn })).toEqual([{
            field: 'a',
            header: 'header',
            component: _react2.default.createElement('span', null),
            sortable: false,
            type: 'text',
            width: undefined
        }, {
            sortable: false,
            type: 'action',
            width: 50
        }]);
    });
    it('should return an array with the right columns props when defaultWidth and width are passed', function () {
        var children = [_react2.default.createElement(_Column2.default, {
            field: 'a',
            header: 'header a',
            defaultWidth: 160,
            width: 30,
            component: _react2.default.createElement('span', null)
        }), _react2.default.createElement(_Column2.default, { field: 'b', header: 'header b', defaultWidth: 30 })];
        var showCheckboxColumn = false;
        var minColumnWidth = 150;
        expect((0, _getColumns2.default)({ children: children, showCheckboxColumn: showCheckboxColumn, minColumnWidth: minColumnWidth })).toEqual([{
            field: 'a',
            header: 'header a',
            component: _react2.default.createElement('span', null),
            sortable: false,
            type: 'text',
            defaultWidth: 160,
            width: 30
        }, {
            field: 'b',
            header: 'header b',
            sortable: false,
            type: 'text',
            defaultWidth: 150
        }]);
    });
    it('should return an array with the right columns props when defaultWidth is passed and is out of range', function () {
        var children = [_react2.default.createElement(_Column2.default, { field: 'a', header: 'header a', defaultWidth: 160, component: _react2.default.createElement('span', null) }), _react2.default.createElement(_Column2.default, { field: 'b', header: 'header b', defaultWidth: 30 })];
        var showCheckboxColumn = false;
        var minColumnWidth = 50;
        var maxColumnWidth = 150;
        expect((0, _getColumns2.default)({
            children: children,
            showCheckboxColumn: showCheckboxColumn,
            minColumnWidth: minColumnWidth,
            maxColumnWidth: maxColumnWidth
        })).toEqual([{
            field: 'a',
            header: 'header a',
            component: _react2.default.createElement('span', null),
            sortable: false,
            type: 'text',
            defaultWidth: 150
        }, {
            field: 'b',
            header: 'header b',
            sortable: false,
            type: 'text',
            defaultWidth: 50
        }]);
    });
});
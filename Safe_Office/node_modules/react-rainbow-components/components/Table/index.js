'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _body = require('./body');

var _body2 = _interopRequireDefault(_body);

var _head = require('./head');

var _head2 = _interopRequireDefault(_head);

var _sort = require('./helpers/sort');

var _columns = require('./helpers/columns');

var _resizer = require('./helpers/resizer');

var _rows = require('./helpers/rows');

var _selector = require('./helpers/selector');

var _data = require('./helpers/data');

var _ResizeSensor = require('../../libs/ResizeSensor');

var _ResizeSensor2 = _interopRequireDefault(_ResizeSensor);

var _debounce = require('../../libs/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _utils = require('../../libs/utils');

var _empty = require('./body/icons/empty');

var _empty2 = _interopRequireDefault(_empty);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Data tables display information in a way thatâ€™s easy to scan,
 * so that users can look for patterns and insights.
 * @category DataView
 */
var Table = function (_Component) {
    _inherits(Table, _Component);

    function Table(props) {
        _classCallCheck(this, Table);

        var _this = _possibleConstructorReturn(this, (Table.__proto__ || Object.getPrototypeOf(Table)).call(this, props));

        var children = props.children,
            showCheckboxColumn = props.showCheckboxColumn,
            keyField = props.keyField,
            data = props.data,
            maxRowSelection = props.maxRowSelection,
            minColumnWidth = props.minColumnWidth,
            maxColumnWidth = props.maxColumnWidth;


        _this.state = {
            columns: (0, _columns.getColumns)({
                children: children,
                showCheckboxColumn: showCheckboxColumn,
                minColumnWidth: minColumnWidth,
                maxColumnWidth: maxColumnWidth
            }),
            tableWidth: undefined,
            rows: (0, _rows.getRows)({
                keyField: keyField,
                rows: (0, _data.normalizeData)(data),
                maxRowSelection: maxRowSelection && Number(maxRowSelection),
                selectedRowsKeys: {}
            }),
            bulkSelection: 'none'
        };

        _this.indexes = (0, _rows.getIndexes)(_this.state.rows);
        _this.selectedRowsKeys = {};

        _this.tableId = (0, _utils.uniqueId)('table');
        _this.tableContainerRef = _react2.default.createRef();
        _this.resizeTarget = _react2.default.createRef();
        _this.handleSort = _this.handleSort.bind(_this);
        _this.handleResize = _this.handleResize.bind(_this);
        _this.updateColumnsAndTableWidth = _this.updateColumnsAndTableWidth.bind(_this);
        _this.handleSelectRow = _this.handleSelectRow.bind(_this);
        _this.handleDeselectRow = _this.handleDeselectRow.bind(_this);
        _this.handleSelectAllRows = _this.handleSelectAllRows.bind(_this);
        _this.handleDeselectAllRows = _this.handleDeselectAllRows.bind(_this);
        return _this;
    }

    _createClass(Table, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.widthObserver = new _ResizeSensor2.default(this.resizeTarget.current, (0, _debounce2.default)(this.updateColumnsAndTableWidth, 200));
            this.updateRows();
            this.updateColumnsAndTableWidth();
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var prevChildren = prevProps.children,
                prevShowCheckboxColumn = prevProps.showCheckboxColumn,
                prevMaxRowSelection = prevProps.maxRowSelection,
                prevSelectedRows = prevProps.selectedRows,
                prevData = prevProps.data,
                prevMinColumnWidth = prevProps.minColumnWidth,
                prevMaxColumnWidth = prevProps.maxColumnWidth;
            var _props = this.props,
                children = _props.children,
                showCheckboxColumn = _props.showCheckboxColumn,
                maxRowSelection = _props.maxRowSelection,
                selectedRows = _props.selectedRows,
                data = _props.data,
                keyField = _props.keyField,
                minColumnWidth = _props.minColumnWidth,
                maxColumnWidth = _props.maxColumnWidth;

            var prevColumns = (0, _columns.getColumns)({
                children: prevChildren,
                showCheckboxColumn: prevShowCheckboxColumn,
                minColumnWidth: prevMinColumnWidth,
                maxColumnWidth: prevMaxColumnWidth
            });
            var currentColumns = (0, _columns.getColumns)({
                children: children,
                showCheckboxColumn: showCheckboxColumn,
                minColumnWidth: minColumnWidth,
                maxColumnWidth: maxColumnWidth
            });
            if ((0, _columns.isNotSameColumns)(prevColumns, currentColumns)) {
                this.updateColumnsAndTableWidth(currentColumns);
            }
            if (prevMaxRowSelection !== maxRowSelection || prevSelectedRows !== selectedRows) {
                this.updateRows();
            }
            if (data !== prevData) {
                var rows = (0, _rows.getRows)({
                    keyField: keyField,
                    rows: (0, _data.normalizeData)(data),
                    maxRowSelection: this.getMaxRowSelection(),
                    selectedRowsKeys: {}
                });
                this.indexes = (0, _rows.getIndexes)(rows);
                this.updateRows(rows);
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.widthObserver.detach();
        }
    }, {
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-table_container', className);
        }
    }, {
        key: 'getScrollableYClassNames',
        value: function getScrollableYClassNames() {
            var _props2 = this.props,
                data = _props2.data,
                isLoading = _props2.isLoading;

            var isEmpty = data.length === 0;
            return (0, _classnames2.default)('rainbow-table_container--scrollable-y', {
                'rainbow-table_container--scrollable-y-align-content': isEmpty && !isLoading
            });
        }
    }, {
        key: 'getTableWidthFromDom',
        value: function getTableWidthFromDom() {
            var containerElement = this.tableContainerRef.current;
            if (containerElement) {
                return containerElement.offsetWidth;
            }
            return 0;
        }
    }, {
        key: 'getSelectedRows',
        value: function getSelectedRows(rows) {
            var data = this.props.data;

            return (0, _data.normalizeData)(data).filter(function (item, index) {
                return rows[index].isSelected;
            });
        }
    }, {
        key: 'getMaxRowSelection',
        value: function getMaxRowSelection() {
            var _props3 = this.props,
                maxRowSelection = _props3.maxRowSelection,
                data = _props3.data;

            var rowsLength = (0, _data.normalizeData)(data).length;
            var maxRowSelectionNumber = Number(maxRowSelection);

            if (!(0, _selector.isValidMaxRowSelection)(maxRowSelection, rowsLength)) {
                return rowsLength;
            }
            return maxRowSelectionNumber;
        }
    }, {
        key: 'updateRows',
        value: function updateRows(updatedRows) {
            var _props4 = this.props,
                keyField = _props4.keyField,
                selectedRows = _props4.selectedRows;
            var rows = this.state.rows;

            var maxRowSelection = this.getMaxRowSelection();
            this.selectedRowsKeys = {};
            var newRows = (0, _rows.getRows)({
                keyField: keyField,
                rows: updatedRows || rows,
                maxRowSelection: maxRowSelection,
                selectedRowsKeys: this.selectedRowsKeys
            });

            this.setState({
                rows: (0, _selector.getRowsWithInitalSelectedRows)({
                    rows: newRows,
                    selectedRows: selectedRows,
                    maxRowSelection: maxRowSelection,
                    indexes: this.indexes,
                    selectedRowsKeys: this.selectedRowsKeys
                }),
                bulkSelection: (0, _selector.getBulkSelectionState)({
                    maxRowSelection: maxRowSelection,
                    selectedRowsKeys: this.selectedRowsKeys
                })
            });
        }
    }, {
        key: 'updateColumnsAndTableWidth',
        value: function updateColumnsAndTableWidth(newColumns) {
            var columns = this.state.columns;
            var _props5 = this.props,
                minColumnWidth = _props5.minColumnWidth,
                maxColumnWidth = _props5.maxColumnWidth;

            var domTableWidth = this.getTableWidthFromDom();
            var minColWidth = Number(minColumnWidth) || 50;
            var maxColWidth = Number(maxColumnWidth) || 1000;
            var updatedColumns = (0, _resizer.getUpdatedColumns)({
                columns: newColumns || columns,
                domTableWidth: domTableWidth,
                minColumnWidth: minColWidth,
                maxColumnWidth: maxColWidth
            });
            this.setState({
                columns: updatedColumns
            });
            if (this.hasFlexibleColumns()) {
                this.setState({
                    tableWidth: (0, _resizer.getTableWidth)(updatedColumns)
                });
            }
        }
    }, {
        key: 'handleSelectAllRows',
        value: function handleSelectAllRows() {
            var onRowSelection = this.props.onRowSelection;
            var rows = this.state.rows;

            var maxRowSelection = this.getMaxRowSelection();

            this.selectedRowsKeys = {};
            var updatedRows = (0, _selector.getUpdatedRowsWhenSelectAll)({
                rows: rows,
                maxRowSelection: maxRowSelection,
                selectedRowsKeys: this.selectedRowsKeys
            });
            var bulkSelection = (0, _selector.getBulkSelectionState)({
                maxRowSelection: maxRowSelection,
                selectedRowsKeys: this.selectedRowsKeys
            });
            this.setState({
                rows: updatedRows,
                bulkSelection: bulkSelection
            });
            onRowSelection(this.getSelectedRows(updatedRows));
        }
    }, {
        key: 'handleDeselectAllRows',
        value: function handleDeselectAllRows() {
            var onRowSelection = this.props.onRowSelection;
            var rows = this.state.rows;


            this.selectedRowsKeys = {};
            var updatedRows = (0, _selector.getUpdatedRowsWhenDeselectAll)(rows);
            var bulkSelection = (0, _selector.getBulkSelectionState)({
                maxRowSelection: this.getMaxRowSelection(),
                selectedRowsKeys: this.selectedRowsKeys
            });
            this.setState({
                rows: updatedRows,
                bulkSelection: bulkSelection
            });
            onRowSelection(this.getSelectedRows(updatedRows));
        }
    }, {
        key: 'handleSelectRow',
        value: function handleSelectRow(event, isMultiple, rowKeyValue) {
            var onRowSelection = this.props.onRowSelection;
            var indexes = this.indexes;
            var rows = this.state.rows;

            var maxRowSelection = this.getMaxRowSelection();

            if (maxRowSelection > 1) {
                var updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({
                    maxRowSelection: maxRowSelection,
                    rows: rows,
                    indexes: indexes,
                    isMultiple: isMultiple,
                    rowKeyValue: rowKeyValue,
                    lastSelectedRowKey: this.lastSelectedRowKey,
                    selectedRowsKeys: this.selectedRowsKeys
                });
                var bulkSelection = (0, _selector.getBulkSelectionState)({
                    maxRowSelection: maxRowSelection,
                    selectedRowsKeys: this.selectedRowsKeys
                });
                this.setState({
                    rows: updatedRows,
                    bulkSelection: bulkSelection
                });
                onRowSelection(this.getSelectedRows(updatedRows));
            } else {
                this.selectedRowsKeys = {};
                this.selectedRowsKeys[rowKeyValue] = true;
                var _updatedRows = (0, _selector.getUpdatedRowsWhenSelect)({
                    maxRowSelection: maxRowSelection,
                    rows: rows,
                    rowKeyValue: rowKeyValue,
                    selectedRowsKeys: this.selectedRowsKeys
                });
                this.setState({
                    rows: _updatedRows
                });
                onRowSelection(this.getSelectedRows(_updatedRows));
            }

            this.lastSelectedRowKey = rowKeyValue;
        }
    }, {
        key: 'handleDeselectRow',
        value: function handleDeselectRow(event, isMultiple, rowKeyValue) {
            var onRowSelection = this.props.onRowSelection;
            var indexes = this.indexes;
            var rows = this.state.rows;

            var maxRowSelection = this.getMaxRowSelection();

            var updatedRows = (0, _selector.getUpdatedRowsWhenDeselect)({
                maxRowSelection: maxRowSelection,
                rows: rows,
                indexes: indexes,
                isMultiple: isMultiple,
                rowKeyValue: rowKeyValue,
                lastSelectedRowKey: this.lastSelectedRowKey,
                selectedRowsKeys: this.selectedRowsKeys
            });
            var bulkSelection = (0, _selector.getBulkSelectionState)({
                maxRowSelection: maxRowSelection,
                selectedRowsKeys: this.selectedRowsKeys
            });
            this.setState({
                rows: updatedRows,
                bulkSelection: bulkSelection
            });
            this.lastSelectedRowKey = rowKeyValue;
            onRowSelection(this.getSelectedRows(updatedRows));
        }
    }, {
        key: 'hasFlexibleColumns',
        value: function hasFlexibleColumns() {
            var columns = this.state.columns;

            return columns.some(function (column) {
                return column.isResized !== true;
            });
        }
    }, {
        key: 'handleResize',
        value: function handleResize(widthDelta, colIndex) {
            var _state = this.state,
                columns = _state.columns,
                tableWidth = _state.tableWidth;

            if (widthDelta !== 0) {
                this.setState({
                    columns: (0, _resizer.getResizedColumns)({ columns: columns, colIndex: colIndex, widthDelta: widthDelta }),
                    tableWidth: tableWidth + widthDelta
                });
            }
        }
    }, {
        key: 'handleSort',
        value: function handleSort(event, field, sortDirection) {
            var _props6 = this.props,
                onSort = _props6.onSort,
                sortedBy = _props6.sortedBy;

            var nextSortDirection = (0, _sort.getNextSortDirection)(field, sortedBy, sortDirection);
            onSort(event, field, nextSortDirection);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props7 = this.props,
                id = _props7.id,
                data = _props7.data,
                sortedBy = _props7.sortedBy,
                sortDirection = _props7.sortDirection,
                defaultSortDirection = _props7.defaultSortDirection,
                resizeColumnDisabled = _props7.resizeColumnDisabled,
                minColumnWidth = _props7.minColumnWidth,
                maxColumnWidth = _props7.maxColumnWidth,
                style = _props7.style,
                isLoading = _props7.isLoading,
                emptyIcon = _props7.emptyIcon,
                emptyTitle = _props7.emptyTitle,
                emptyDescription = _props7.emptyDescription;
            var _state2 = this.state,
                columns = _state2.columns,
                tableWidth = _state2.tableWidth,
                rows = _state2.rows,
                bulkSelection = _state2.bulkSelection;

            var tableStyles = {
                width: tableWidth
            };
            var maxRowSelection = this.getMaxRowSelection();
            var minColWidth = Number(minColumnWidth) || 50;
            var maxColWidth = Number(maxColumnWidth) || 1000;

            return _react2.default.createElement(
                'div',
                { id: id, className: this.getContainerClassNames(), style: style },
                _react2.default.createElement('div', { className: 'rainbow-table-width-observer', ref: this.resizeTarget }),
                _react2.default.createElement(
                    'div',
                    { className: 'rainbow-table_container' },
                    _react2.default.createElement(
                        'div',
                        {
                            className: 'rainbow-table_container--scrollable-x',
                            ref: this.tableContainerRef
                        },
                        _react2.default.createElement(
                            'div',
                            { className: this.getScrollableYClassNames(), style: tableStyles },
                            _react2.default.createElement(
                                'table',
                                { className: 'rainbow-table', style: tableStyles },
                                _react2.default.createElement(
                                    'thead',
                                    null,
                                    _react2.default.createElement(
                                        'tr',
                                        null,
                                        _react2.default.createElement(_head2.default, {
                                            columns: columns,
                                            sortedBy: sortedBy,
                                            sortDirection: sortDirection,
                                            defaultSortDirection: defaultSortDirection,
                                            resizeColumnDisabled: resizeColumnDisabled,
                                            minColumnWidth: minColWidth,
                                            maxColumnWidth: maxColWidth,
                                            onSort: this.handleSort,
                                            onResize: this.handleResize,
                                            onSelectAllRows: this.handleSelectAllRows,
                                            onDeselectAllRows: this.handleDeselectAllRows,
                                            tableId: this.tableId,
                                            maxRowSelection: maxRowSelection,
                                            bulkSelection: bulkSelection
                                        })
                                    )
                                ),
                                _react2.default.createElement(
                                    'tbody',
                                    { className: 'rainbow-table_body' },
                                    _react2.default.createElement(_body2.default, {
                                        data: (0, _data.normalizeData)(data),
                                        columns: columns,
                                        rows: rows,
                                        tableId: this.tableId,
                                        isLoading: isLoading,
                                        emptyIcon: emptyIcon,
                                        emptyTitle: emptyTitle,
                                        emptyDescription: emptyDescription,
                                        onSelectRow: this.handleSelectRow,
                                        onDeselectRow: this.handleDeselectRow
                                    })
                                )
                            )
                        )
                    )
                )
            );
        }
    }]);

    return Table;
}(_react.Component);

exports.default = Table;


Table.propTypes = {
    /** An array containing the objects(rows) to be displayed. */
    data: _propTypes2.default.arrayOf(Object),
    /** The column fieldName that controls the sorting order.
     * Sort the data using the onsort event handler. */
    sortedBy: _propTypes2.default.string,
    /**
     * Specifies the sorting direction, valid options are 'asc' or 'desc'.
     */
    sortDirection: _propTypes2.default.oneOf(['asc', 'desc']),
    /** Specifies the default sorting direction on an unsorted column.
     * Valid options include 'asc' and 'desc'.
     * The default is 'asc' for sorting in ascending order. */
    defaultSortDirection: _propTypes2.default.oneOf(['asc', 'desc']),
    /** Action triggered when a column is sorted.
     * Receive the event object, field and sortDirection. */
    onSort: _propTypes2.default.func,
    /** Specifies whether column resizing is disabled. The default is false. */
    resizeColumnDisabled: _propTypes2.default.bool,
    /** The minimum width for all columns. The default value is 50px. */
    minColumnWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** The maximum width for all columns. The default value is 1000px. */
    maxColumnWidth: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** Show or hide the checkbox column for row selection. To show set
     * showCheckboxColumn to true. The default value is false. */
    showCheckboxColumn: _propTypes2.default.bool,
    /** The action triggered when a row is selected. Receive the selectedRows array. */
    onRowSelection: _propTypes2.default.func,
    /** The maximum number of rows that can be selected. When the value is
     * 1 the selection is made by radio buttons, otherwise with checkboxes. */
    maxRowSelection: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** An array with a list of keyField values of the selected rows. */
    selectedRows: _propTypes2.default.array,
    /** It is required for associate each row with a unique ID. Must be one of the data key. */
    keyField: _propTypes2.default.string,
    /** Specifies whether data is being loaded. The default is false. */
    isLoading: _propTypes2.default.bool,
    /** The icon that appears in the message of the Table when is empty. */
    emptyIcon: _propTypes2.default.node,
    /** The title that appears in the message of the Table when is empty. */
    emptyTitle: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The description that appears in the message of the Table when is empty. */
    emptyDescription: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied for the outer element. */
    style: _propTypes2.default.object,
    /**
     * This prop that should not be visible in the documentation.
     * @ignore
     */
    children: _propTypes2.default.node
};

Table.defaultProps = {
    data: [],
    sortedBy: undefined,
    sortDirection: undefined,
    defaultSortDirection: 'asc',
    onSort: function onSort() {},
    resizeColumnDisabled: false,
    minColumnWidth: 50,
    maxColumnWidth: 1000,
    showCheckboxColumn: false,
    onRowSelection: function onRowSelection() {},
    maxRowSelection: undefined,
    selectedRows: undefined,
    keyField: undefined,
    isLoading: false,
    emptyIcon: _react2.default.createElement(_empty2.default, null),
    emptyTitle: 'Itâ€™s empty here',
    emptyDescription: 'Our robots did not find any match...',
    id: undefined,
    className: undefined,
    style: undefined,
    children: undefined
};
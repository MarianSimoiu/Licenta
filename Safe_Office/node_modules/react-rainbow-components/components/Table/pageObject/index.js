'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageTableRow = require('./row');

var HEAD_CHECKBOX_LABEL_SELECTOR = '.rainbow-table-input-checkbox_label-container';
var HEAD_CHECKBOX_INPUT_SELECTOR = '.rainbow-table_header-checkbox-container input';

/**
 * Table page object class.
 * @class
 */

var PageTable = function () {
    /**
     * Create a new Table page object.
     * @constructor
     * @param {string} rootElement - The selector of the Table root element.
     */
    function PageTable(rootElement) {
        _classCallCheck(this, PageTable);

        this.rootElement = rootElement;
    }

    /**
     * Clicks the head checkbox to select the maximum selectable rows.
     * @method
     */


    _createClass(PageTable, [{
        key: 'selectAllRows',
        value: function selectAllRows() {
            var headCheckbox = $(this.rootElement).$('thead').$(HEAD_CHECKBOX_INPUT_SELECTOR);
            if (!headCheckbox.isSelected() && !headCheckbox.getAttribute('indeterminate')) {
                $(this.rootElement).$('thead').$(HEAD_CHECKBOX_LABEL_SELECTOR).click();
            }
        }

        /**
         * Clicks the head checkbox to deselect all selected rows.
         * @method
         */

    }, {
        key: 'deselectAllRows',
        value: function deselectAllRows() {
            var headCheckbox = $(this.rootElement).$('thead').$(HEAD_CHECKBOX_INPUT_SELECTOR);
            if (headCheckbox.isSelected() || headCheckbox.getAttribute('indeterminate')) {
                $(this.rootElement).$('thead').$(HEAD_CHECKBOX_LABEL_SELECTOR).click();
            }
        }

        /**
         * Returns a new Row page object of the row in the position passed.
         * @method
         * @param {number} rowPosition - The base 0 index of the row item.
         */

    }, {
        key: 'getRow',
        value: function getRow(rowPosition) {
            var rows = $(this.rootElement).$$('tbody > tr.rainbow-table_body-row');
            if (rows[rowPosition]) {
                return new PageTableRow(this.rootElement + ' tr.rainbow-table_body-row:nth-child(' + (rowPosition + 1) + ')');
            }
            return null;
        }

        /**
         * Wait until the data is loaded.
         * @method
         */

    }, {
        key: 'waitUntilDataIsLoaded',
        value: function waitUntilDataIsLoaded() {
            var _this = this;

            browser.waitUntil(function () {
                return !$(_this.rootElement).$('.rainbow-table_body--loading').isDisplayed() && $(_this.rootElement).$('.rainbow-table_body-row').isDisplayed();
            });
        }
    }]);

    return PageTable;
}();

module.exports = PageTable;
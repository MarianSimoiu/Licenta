'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CHECKBOX_LABEL_SELECTOR = '.rainbow-table_cell-checkbox label';
var CHECKBOX_INPUT_SELECTOR = '.rainbow-table_cell-checkbox input';

/**
 * Row page object class.
 * @class
 */

var PageTableRow = function () {
    /**
     * Create a new Row page object.
     * @constructor
     * @param {string} rootElement - The selector of the Row root element.
     */
    function PageTableRow(rootElement) {
        _classCallCheck(this, PageTableRow);

        this.rootElement = rootElement;
    }

    /**
     * Clicks the row to select.
     * @method
     */


    _createClass(PageTableRow, [{
        key: 'selectRow',
        value: function selectRow() {
            if (!this.isRowSelected()) {
                $(this.rootElement).$(CHECKBOX_LABEL_SELECTOR).click();
            }
        }

        /**
         * Clicks the row to select.
         * @method
         */

    }, {
        key: 'deselectRow',
        value: function deselectRow() {
            if (this.isRowSelected()) {
                $(this.rootElement).$(CHECKBOX_LABEL_SELECTOR).click();
            }
        }

        /**
         * Returns true when the row is selected.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isRowSelected',
        value: function isRowSelected() {
            return $(this.rootElement).$(CHECKBOX_INPUT_SELECTOR).isSelected();
        }

        /**
         * Returns true when the row input is disabled.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isRowSelectionDisabled',
        value: function isRowSelectionDisabled() {
            return !$(this.rootElement).$(CHECKBOX_INPUT_SELECTOR).isEnabled();
        }
    }]);

    return PageTableRow;
}();

module.exports = PageTableRow;
'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('./../');

var _2 = _interopRequireDefault(_);

var _VerticalSection = require('./../../VerticalSection');

var _VerticalSection2 = _interopRequireDefault(_VerticalSection);

var _VerticalSectionOverflow = require('./../../VerticalSectionOverflow');

var _VerticalSectionOverflow2 = _interopRequireDefault(_VerticalSectionOverflow);

var _VerticalItem = require('./../../VerticalItem');

var _VerticalItem2 = _interopRequireDefault(_VerticalItem);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<VerticalNavigation/>', function () {
    it('should have the right className in the nav element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, null));
        expect(component.find('nav').prop('className')).toBe('rainbow-vertical-navigation');
    });
    it('should have the right className in the nav element when compact is true', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { compact: true }));
        expect(component.find('nav').prop('className')).toBe('rainbow-vertical-navigation rainbow-vertical-navigation_compact');
    });
    it('should have the right className in the nav element when shaded is true', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { shaded: true }));
        expect(component.find('nav').prop('className')).toBe('rainbow-vertical-navigation rainbow-vertical-navigation_shade');
    });
    it('should set the ariaLabel passed as aria-label in the nav element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { ariaLabel: 'my aria label' }));
        expect(component.find('nav').prop('aria-label')).toBe('my aria label');
    });
    it('should render the children passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            null,
            _react2.default.createElement(
                'span',
                null,
                'item children'
            )
        ));
        expect(component.find('span').text()).toBe('item children');
    });
    it('should set the rainbow-is-active class only to the third VerticalItem when selectedItem is item 3', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { selectedItem: 'item 3' },
            _react2.default.createElement(
                _VerticalSection2.default,
                { label: 'header section' },
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 1', label: 'item 1' }),
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 2', label: 'item 2' }),
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 3', label: 'item 3' })
            )
        ));
        var item1 = component.find('VerticalItem[name="item 1"]').find('li');
        var item2 = component.find('VerticalItem[name="item 2"]').find('li');
        var item3 = component.find('VerticalItem[name="item 3"]').find('li');
        expect(item1.prop('className')).toBe('rainbow-vertical-item');
        expect(item2.prop('className')).toBe('rainbow-vertical-item');
        expect(item3.prop('className')).toBe('rainbow-vertical-item rainbow-vertical-item--active');
    });
    it('should call onSelect event with the right data when an item is clicked', function () {
        var onSelectMockFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { onSelect: onSelectMockFn },
            _react2.default.createElement(
                _VerticalSection2.default,
                { label: 'header section' },
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 1', label: 'item 1' }),
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 2', label: 'item 2' }),
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 3', label: 'item 3' })
            )
        ));
        var item2 = component.find('VerticalItem[name="item 2"]').find('a');
        item2.simulate('click');
        expect(onSelectMockFn).toHaveBeenCalledWith(expect.any(Object), 'item 2');
    });
    it('should set tabIndex 0 in anchor element when use VerticalSection', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            null,
            _react2.default.createElement(
                _VerticalSection2.default,
                { label: 'header section' },
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 1', label: 'item 1' })
            )
        ));
        expect(component.find('a').prop('tabIndex')).toBe(0);
    });
    it('should set tabIndex 0 in anchor element when use VerticalSectionOverflow and expanded is true', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            null,
            _react2.default.createElement(
                _VerticalSectionOverflow2.default,
                { expanded: true },
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 1', label: 'item 1' })
            )
        ));
        expect(component.find('a').prop('tabIndex')).toBe(0);
    });
    it('should set tabIndex -1 in anchor element when use VerticalSectionOverflow and expanded is false', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            null,
            _react2.default.createElement(
                _VerticalSectionOverflow2.default,
                { expanded: false },
                _react2.default.createElement(_VerticalItem2.default, { name: 'item 1', label: 'item 1' })
            )
        ));
        expect(component.find('a').prop('tabIndex')).toBe(-1);
    });
});
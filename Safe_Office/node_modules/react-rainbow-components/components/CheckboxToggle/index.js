'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _withReduxForm = require('./../../libs/hocs/withReduxForm');

var _withReduxForm2 = _interopRequireDefault(_withReduxForm);

var _utils = require('../../libs/utils');

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable jsx-a11y/label-has-for */


/**
 * Checkbox toggle is a checkable input that communicates if an option is true,
 * false or indeterminate.
 * @category Form
 */
var CheckboxToggle = function (_Component) {
    _inherits(CheckboxToggle, _Component);

    function CheckboxToggle(props) {
        _classCallCheck(this, CheckboxToggle);

        var _this = _possibleConstructorReturn(this, (CheckboxToggle.__proto__ || Object.getPrototypeOf(CheckboxToggle)).call(this, props));

        _this.checkboxToggleRef = _react2.default.createRef();
        _this.inputIndentifier = props.name || (0, _utils.uniqueId)('checkbox-toggle');
        return _this;
    }

    _createClass(CheckboxToggle, [{
        key: 'getClassNames',
        value: function getClassNames() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-checkbox-toggle', className);
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.checkboxToggleRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.checkboxToggleRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.checkboxToggleRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                style = _props.style,
                disabled = _props.disabled,
                label = _props.label,
                value = _props.value,
                onChange = _props.onChange,
                onFocus = _props.onFocus,
                onBlur = _props.onBlur,
                onClick = _props.onClick,
                id = _props.id;


            return _react2.default.createElement(
                'label',
                { id: id, className: this.getClassNames(), style: style },
                _react2.default.createElement('input', {
                    type: 'checkbox',
                    name: this.inputIndentifier,
                    value: this.inputIndentifier,
                    'aria-describedby': this.inputIndentifier,
                    checked: value,
                    onChange: onChange,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    onClick: onClick,
                    disabled: disabled,
                    ref: this.checkboxToggleRef
                }),
                _react2.default.createElement(
                    'span',
                    {
                        id: this.inputIndentifier,
                        className: 'rainbow-checkbox-toggle_faux-container',
                        'aria-live': 'assertive'
                    },
                    _react2.default.createElement('span', { className: 'rainbow-checkbox-toggle_faux' })
                ),
                _react2.default.createElement(
                    _RenderIf2.default,
                    { isTrue: !!label },
                    _react2.default.createElement(
                        'span',
                        { className: 'rainbow-checkbox-toggle_label' },
                        label
                    )
                )
            );
        }
    }]);

    return CheckboxToggle;
}(_react.Component);

CheckboxToggle.propTypes = {
    /** Text label for the checkbox toggle. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The name of the input */
    name: _propTypes2.default.string,
    /** The value of the element. */
    value: _propTypes2.default.bool,
    /** Specifies that the element should be disabled. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** The action triggered when a value attribute changes. */
    onChange: _propTypes2.default.func,
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string
};

CheckboxToggle.defaultProps = {
    label: null,
    disabled: false,
    value: false,
    name: undefined,
    onChange: function onChange() {},
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    className: undefined,
    style: undefined,
    id: undefined
};

exports.default = (0, _withReduxForm2.default)(CheckboxToggle);
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Avatar = require('./../Avatar');

var _Avatar2 = _interopRequireDefault(_Avatar);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AvatarButton = function (_Component) {
    _inherits(AvatarButton, _Component);

    function AvatarButton(props) {
        _classCallCheck(this, AvatarButton);

        var _this = _possibleConstructorReturn(this, (AvatarButton.__proto__ || Object.getPrototypeOf(AvatarButton)).call(this, props));

        _this.avatarButtonRef = _react2.default.createRef();
        return _this;
    }

    /**
     * Sets focus on the element.
     * @public
     */


    _createClass(AvatarButton, [{
        key: 'focus',
        value: function focus() {
            this.avatarButtonRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.avatarButtonRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.avatarButtonRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                title = _props.title,
                tabIndex = _props.tabIndex,
                onClick = _props.onClick,
                onFocus = _props.onFocus,
                onBlur = _props.onBlur,
                disabled = _props.disabled,
                assistiveText = _props.assistiveText,
                ariaHaspopup = _props.ariaHaspopup,
                src = _props.src,
                initials = _props.initials,
                icon = _props.icon,
                avatarSize = _props.avatarSize,
                initialsVariant = _props.initialsVariant;


            return _react2.default.createElement(
                'button',
                {
                    className: 'rainbow-avatar-menu_button',
                    'data-id': 'rainbow-avatar-menu_button',
                    tabIndex: tabIndex,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    disabled: disabled,
                    onClick: onClick,
                    title: title,
                    'aria-haspopup': ariaHaspopup,
                    ref: this.avatarButtonRef
                },
                _react2.default.createElement(_Avatar2.default, {
                    src: src,
                    icon: icon,
                    initials: initials,
                    size: avatarSize,
                    initialsVariant: initialsVariant,
                    title: title,
                    assistiveText: assistiveText,
                    ariaHaspopup: true,
                    onFocus: onFocus,
                    onBlur: onBlur
                })
            );
        }
    }]);

    return AvatarButton;
}(_react.Component);

exports.default = AvatarButton;


AvatarButton.propTypes = {
    title: _propTypes2.default.string,
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    onClick: _propTypes2.default.func,
    onFocus: _propTypes2.default.func,
    onBlur: _propTypes2.default.func,
    assistiveText: _propTypes2.default.string,
    ariaHaspopup: _propTypes2.default.bool,
    disabled: _propTypes2.default.bool,
    src: _propTypes2.default.string,
    initials: _propTypes2.default.string,
    icon: _propTypes2.default.node,
    avatarSize: _propTypes2.default.oneOf(['x-small', 'small', 'medium', 'large']),
    initialsVariant: _propTypes2.default.oneOf(['default', 'inverse'])
};

AvatarButton.defaultProps = {
    title: undefined,
    disabled: false,
    tabIndex: undefined,
    onClick: function onClick() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    assistiveText: undefined,
    ariaHaspopup: false,
    src: undefined,
    initials: undefined,
    icon: null,
    avatarSize: 'medium',
    initialsVariant: 'default'
};
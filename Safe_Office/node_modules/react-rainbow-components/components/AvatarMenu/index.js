'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = AvatarMenu;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _PrimitiveMenu = require('../PrimitiveMenu');

var _PrimitiveMenu2 = _interopRequireDefault(_PrimitiveMenu);

var _avatarButton = require('./avatarButton');

var _avatarButton2 = _interopRequireDefault(_avatarButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * A Avatar Menu offers a list of actions or functions that a user can access.
 */
function AvatarMenu(props) {
    var src = props.src,
        initials = props.initials,
        icon = props.icon,
        avatarSize = props.avatarSize,
        initialsVariant = props.initialsVariant,
        title = props.title,
        assistiveText = props.assistiveText,
        disabled = props.disabled,
        tabIndex = props.tabIndex,
        onFocus = props.onFocus,
        onBlur = props.onBlur,
        children = props.children,
        rest = _objectWithoutProperties(props, ['src', 'initials', 'icon', 'avatarSize', 'initialsVariant', 'title', 'assistiveText', 'disabled', 'tabIndex', 'onFocus', 'onBlur', 'children']);

    return _react2.default.createElement(
        _PrimitiveMenu2.default,
        _extends({}, rest, {
            src: src,
            icon: icon,
            initials: initials,
            disabled: disabled,
            tabIndex: tabIndex,
            avatarSize: avatarSize,
            initialsVariant: initialsVariant,
            title: title,
            assistiveText: assistiveText,
            ariaHaspopup: true,
            onFocus: onFocus,
            onBlur: onBlur,
            trigger: _avatarButton2.default
        }),
        children
    );
}

AvatarMenu.propTypes = {
    /** The URL for the image.
     * It take precedence over the initials and icon. */
    src: _propTypes2.default.string,
    /** If the record name contains two words, like first and last name,
     * use the first capitalized letter of each. For records that only have a single word name,
     * use the first two letters of that word using one capital and one lower case letter. */
    initials: _propTypes2.default.string,
    /** The fallback icon to show when src and initials are not passed. */
    icon: _propTypes2.default.node,
    /** The size of the avatar. Valid values are x-small, small, medium, and large.
     * It take precedence over the icon.
     * This value defaults to medium. */
    avatarSize: _propTypes2.default.oneOf(['x-small', 'small', 'medium', 'large']),
    /** The variant of the initials. Only make sense when initials is used. */
    initialsVariant: _propTypes2.default.oneOf(['default', 'inverse']),
    /** The content of the AvatarMenu. Used to render the menuItem elements
     * when the AvatarMenu is open. */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.object]),
    /** The size of the menu. Options include xx-small, x-small, medium, or large.
     * This value defaults to small. */
    menuSize: _propTypes2.default.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),
    /** Determines the alignment of the menu relative to the AvatarMenu.
     * Available options are: left, center, right, bottom, bottom-left, bottom-right.
     * This value defaults to left. */
    menuAlignment: _propTypes2.default.oneOf(['left', 'right', 'bottom', 'center', 'bottom-right', 'bottom-left']),
    /** If is set to true, then is showed a loading symbol. */
    isLoading: _propTypes2.default.bool,
    /** Displays tooltip text when the mouse moves over the element. */
    title: _propTypes2.default.string,
    /** A description for assistive sreen readers. */
    assistiveText: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** Specifies the tab order of an element (when the tab button is used for navigating). */
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** If true, the menu is disabled. Disabling the menu prevents users from opening it.
     * This value defaults to false. */
    disabled: _propTypes2.default.bool
};

AvatarMenu.defaultProps = {
    src: undefined,
    initials: undefined,
    icon: null,
    avatarSize: 'medium',
    initialsVariant: 'default',
    title: undefined,
    assistiveText: undefined,
    className: undefined,
    style: undefined,
    children: null,
    menuSize: 'xx-small',
    menuAlignment: 'left',
    isLoading: false,
    id: undefined,
    disabled: false,
    tabIndex: undefined
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _AssistiveText = require('./../AssistiveText');

var _AssistiveText2 = _interopRequireDefault(_AssistiveText);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Buttons Icons provide the user with visual iconography that
 * is typically used to invoke an event or action.
 */
var ButtonIcon = function (_Component) {
    _inherits(ButtonIcon, _Component);

    function ButtonIcon(props) {
        _classCallCheck(this, ButtonIcon);

        var _this = _possibleConstructorReturn(this, (ButtonIcon.__proto__ || Object.getPrototypeOf(ButtonIcon)).call(this, props));

        _this.buttonRef = _react2.default.createRef();
        return _this;
    }

    _createClass(ButtonIcon, [{
        key: 'getVariantClassName',
        value: function getVariantClassName() {
            var variant = this.props.variant;

            if (variant === 'base') {
                return null;
            }
            return 'rainbow-button-icon--' + variant;
        }
    }, {
        key: 'getButtonClassNames',
        value: function getButtonClassNames() {
            var _props = this.props,
                className = _props.className,
                shaded = _props.shaded,
                variant = _props.variant,
                size = _props.size;

            var isShaded = shaded && (variant === 'border-filled' || variant === 'brand' || variant === 'success');

            return (0, _classnames2.default)('rainbow-button-icon', {
                'rainbow-button-icon--shaded': isShaded
            }, this.getVariantClassName(), 'rainbow-button-icon--' + size, className);
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.buttonRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.buttonRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.buttonRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                title = _props2.title,
                type = _props2.type,
                disabled = _props2.disabled,
                tabIndex = _props2.tabIndex,
                onClick = _props2.onClick,
                onFocus = _props2.onFocus,
                onBlur = _props2.onBlur,
                assistiveText = _props2.assistiveText,
                ariaHaspopup = _props2.ariaHaspopup,
                ariaPressed = _props2.ariaPressed,
                style = _props2.style,
                id = _props2.id,
                ariaControls = _props2.ariaControls,
                ariaExpanded = _props2.ariaExpanded,
                icon = _props2.icon,
                onKeyDown = _props2.onKeyDown,
                form = _props2.form;


            return _react2.default.createElement(
                'button',
                {
                    'data-id': 'button-icon-element',
                    id: id,
                    className: this.getButtonClassNames(),
                    style: style,
                    disabled: disabled,
                    tabIndex: tabIndex,
                    onFocus: onFocus,
                    onBlur: onBlur,
                    onClick: onClick,
                    title: title,
                    type: type,
                    'aria-haspopup': ariaHaspopup,
                    'aria-controls': ariaControls,
                    'aria-expanded': ariaExpanded,
                    'aria-pressed': ariaPressed,
                    onKeyDown: onKeyDown,
                    form: form,
                    ref: this.buttonRef
                },
                icon,
                _react2.default.createElement(_AssistiveText2.default, { text: assistiveText })
            );
        }
    }]);

    return ButtonIcon;
}(_react.Component);

exports.default = ButtonIcon;


ButtonIcon.propTypes = {
    /** The icon to show if it is passed.
     * It must be a svg icon or a font icon. It is a required value. */
    icon: _propTypes2.default.node.isRequired,
    /** The variant changes the appearance of buttonIcon. Accepted variants include base,
     *  brand, success, border, border-filled, border-inverse and inverse.
     * This value defaults to base. */
    variant: _propTypes2.default.oneOf(['base', 'brand', 'success', 'border', 'border-filled', 'border-inverse', 'inverse']),
    /** The size of the buttonIcon. For the base variant, options include x-small, small, medium,
     * and large. For non-base variants, options include xx-small, x-small, small, and medium.
     * This value defaults to medium. */
    size: _propTypes2.default.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),
    /** Specify true when the button has a shadow around it.
     * This value defaults to false.
     * Only border-filled, brand, and success variant can be shaded. */
    shaded: _propTypes2.default.bool,
    /** Displays tooltip text when the mouse moves over the element. */
    title: _propTypes2.default.string,
    /** Specifies the type of button. Valid values are button, reset, and submit.
     * This value defaults to button. */
    type: _propTypes2.default.oneOf(['button', 'submit', 'reset']),
    /** Specifies whether this button should be displayed in a disabled state.
     * Disabled buttons can't be clicked. This value defaults to false. */
    disabled: _propTypes2.default.bool,
    /** Specifies the tab order of an element (when the tab button is used for navigating). */
    tabIndex: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
    /** The action that will be run when the button is clicked. */
    onClick: _propTypes2.default.func,
    /** The action triggered when a keyboard key is pressed. */
    onKeyDown: _propTypes2.default.func,
    /** The action triggered when the element receives focus. */
    onFocus: _propTypes2.default.func,
    /** The action triggered when the element releases focus. */
    onBlur: _propTypes2.default.func,
    /** A description for assistive sreen readers. */
    assistiveText: _propTypes2.default.string,
    /** A space-separated list of element IDs that
     * this button controls the contents or presence of. */
    ariaControls: _propTypes2.default.string,
    /** Indicates whether an element the button controls is expanded or collapsed.
     * Valid values are 'true' or 'false'. */
    ariaExpanded: _propTypes2.default.bool,
    /** Indicates that the element has a popup context menu or sub-level menu. */
    ariaHaspopup: _propTypes2.default.bool,
    /** Indicates that the element has been pressed. */
    ariaPressed: _propTypes2.default.bool,
    /** It must be the id attribute of a form element that the button is associated with. */
    form: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string
};

ButtonIcon.defaultProps = {
    variant: 'base',
    size: 'medium',
    shaded: false,
    title: undefined,
    type: 'button',
    disabled: false,
    tabIndex: undefined,
    onClick: function onClick() {},
    onKeyDown: function onKeyDown() {},
    onFocus: function onFocus() {},
    onBlur: function onBlur() {},
    assistiveText: undefined,
    ariaHaspopup: undefined,
    className: undefined,
    ariaPressed: undefined,
    style: undefined,
    id: undefined,
    ariaControls: undefined,
    ariaExpanded: undefined,
    form: undefined
};
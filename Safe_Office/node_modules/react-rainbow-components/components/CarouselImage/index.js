'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = CarouselImage;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _utils = require('../../libs/utils');

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _AssistiveText = require('../AssistiveText');

var _AssistiveText2 = _interopRequireDefault(_AssistiveText);

var _context = require('../CarouselCard/context');

var _utils2 = require('../CarouselCard/utils');

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/prop-types */


var Item = function (_Component) {
    _inherits(Item, _Component);

    function Item(props) {
        _classCallCheck(this, Item);

        var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));

        _this.carouselImageID = (0, _utils.uniqueId)('carousel-content-id');
        _this.carouselIndicatorID = (0, _utils.uniqueId)('indicator-id');
        _this.itemRef = _react2.default.createRef();
        _this.state = {
            activeItem: undefined,
            prevActiveItem: undefined
        };
        return _this;
    }

    _createClass(Item, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var _props = this.props,
                privateRegisterChild = _props.privateRegisterChild,
                header = _props.header;

            return setTimeout(function () {
                return privateRegisterChild({
                    containerID: _this2.carouselImageID,
                    indicatorID: _this2.carouselIndicatorID,
                    ref: _this2.itemRef,
                    header: header
                });
            }, 0);
        }
    }, {
        key: 'getContainerClassName',
        value: function getContainerClassName() {
            var _classnames;

            var className = this.props.className;

            return (0, _classnames3.default)('rainbow-carousel-image_container', (_classnames = {}, _defineProperty(_classnames, 'rainbow-carousel-image--slide-in_' + this.getAnimationDirection(), this.shouldShow()), _defineProperty(_classnames, 'rainbow-carousel-image--slide-out_' + this.getAnimationDirection(), this.shouldHide()), _defineProperty(_classnames, 'rainbow-carousel-image--active', this.shouldBeActive()), _classnames), className);
        }
    }, {
        key: 'getAnimationDirection',
        value: function getAnimationDirection() {
            var _props2 = this.props,
                childrenRegistred = _props2.childrenRegistred,
                isAnimationPaused = _props2.isAnimationPaused;
            var _state = this.state,
                activeItem = _state.activeItem,
                prevActiveItem = _state.prevActiveItem;

            if (isAnimationPaused) {
                var activeItemIndex = (0, _utils2.getItemIndex)(childrenRegistred, activeItem);
                var prevItemIndex = (0, _utils2.getItemIndex)(childrenRegistred, prevActiveItem);
                if (activeItemIndex === 0 && prevItemIndex === childrenRegistred.length - 1) {
                    return 'right-to-left';
                } else if (prevItemIndex === 0 && activeItemIndex === childrenRegistred.length - 1) {
                    return 'left-to-right';
                } else if (activeItemIndex > prevItemIndex) {
                    return 'right-to-left';
                }
                return 'left-to-right';
            }
            return 'right-to-left';
        }
    }, {
        key: 'getTabIndex',
        value: function getTabIndex() {
            var activeItem = this.props.activeItem;

            if (activeItem === this.carouselIndicatorID) {
                return 0;
            }
            return -1;
        }
    }, {
        key: 'getAriaHidden',
        value: function getAriaHidden() {
            var activeItem = this.props.activeItem;

            return activeItem !== this.carouselIndicatorID;
        }
    }, {
        key: 'getImageSrc',
        value: function getImageSrc() {
            var src = this.props.src;

            return {
                backgroundImage: 'url(' + src + ')'
            };
        }
    }, {
        key: 'shouldShow',
        value: function shouldShow() {
            var _state2 = this.state,
                activeItem = _state2.activeItem,
                prevActiveItem = _state2.prevActiveItem;

            var areTheSame = activeItem === prevActiveItem;
            if (areTheSame) return false;
            return activeItem === this.carouselIndicatorID;
        }
    }, {
        key: 'shouldHide',
        value: function shouldHide() {
            var _state3 = this.state,
                activeItem = _state3.activeItem,
                prevActiveItem = _state3.prevActiveItem;

            var isNotActive = activeItem !== this.carouselIndicatorID;
            var itWasActive = prevActiveItem === this.carouselIndicatorID;
            return isNotActive && itWasActive;
        }
    }, {
        key: 'shouldBeActive',
        value: function shouldBeActive() {
            var _state4 = this.state,
                activeItem = _state4.activeItem,
                prevActiveItem = _state4.prevActiveItem;

            var areTheSame = activeItem === prevActiveItem;
            var isSelected = activeItem === this.carouselIndicatorID;
            return areTheSame && isSelected;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props3 = this.props,
                assistiveText = _props3.assistiveText,
                description = _props3.description,
                header = _props3.header,
                href = _props3.href,
                style = _props3.style;

            var hasContent = !!(header || description);
            return _react2.default.createElement(
                'div',
                {
                    id: this.carouselImageID,
                    className: this.getContainerClassName(),
                    role: 'tabpanel',
                    'aria-hidden': this.getAriaHidden(),
                    'aria-labelledby': this.carouselIndicatorID,
                    style: style
                },
                _react2.default.createElement(
                    'a',
                    {
                        href: href,
                        className: 'rainbow-carousel-image',
                        tabIndex: this.getTabIndex(),
                        ref: this.itemRef
                    },
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-carousel-image_content-image-container' },
                        _react2.default.createElement('div', { className: 'rainbow-carousel-image_image', style: this.getImageSrc() }),
                        _react2.default.createElement(_AssistiveText2.default, { text: assistiveText }),
                        _react2.default.createElement(
                            _RenderIf2.default,
                            { isTrue: hasContent },
                            _react2.default.createElement(
                                'div',
                                { className: 'rainbow-carousel-image_content' },
                                _react2.default.createElement(
                                    _RenderIf2.default,
                                    { isTrue: !!header },
                                    _react2.default.createElement(
                                        'h2',
                                        { className: 'rainbow-carousel-image_content-title' },
                                        header
                                    )
                                ),
                                _react2.default.createElement(
                                    _RenderIf2.default,
                                    { isTrue: !!description },
                                    _react2.default.createElement(
                                        'p',
                                        null,
                                        description
                                    )
                                )
                            )
                        )
                    )
                )
            );
        }
    }], [{
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(props, state) {
            var activeItem = props.activeItem;
            var stateActiveItem = state.activeItem;

            var newState = {
                activeItem: activeItem,
                prevActiveItem: stateActiveItem
            };
            var isNotTheSameActive = state.activeItem !== newState.activeItem;
            var isNotTheSamePrev = state.prevActiveItem !== newState.prevActiveItem;
            var isNotTheSameState = isNotTheSameActive || isNotTheSamePrev;
            if (isNotTheSameState) {
                return newState;
            }
            return null;
        }
    }]);

    return Item;
}(_react.Component);

function CarouselImage(props) {
    return _react2.default.createElement(
        _context.Consumer,
        null,
        function (value) {
            return _react2.default.createElement(Item, _extends({}, props, value));
        }
    );
}

CarouselImage.propTypes = {
    /** The URL for the image. */
    src: _propTypes2.default.string,
    /** The header can include text or another component,
     * and is displayed in the top of the content section. */
    header: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The description can include text or another component,
     * and is displayed below the header in the content section. */
    description: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** A description for assistive sreen readers. */
    assistiveText: _propTypes2.default.string,
    /** The URL of the page that the card goes to. */
    href: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

CarouselImage.defaultProps = {
    src: undefined,
    header: undefined,
    description: undefined,
    assistiveText: undefined,
    href: undefined,
    className: undefined,
    style: undefined
};
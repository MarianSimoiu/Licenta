'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = ProgressStep;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ButtonIcon = require('../ButtonIcon');

var _ButtonIcon2 = _interopRequireDefault(_ButtonIcon);

var _context = require('../ProgressIndicator/context');

var _doneIcon = require('./doneIcon');

var _doneIcon2 = _interopRequireDefault(_doneIcon);

var _errorIcon = require('./errorIcon');

var _errorIcon2 = _interopRequireDefault(_errorIcon);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable react/prop-types */


var iconMap = {
    Error: function Error() {
        return _react2.default.createElement(_errorIcon2.default, null);
    },
    Completed: function Completed() {
        return _react2.default.createElement(_doneIcon2.default, null);
    },
    Active: function Active() {
        return _react2.default.createElement('div', { className: 'rainbow-progress-step--is-active_icon' });
    },
    Inactive: function Inactive() {
        return _react2.default.createElement('div', { className: 'rainbow-progress-step_marker_icon' });
    }
};

var StepItem = function (_Component) {
    _inherits(StepItem, _Component);

    function StepItem(props) {
        _classCallCheck(this, StepItem);

        var _this = _possibleConstructorReturn(this, (StepItem.__proto__ || Object.getPrototypeOf(StepItem)).call(this, props));

        _this.handleOnClick = _this.handleOnClick.bind(_this);
        _this.setStepState = _this.setStepState.bind(_this);
        _this.state = {
            stepState: 'Inactive'
        };
        return _this;
    }

    _createClass(StepItem, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var _props = this.props,
                privateRegisterStep = _props.privateRegisterStep,
                name = _props.name;

            return setTimeout(function () {
                return privateRegisterStep({
                    name: name,
                    onSetStepState: _this2.setStepState
                });
            }, 0);
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(_ref) {
            var prevCurrentStepName = _ref.currentStepName;
            var _props2 = this.props,
                currentStepName = _props2.currentStepName,
                name = _props2.name;

            if (prevCurrentStepName !== currentStepName) {
                this.props.setChildrenState({
                    name: name,
                    onSetStepState: this.setStepState
                });
            }
        }
    }, {
        key: 'setStepState',
        value: function setStepState(stepState) {
            var hasError = this.props.hasError;

            if (hasError) {
                return this.setState({ stepState: 'Error' });
            }
            return this.setState({ stepState: stepState });
        }
    }, {
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-progress-step', className);
        }
    }, {
        key: 'getButtonClassNames',
        value: function getButtonClassNames() {
            var stepState = this.state.stepState;

            return (0, _classnames2.default)({
                'rainbow-progress-step_marker': stepState === 'Inactive',
                'rainbow-progress-step--is-completed': stepState === 'Completed',
                'rainbow-progress-step--is-active': stepState === 'Active',
                'rainbow-progress-step--error': stepState === 'Error'
            });
        }
    }, {
        key: 'getAssistiveText',
        value: function getAssistiveText() {
            var label = this.props.label;
            var stepState = this.state.stepState;


            if (label && stepState !== 'Inactive') {
                return label + ' - ' + stepState;
            }
            if (label) {
                return label;
            }
            if (stepState !== 'Inactive') {
                return stepState;
            }
            return '';
        }
    }, {
        key: 'getIcon',
        value: function getIcon() {
            var stepState = this.state.stepState;

            if (iconMap[stepState]) {
                return iconMap[stepState]();
            }
            return null;
        }
    }, {
        key: 'handleOnClick',
        value: function handleOnClick(event) {
            var _props3 = this.props,
                privateOnClick = _props3.privateOnClick,
                name = _props3.name;

            return privateOnClick(event, name);
        }
    }, {
        key: 'render',
        value: function render() {
            var label = this.props.label;


            return _react2.default.createElement(
                'li',
                { className: this.getContainerClassNames() },
                _react2.default.createElement(_ButtonIcon2.default, {
                    icon: this.getIcon(),
                    className: this.getButtonClassNames(),
                    onClick: this.handleOnClick,
                    assistiveText: this.getAssistiveText()
                }),
                _react2.default.createElement(
                    'span',
                    { className: 'rainbow-progress-step_label' },
                    label
                )
            );
        }
    }]);

    return StepItem;
}(_react.Component);

function ProgressStep(props) {
    return _react2.default.createElement(
        _context.Consumer,
        null,
        function (context) {
            return _react2.default.createElement(StepItem, _extends({}, props, context));
        }
    );
}

ProgressStep.propTypes = {
    /** The name is used to determine which ProgressStep is active. */
    name: _propTypes2.default.string,
    /** Text label for the ProgressStep. */
    label: _propTypes2.default.node,
    /** Indicates whether the current step is in error state and displays a warning icon
     * on the step indicator. This value defaults to false. */
    hasError: _propTypes2.default.bool,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

ProgressStep.defaultProps = {
    name: '',
    label: '',
    hasError: false,
    className: undefined,
    style: undefined
};
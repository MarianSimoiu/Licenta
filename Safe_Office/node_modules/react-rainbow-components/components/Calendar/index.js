'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _Select = require('./../Select');

var _Select2 = _interopRequireDefault(_Select);

var _ButtonIcon = require('./../ButtonIcon');

var _ButtonIcon2 = _interopRequireDefault(_ButtonIcon);

var _rightArrow = require('./icons/rightArrow');

var _rightArrow2 = _interopRequireDefault(_rightArrow);

var _leftArrow = require('./icons/leftArrow');

var _leftArrow2 = _interopRequireDefault(_leftArrow);

var _daysOfWeek = require('./daysOfWeek');

var _daysOfWeek2 = _interopRequireDefault(_daysOfWeek);

var _month = require('./month');

var _month2 = _interopRequireDefault(_month);

var _helpers = require('./helpers');

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Calendar provide a simple way to select a single date.
 */
var Calendar = function (_Component) {
    _inherits(Calendar, _Component);

    function Calendar(props) {
        _classCallCheck(this, Calendar);

        var _this = _possibleConstructorReturn(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this, props));

        _this.state = {
            currentMonth: (0, _helpers.getFirstDayMonth)((0, _helpers.normalizeDate)(props.value))
        };
        _this.previousMonth = _this.previousMonth.bind(_this);
        _this.nextMonth = _this.nextMonth.bind(_this);
        _this.handleYearChange = _this.handleYearChange.bind(_this);
        return _this;
    }

    _createClass(Calendar, [{
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
            var prevValue = prevProps.value;
            var value = this.props.value;

            var normalizedDate = (0, _helpers.normalizeDate)(value);
            if ((0, _helpers.formatDate)((0, _helpers.normalizeDate)(prevValue)) !== (0, _helpers.formatDate)(normalizedDate)) {
                this.updateCurrentMonth(normalizedDate);
            }
        }
    }, {
        key: 'updateCurrentMonth',
        value: function updateCurrentMonth(value) {
            this.setState({
                currentMonth: (0, _helpers.getFirstDayMonth)(value)
            });
        }
    }, {
        key: 'nextMonth',
        value: function nextMonth() {
            this.setState({
                currentMonth: (0, _helpers.addMonths)(this.state.currentMonth, 1)
            });
        }
    }, {
        key: 'previousMonth',
        value: function previousMonth() {
            this.setState({
                currentMonth: (0, _helpers.addMonths)(this.state.currentMonth, -1)
            });
        }
    }, {
        key: 'handleYearChange',
        value: function handleYearChange(event) {
            var year = +event.target.value;
            var newMonth = new Date(this.state.currentMonth);
            newMonth.setFullYear(year);
            this.setState({
                currentMonth: newMonth
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var currentMonth = this.state.currentMonth;
            var _props = this.props,
                onChange = _props.onChange,
                value = _props.value,
                minDate = _props.minDate,
                maxDate = _props.maxDate,
                className = _props.className,
                style = _props.style;

            var formattedMonth = (0, _helpers.getFormattedMonth)(currentMonth);
            var currentYear = currentMonth.getFullYear();
            var yearsRange = (0, _helpers.getYearsRange)({
                minDate: minDate,
                maxDate: maxDate,
                currentMonth: currentMonth.getMonth()
            });
            var lastYearItem = yearsRange[yearsRange.length - 1];
            var maxSelectableDate = maxDate || new Date(lastYearItem.value + 1, 0, 1);
            var disableNextMonth = (0, _helpers.addMonths)(currentMonth, 1) > maxSelectableDate;
            var minSelectableDate = minDate || new Date(yearsRange[0].value, 0, 1);
            var prevDate = (0, _helpers.getLastDayMonth)((0, _helpers.addMonths)(currentMonth, -1));
            var disablePreviousMonth = prevDate < minSelectableDate;

            return _react2.default.createElement(
                'section',
                { className: className, style: style },
                _react2.default.createElement(
                    'div',
                    { className: 'rainbow-calendar_controls-container' },
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-calendar_month-container' },
                        _react2.default.createElement(_ButtonIcon2.default, {
                            onClick: this.previousMonth,
                            size: 'medium',
                            disabled: disablePreviousMonth,
                            icon: _react2.default.createElement(_leftArrow2.default, null),
                            assistiveText: 'Previous Month'
                        }),
                        _react2.default.createElement(
                            'h3',
                            { className: 'rainbow-calendar_month-text', id: 'month' },
                            formattedMonth
                        ),
                        _react2.default.createElement(_ButtonIcon2.default, {
                            onClick: this.nextMonth,
                            size: 'medium',
                            disabled: disableNextMonth,
                            icon: _react2.default.createElement(_rightArrow2.default, null),
                            assistiveText: 'Next Month'
                        })
                    ),
                    _react2.default.createElement(_Select2.default, {
                        label: 'select year',
                        hideLabel: true,
                        className: 'rainbow-calendar_select-year',
                        value: currentYear,
                        options: yearsRange,
                        onChange: this.handleYearChange
                    })
                ),
                _react2.default.createElement(
                    'table',
                    { role: 'grid', 'aria-labelledby': 'month' },
                    _react2.default.createElement(_daysOfWeek2.default, null),
                    _react2.default.createElement(_month2.default, {
                        value: (0, _helpers.normalizeDate)(value),
                        firstDayMonth: currentMonth,
                        minDate: minDate,
                        maxDate: maxDate,
                        onChange: onChange
                    })
                )
            );
        }
    }]);

    return Calendar;
}(_react.Component);

exports.default = Calendar;


Calendar.propTypes = {
    /** Sets the date for the Calendar programmatically. */
    value: _propTypes2.default.oneOfType([_propTypes2.default.instanceOf(Date), _propTypes2.default.string]),
    /** The ending of a range of valid dates. The range includes the endDate.
     * The default value is current date + 100 years. */
    maxDate: _propTypes2.default.instanceOf(Date),
    /** The beginning of a range of valid dates. The range includes the startDate.
     * The default value is current date - 100 years. */
    minDate: _propTypes2.default.instanceOf(Date),
    /** The action triggered when a value attribute changes. */
    onChange: _propTypes2.default.func,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

Calendar.defaultProps = {
    value: new Date(),
    minDate: undefined,
    maxDate: undefined,
    onChange: function onChange() {},
    className: undefined,
    style: undefined
};
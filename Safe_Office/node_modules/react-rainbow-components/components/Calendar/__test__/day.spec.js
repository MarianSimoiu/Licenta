'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _day = require('../day');

var _day2 = _interopRequireDefault(_day);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Day', function () {
    it('should render the right day', function () {
        var date = new Date('04/24/2019');
        var firstDayMonth = new Date('04/01/2019');
        var component = (0, _enzyme.mount)(_react2.default.createElement(_day2.default, { date: date, firstDayMonth: firstDayMonth }));
        expect(component.find('button').text()).toBe('24');
    });
    it('should set the right class names in button element when is selected', function () {
        var date = new Date('04/24/2019');
        var firstDayMonth = new Date('04/01/2019');
        var component = (0, _enzyme.mount)(_react2.default.createElement(_day2.default, { date: date, firstDayMonth: firstDayMonth, isSelected: true }));
        expect(component.find('button').prop('className')).toBe('rainbow-calendar_day-button rainbow-calendar_day-button--selected');
    });
    it('should call onChange with the right date when click the button', function () {
        var date = new Date('04/24/2019');
        var firstDayMonth = new Date('04/01/2019');
        var onChangeMockFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_day2.default, { date: date, firstDayMonth: firstDayMonth, onChange: onChangeMockFn }));
        component.find('button').simulate('click');
        expect(onChangeMockFn).toHaveBeenCalledWith(new Date('04/24/2019'));
    });
    it('should render the right day when is adjacent', function () {
        var date = new Date('03/29/2019');
        var firstDayMonth = new Date('04/01/2019');
        var component = (0, _enzyme.mount)(_react2.default.createElement(_day2.default, { date: date, firstDayMonth: firstDayMonth }));
        expect(component.find('td').prop('aria-selected')).toBe('false');
        expect(component.find('td').text()).toBe('29');
    });
    it('should render the right day when is maxDate is less than date', function () {
        var date = new Date('04/24/2019');
        var firstDayMonth = new Date('04/01/2019');
        var maxDate = new Date('04/23/2019');
        var component = (0, _enzyme.mount)(_react2.default.createElement(_day2.default, { date: date, firstDayMonth: firstDayMonth, maxDate: maxDate }));
        expect(component.find('td').prop('aria-selected')).toBe('false');
        expect(component.find('td').text()).toBe('24');
    });
    it('should render the right day when is minDate is greater than date', function () {
        var date = new Date('04/24/2019');
        var firstDayMonth = new Date('04/01/2019');
        var minDate = new Date('04/25/2019');
        var component = (0, _enzyme.mount)(_react2.default.createElement(_day2.default, { date: date, firstDayMonth: firstDayMonth, minDate: minDate }));
        expect(component.find('td').prop('aria-selected')).toBe('false');
        expect(component.find('td').text()).toBe('24');
    });
});
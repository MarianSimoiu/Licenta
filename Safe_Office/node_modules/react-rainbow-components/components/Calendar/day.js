'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = Day;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function Day(props) {
    var date = props.date,
        firstDayMonth = props.firstDayMonth,
        isSelected = props.isSelected,
        minDate = props.minDate,
        maxDate = props.maxDate,
        onChange = props.onChange;

    var day = date.getDate();
    var isAdjacentDate = date.getMonth() !== firstDayMonth.getMonth();
    var isDisabled = date > maxDate || date < minDate;

    if (isAdjacentDate || isDisabled) {
        return _react2.default.createElement(
            'td',
            { className: 'rainbow-calendar_day', role: 'gridcell', 'aria-selected': 'false' },
            _react2.default.createElement(
                'span',
                { className: 'rainbow-calendar_day-adjacent' },
                day
            )
        );
    }

    var buttonClassNames = (0, _classnames2.default)('rainbow-calendar_day-button', {
        'rainbow-calendar_day-button--selected': isSelected
    });

    return _react2.default.createElement(
        'td',
        { className: 'rainbow-calendar_day', role: 'gridcell' },
        _react2.default.createElement(
            'button',
            { onClick: function onClick() {
                    return onChange(new Date(date));
                }, className: buttonClassNames },
            day
        )
    );
}

Day.propTypes = {
    date: _propTypes2.default.instanceOf(Date),
    firstDayMonth: _propTypes2.default.instanceOf(Date),
    minDate: _propTypes2.default.instanceOf(Date),
    maxDate: _propTypes2.default.instanceOf(Date),
    isSelected: _propTypes2.default.bool,
    onChange: _propTypes2.default.func
};

Day.defaultProps = {
    date: undefined,
    firstDayMonth: undefined,
    minDate: undefined,
    maxDate: undefined,
    isSelected: false,
    onChange: function onChange() {}
};
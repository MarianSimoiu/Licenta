'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('./../');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<MenuItem/>', function () {
    it('should render the label passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { label: 'item label' }));
        expect(component.text()).toBe('item label');
    });
    it('should set the title passed in the label container', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { title: 'item title' }));
        expect(component.find('span[className="rainbow-menu-item_icon-container"]').prop('title')).toBe('item title');
    });
    it('should pass the right props to the left and right Icon', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { icon: _react2.default.createElement('svg', null), iconPosition: 'right' }));
        expect(component.find('Icon[data-id="menu-item-left-icon"]').props()).toEqual(expect.objectContaining({
            icon: _react2.default.createElement('svg', null),
            isVisible: false,
            position: 'right'
        }));
        expect(component.find('Icon[data-id="menu-item-right-icon"]').props()).toEqual(expect.objectContaining({
            icon: _react2.default.createElement('svg', null),
            isVisible: true,
            position: 'right'
        }));
    });
    it('should set the isVisible to false to left and right Icon when the iconName is not passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, null));
        expect(component.find('Icon[data-id="menu-item-left-icon"]').prop('isVisible')).toBe(false);
        expect(component.find('Icon[data-id="menu-item-right-icon"]').prop('isVisible')).toBe(false);
    });
    it('should pass the right props to the anchor element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { disabled: true }));
        expect(component.find('a').props()).toEqual(expect.objectContaining({
            'aria-disabled': true,
            href: 'javascript:void(0);',
            role: 'menuitem'
        }));
    });
    it('should fire an event when the li elment is clicked', function () {
        var onClickMockFn = jest.fn();
        var privateOnCloseMockFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { onClick: onClickMockFn, privateOnClose: privateOnCloseMockFn }));
        component.find('li').simulate('click');
        expect(onClickMockFn).toHaveBeenCalledTimes(1);
        expect(privateOnCloseMockFn).toHaveBeenCalledTimes(1);
    });
    it('should not fire anything when the li elment is clicked but disabled is passed', function () {
        var onClickMockFn = jest.fn();
        var privateOnCloseMockFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { disabled: true, onClick: onClickMockFn, privateOnClose: privateOnCloseMockFn }));
        component.find('li').simulate('click');
        expect(onClickMockFn).not.toHaveBeenCalled();
        expect(privateOnCloseMockFn).not.toHaveBeenCalled();
    });
    it('should set the role as presentation in the li element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { label: 'item label' }));
        expect(component.find('li').prop('role')).toBe('presentation');
    });
    it('should set the role as separator in the li element when the variant is header', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { variant: 'header' }));
        expect(component.find('li').prop('role')).toBe('separator');
    });
    it('should set the title passed in the li element when the variant is header', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { variant: 'header', title: 'header title' }));
        expect(component.find('li').prop('title')).toBe('header title');
    });
    it('should have the right class names when variant is header', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { variant: 'header' }));
        expect(component.find('li').prop('className')).toBe('rainbow-menu-item_header');
    });
    it('should have the right class names when variant is not passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { label: 'menu item 2' }));
        expect(component.find('li').prop('className')).toBe('rainbow-menu-item');
    });
}); /* eslint-disable no-script-url */
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = MenuItem;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _context = require('./../PrimitiveMenu/context');

var _icon = require('./icon');

var _icon2 = _interopRequireDefault(_icon);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-script-url, react/prop-types */


var Item = function (_Component) {
    _inherits(Item, _Component);

    function Item(props) {
        _classCallCheck(this, Item);

        var _this = _possibleConstructorReturn(this, (Item.__proto__ || Object.getPrototypeOf(Item)).call(this, props));

        _this.itemRef = _react2.default.createRef();
        _this.handleClick = _this.handleClick.bind(_this);
        _this.handleHover = _this.handleHover.bind(_this);
        return _this;
    }

    _createClass(Item, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this2 = this;

            var _props = this.props,
                privateRegisterChild = _props.privateRegisterChild,
                disabled = _props.disabled,
                variant = _props.variant;

            var isHeader = variant === 'header';
            if (disabled || isHeader) {
                return null;
            }
            return setTimeout(function () {
                return privateRegisterChild(_this2.itemRef.current);
            }, 0);
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var privateUnregisterChild = this.props.privateUnregisterChild;

            return privateUnregisterChild(this.itemRef.current);
        }
    }, {
        key: 'getHeaderClassNames',
        value: function getHeaderClassNames() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-menu-item_header', className);
        }
    }, {
        key: 'getItemClassNames',
        value: function getItemClassNames() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-menu-item', className);
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            var _props2 = this.props,
                disabled = _props2.disabled,
                onClick = _props2.onClick,
                privateOnClose = _props2.privateOnClose;

            if (disabled) {
                return null;
            }
            onClick(event);
            return privateOnClose();
        }
    }, {
        key: 'handleHover',
        value: function handleHover(event) {
            var _props3 = this.props,
                privateOnHover = _props3.privateOnHover,
                disabled = _props3.disabled;

            if (disabled) {
                return null;
            }
            return privateOnHover(event, this.itemRef.current);
        }
    }, {
        key: 'click',
        value: function click() {
            this.itemRef.current.click();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props4 = this.props,
                style = _props4.style,
                label = _props4.label,
                title = _props4.title,
                variant = _props4.variant,
                icon = _props4.icon,
                iconPosition = _props4.iconPosition,
                disabled = _props4.disabled;


            if (variant === 'header') {
                return _react2.default.createElement(
                    'li',
                    {
                        className: this.getHeaderClassNames(),
                        style: style,
                        title: title,
                        role: 'separator'
                    },
                    _react2.default.createElement(
                        'span',
                        { className: 'rainbow-menu-item_header-label' },
                        label
                    )
                );
            }

            var hasLeftIcon = !!(icon && iconPosition === 'left');
            var hasRightIcon = !!(icon && iconPosition === 'right');

            return _react2.default.createElement(
                'li',
                {
                    className: this.getItemClassNames(),
                    style: style,
                    role: 'presentation',
                    onClick: this.handleClick,
                    onMouseEnter: this.handleHover
                },
                _react2.default.createElement(
                    'a',
                    {
                        href: 'javascript:void(0);',
                        role: 'menuitem',
                        'aria-disabled': disabled,
                        ref: this.itemRef
                    },
                    _react2.default.createElement(
                        'span',
                        { className: 'rainbow-menu-item_icon-container', title: title },
                        _react2.default.createElement(_icon2.default, {
                            'data-id': 'menu-item-left-icon',
                            icon: icon,
                            isVisible: hasLeftIcon,
                            position: iconPosition
                        }),
                        label
                    ),
                    _react2.default.createElement(_icon2.default, {
                        'data-id': 'menu-item-right-icon',
                        icon: icon,
                        isVisible: hasRightIcon,
                        position: iconPosition
                    })
                )
            );
        }
    }]);

    return Item;
}(_react.Component);

/**
 * Represents a list item in a menu.
 */


function MenuItem(props) {
    return _react2.default.createElement(
        _context.Consumer,
        null,
        function (values) {
            return _react2.default.createElement(Item, _extends({}, props, values));
        }
    );
}

MenuItem.propTypes = {
    /** Text of the menu item. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).isRequired,
    /** The variant changes the type of menu item. Accepted variants include default and header.
     * This value defaults to default. */
    variant: _propTypes2.default.oneOf(['default', 'header']),
    /** The icon to show if it is passed. It must be a svg icon or a font icon. */
    icon: _propTypes2.default.node,
    /** Describes the position of the icon with respect to body. Options include left and right.
     * This value defaults to left. */
    iconPosition: _propTypes2.default.oneOf(['left', 'right']),
    /** If true the menu item is not actionable and is shown as disabled. */
    disabled: _propTypes2.default.bool,
    /** The action triggered when the menu item is clicked. */
    onClick: _propTypes2.default.func,
    /** Displays tooltip text when the mouse moves over the element. */
    title: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

MenuItem.defaultProps = {
    label: null,
    variant: 'default',
    icon: null,
    iconPosition: 'left',
    disabled: false,
    onClick: function onClick() {},
    title: undefined,
    className: undefined,
    style: undefined
};
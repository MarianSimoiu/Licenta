'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * VerticalSectionOverflow page object class.
 * @class
 */
var PageVerticalSectionOverflow = function () {
  /**
   * Create a new VerticalSectionOverflow page object.
   * @constructor
   * @param {string} rootElement - The selector of the VerticalSectionOverflow root element.
   */
  function PageVerticalSectionOverflow(rootElement) {
    _classCallCheck(this, PageVerticalSectionOverflow);

    this.rootElement = rootElement;
  }

  /**
   * Clicks the vertical section overflow button.
   * @method
   */


  _createClass(PageVerticalSectionOverflow, [{
    key: 'click',
    value: function click() {
      $(this.rootElement).$('.rainbow-vertical-section-overflow_button').click();
    }

    /**
     * Returns true when the overflow section is visible, false otherwise.
     * @method
     * @returns {bool}
     */

  }, {
    key: 'isExpanded',
    value: function isExpanded() {
      return $(this.rootElement).$('[data-id="vertical-overflow"]').isDisplayed();
    }

    /**
     * Wait until the expand transition has finished.
     * @method
     */

  }, {
    key: 'waitUntilExpand',
    value: function waitUntilExpand() {
      var _this = this;

      browser.waitUntil(function () {
        return _this.isExpanded();
      });
    }

    /**
     * Wait until the contract transition has finished.
     * @method
     */

  }, {
    key: 'waitUntilCollapse',
    value: function waitUntilCollapse() {
      var _this2 = this;

      browser.waitUntil(function () {
        return !_this2.isExpanded();
      });
    }

    /**
     * Returns true when the vertical section overflow button has focus.
     * @method
     * @returns {bool}
     */

  }, {
    key: 'hasFocusButton',
    value: function hasFocusButton() {
      return $(this.rootElement).$('.rainbow-vertical-section-overflow_button').isFocused();
    }
  }]);

  return PageVerticalSectionOverflow;
}();

module.exports = PageVerticalSectionOverflow;
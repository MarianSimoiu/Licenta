'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _utils = require('./../../libs/utils');

var _AssistiveText = require('./../AssistiveText');

var _AssistiveText2 = _interopRequireDefault(_AssistiveText);

var _context = require('./context');

var _getMaxHeight = require('./getMaxHeight');

var _getMaxHeight2 = _interopRequireDefault(_getMaxHeight);

var _description = require('./description');

var _description2 = _interopRequireDefault(_description);

var _rightArrow = require('./rightArrow');

var _rightArrow2 = _interopRequireDefault(_rightArrow);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents an overflow of items from a preceding VerticalNavigationSection,
 * with the ability to toggle visibility.
 * @category Layout
 */
var VerticalSectionOverflow = function (_Component) {
    _inherits(VerticalSectionOverflow, _Component);

    function VerticalSectionOverflow(props) {
        _classCallCheck(this, VerticalSectionOverflow);

        var _this = _possibleConstructorReturn(this, (VerticalSectionOverflow.__proto__ || Object.getPrototypeOf(VerticalSectionOverflow)).call(this, props));

        _this.searchResultsId = (0, _utils.uniqueId)('search-results');
        _this.state = {
            isExpanded: props.expanded
        };
        _this.toggleOverflow = _this.toggleOverflow.bind(_this);
        return _this;
    }

    _createClass(VerticalSectionOverflow, [{
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var className = this.props.className;
            var isExpanded = this.state.isExpanded;

            return (0, _classnames2.default)('rainbow-vertical-section-overflow_container', {
                'rainbow-vertical-section-overflow_container--expanded': isExpanded
            }, className);
        }
    }, {
        key: 'getButtonClassNames',
        value: function getButtonClassNames() {
            var isExpanded = this.state.isExpanded;
            var description = this.props.description;

            return (0, _classnames2.default)('rainbow-vertical-section-overflow_button', {
                'rainbow-vertical-section-overflow_button--expanded': isExpanded && description
            });
        }
    }, {
        key: 'getOverflowClassName',
        value: function getOverflowClassName() {
            var isExpanded = this.state.isExpanded;

            if (isExpanded) {
                return 'rainbow-vertical-section-overflow--show';
            }
            return 'rainbow-vertical-section-overflow--hide';
        }
    }, {
        key: 'toggleOverflow',
        value: function toggleOverflow(event) {
            var isExpanded = this.state.isExpanded;
            var onToggleSection = this.props.onToggleSection;

            if (typeof onToggleSection === 'function') {
                return onToggleSection(event);
            }
            return this.setState({ isExpanded: !isExpanded });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                label = _props.label,
                description = _props.description,
                style = _props.style,
                assistiveText = _props.assistiveText,
                children = _props.children;
            var isExpanded = this.state.isExpanded;

            var sectionMaxHeight = {
                maxHeight: (0, _getMaxHeight2.default)(children, isExpanded)
            };

            return _react2.default.createElement(
                'div',
                {
                    'data-id': 'vertical-overflow-container',
                    className: this.getContainerClassNames(),
                    style: style
                },
                _react2.default.createElement(
                    'button',
                    {
                        className: this.getButtonClassNames(),
                        'aria-controls': this.searchResultsId,
                        'aria-expanded': isExpanded,
                        onClick: this.toggleOverflow
                    },
                    _react2.default.createElement(
                        'div',
                        { className: 'rainbow-vertical-section-overflow_action-text' },
                        _react2.default.createElement(
                            'span',
                            { className: 'rainbow-vertical-section-overflow_action-label' },
                            label
                        ),
                        _react2.default.createElement(_description2.default, { isExpanded: isExpanded, description: description }),
                        _react2.default.createElement(_AssistiveText2.default, { text: assistiveText })
                    ),
                    _react2.default.createElement(_rightArrow2.default, { isExpanded: isExpanded })
                ),
                _react2.default.createElement(
                    'div',
                    {
                        'data-id': 'vertical-overflow',
                        id: this.searchResultsId,
                        className: this.getOverflowClassName(),
                        style: sectionMaxHeight
                    },
                    _react2.default.createElement(
                        _context.Provider,
                        { value: isExpanded },
                        _react2.default.createElement(
                            'ul',
                            null,
                            children
                        )
                    )
                )
            );
        }
    }], [{
        key: 'getDerivedStateFromProps',
        value: function getDerivedStateFromProps(nextProps, state) {
            var expanded = nextProps.expanded,
                onToggleSection = nextProps.onToggleSection;

            if (expanded !== state.isExpanded && typeof onToggleSection === 'function') {
                return {
                    isExpanded: expanded
                };
            }
            return null;
        }
    }]);

    return VerticalSectionOverflow;
}(_react.Component);

exports.default = VerticalSectionOverflow;


VerticalSectionOverflow.propTypes = {
    /** The label to show when the section is collapsed. */
    label: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The description to show when the section is collapsed. */
    description: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The state of the overflow. */
    expanded: _propTypes2.default.bool,
    /** A description for assistive sreen readers. */
    assistiveText: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied for the outer element. */
    style: _propTypes2.default.object,
    /** Action fired when a component is clicked. */
    onToggleSection: _propTypes2.default.func,
    /**
     * This prop that should not be visible in the documentation.
     * @ignore
     */
    children: _propTypes2.default.node
};

VerticalSectionOverflow.defaultProps = {
    label: '',
    description: '',
    expanded: false,
    className: undefined,
    style: undefined,
    assistiveText: undefined,
    children: null,
    onToggleSection: undefined
};
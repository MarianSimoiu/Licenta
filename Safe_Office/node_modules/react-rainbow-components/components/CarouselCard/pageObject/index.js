'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageCarouselCardIndicator = require('./indicator');

/**
 * CarouselCard page object class.
 * @class
 * @tutorial carouselCard
 */

var PageCarouselCard = function () {
    /**
     * Create a new CarouselCard page object.
     * @constructor
     * @param {string} rootElement - The selector of the CarouselCard root element.
     */
    function PageCarouselCard(rootElement) {
        _classCallCheck(this, PageCarouselCard);

        this.rootElement = rootElement;
    }

    /**
     * Returns a new Indicator page object of the element in item position.
     * @method
     * @param {number} itemPosition - The base 0 index of the tab item.
     */


    _createClass(PageCarouselCard, [{
        key: 'getIndicatorItem',
        value: function getIndicatorItem(itemPosition) {
            var items = $(this.rootElement).$$('.rainbow-carousel_indicators-container');
            if (items[itemPosition]) {
                return new PageCarouselCardIndicator(this.rootElement + ' .rainbow-carousel_indicators-container:nth-child(' + (itemPosition + 1) + ')');
            }
            return null;
        }
    }]);

    return PageCarouselCard;
}();

module.exports = PageCarouselCard;
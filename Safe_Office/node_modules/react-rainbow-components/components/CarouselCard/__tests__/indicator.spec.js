'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _indicator = require('../indicators/indicator');

var _indicator2 = _interopRequireDefault(_indicator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Indicator />', function () {
    it('should set the right props if the indicator is selected', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_indicator2.default, {
            selectedItem: 'indicator-1',
            indicatorID: 'indicator-1',
            containerID: 'container-1',
            header: 'Header'
        }));
        var anchorComponent = component.find('a.rainbow-carousel_indicator.rainbow-carousel_indicator--active');

        expect(anchorComponent.exists()).toBe(true);
        expect(anchorComponent.prop('aria-selected')).toBe(true);
        expect(anchorComponent.prop('tabIndex')).toBe(0);
    });
    it('should set the right props if the indicator is not selected', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_indicator2.default, {
            selectedItem: 'indicator-2',
            indicatorID: 'indicator-1',
            containerID: 'container-1',
            header: 'Header'
        }));
        var anchorComponent = component.find('a.rainbow-carousel_indicator');

        expect(anchorComponent.prop('aria-selected')).toBe(false);
        expect(anchorComponent.prop('tabIndex')).toBe(-1);
    });
    it('should set the assistive text as title to the anchor element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_indicator2.default, {
            selectedItem: 'indicator-1',
            indicatorID: 'indicator-1',
            containerID: 'container-1',
            header: 'Header'
        }));
        var anchorComponent = component.find('a.rainbow-carousel_indicator');

        expect(anchorComponent.text()).toBe('Header Tab');
        expect(anchorComponent.prop('title')).toBe('Header Tab');
    });
    it('should set title and text in AssistiveText to undefined when header is not a string', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_indicator2.default, {
            selectedItem: 'indicator-1',
            indicatorID: 'indicator-1',
            containerID: 'container-1',
            header: _react2.default.createElement(
                'span',
                null,
                'Header'
            )
        }));
        var anchorComponent = component.find('a.rainbow-carousel_indicator');

        expect(anchorComponent.text()).toBe('');
        expect(anchorComponent.prop('title')).toBe(undefined);
    });
    it('should set the role as tab in anchor element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_indicator2.default, {
            selectedItem: 'indicator-1',
            indicatorID: 'indicator-1',
            containerID: 'container-1',
            header: _react2.default.createElement(
                'span',
                null,
                'Header'
            )
        }));
        var anchorComponent = component.find('a.rainbow-carousel_indicator');

        expect(anchorComponent.prop('role')).toBe('tab');
    });
    it('should set the right accesivillity props', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_indicator2.default, {
            selectedItem: 'indicator-1',
            indicatorID: 'indicator-1',
            containerID: 'container-1',
            header: 'Header'
        }));
        var anchorComponent = component.find('a.rainbow-carousel_indicator');

        expect(anchorComponent.prop('id')).toBe('indicator-1');
        expect(anchorComponent.prop('aria-controls')).toBe('container-1');
    });
    it('should call the function passed in onSelect prop', function () {
        var onSelectMockFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_indicator2.default, {
            selectedItem: 'indicator-1',
            indicatorID: 'indicator-1',
            containerID: 'container-1',
            header: 'Header',
            onSelect: onSelectMockFn
        }));
        var anchorComponent = component.find('a.rainbow-carousel_indicator');
        anchorComponent.simulate('click');

        expect(onSelectMockFn).toHaveBeenCalledWith('indicator-1');
    });
});
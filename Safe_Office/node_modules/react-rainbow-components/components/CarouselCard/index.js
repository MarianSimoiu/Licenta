'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _context = require('./context');

var _indicators = require('./indicators');

var _indicators2 = _interopRequireDefault(_indicators);

var _animationButton = require('./animationButton');

var _animationButton2 = _interopRequireDefault(_animationButton);

var _utils = require('./utils');

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-script-url,max-len */


/**
 * A carouselCard allows multiple pieces of featured content to occupy an allocated amount of space.
 */
var CarouselCard = function (_Component) {
    _inherits(CarouselCard, _Component);

    function CarouselCard(props) {
        _classCallCheck(this, CarouselCard);

        var _this = _possibleConstructorReturn(this, (CarouselCard.__proto__ || Object.getPrototypeOf(CarouselCard)).call(this, props));

        _this.container = _react2.default.createRef();
        _this.registerChild = _this.registerChild.bind(_this);
        _this.setActiveItem = _this.setActiveItem.bind(_this);
        _this.handleOnClick = _this.handleOnClick.bind(_this);
        _this.state = {
            childrenRegistred: [],
            activeItem: undefined,
            isAnimationPaused: _this.props.disableAutoScroll,
            privateRegisterChild: _this.registerChild
        };
        _this.containerRef = _react2.default.createRef();
        return _this;
    }

    _createClass(CarouselCard, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var isAnimationPaused = this.state.isAnimationPaused;

            if (!isAnimationPaused) {
                this.startAnimation();
            }
        }
    }, {
        key: 'getContainerClassName',
        value: function getContainerClassName() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-carousel', className);
        }
    }, {
        key: 'getContainerStyle',
        value: function getContainerStyle() {
            var style = this.props.style;

            return Object.assign({}, (0, _utils.getCarouselCardContainerStyles)(this.container.current), style);
        }
    }, {
        key: 'setActiveItem',
        value: function setActiveItem(id) {
            this.setState({ activeItem: id, isAnimationPaused: true });
        }
    }, {
        key: 'startAnimation',
        value: function startAnimation() {
            var _this2 = this;

            var _props = this.props,
                scrollDuration = _props.scrollDuration,
                disableAutoRefresh = _props.disableAutoRefresh;

            setTimeout(function () {
                var isAnimationPaused = _this2.state.isAnimationPaused;

                if (!isAnimationPaused) {
                    var _state = _this2.state,
                        childrenRegistred = _state.childrenRegistred,
                        activeItem = _state.activeItem;

                    var selectedItemIndex = (0, _utils.getItemIndex)(childrenRegistred, activeItem);
                    var isLastItem = selectedItemIndex === childrenRegistred.length - 1;
                    var nextItem = isLastItem ? 0 : selectedItemIndex + 1;
                    if (isLastItem && disableAutoRefresh) {
                        _this2.setState({ isAnimationPaused: true });
                    } else {
                        _this2.startAnimation();
                        _this2.setState({
                            activeItem: childrenRegistred[nextItem].indicatorID
                        });
                    }
                }
            }, scrollDuration * 1000);
        }
    }, {
        key: 'handleOnClick',
        value: function handleOnClick() {
            var isAnimationPaused = this.state.isAnimationPaused;

            if (isAnimationPaused) {
                this.startAnimation();
            }
            this.setState({ isAnimationPaused: !isAnimationPaused });
        }
    }, {
        key: 'registerChild',
        value: function registerChild(child) {
            var childrenRegistred = this.state.childrenRegistred;

            var _getChildTabNodes = (0, _utils.getChildTabNodes)(this.containerRef.current),
                _getChildTabNodes2 = _toArray(_getChildTabNodes),
                nodes = _getChildTabNodes2.slice(0);

            var newChildren = (0, _utils.insertChildOrderly)(childrenRegistred, child, nodes);
            this.setState({
                childrenRegistred: newChildren,
                activeItem: newChildren[0].indicatorID
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                children = _props2.children,
                id = _props2.id;
            var _state2 = this.state,
                childrenRegistred = _state2.childrenRegistred,
                activeItem = _state2.activeItem,
                isAnimationPaused = _state2.isAnimationPaused;

            return _react2.default.createElement(
                'div',
                {
                    className: this.getContainerClassName(),
                    style: this.getContainerStyle(),
                    id: id,
                    ref: this.container
                },
                _react2.default.createElement(
                    'span',
                    { className: 'rainbow-carousel_autoplay' },
                    _react2.default.createElement(_animationButton2.default, {
                        onClick: this.handleOnClick,
                        isAnimationPaused: isAnimationPaused
                    })
                ),
                _react2.default.createElement(
                    'div',
                    { className: 'rainbow-carousel_images', ref: this.containerRef },
                    _react2.default.createElement(
                        _context.Provider,
                        { value: this.state },
                        children
                    )
                ),
                _react2.default.createElement(_indicators2.default, {
                    carouselChildren: childrenRegistred,
                    onSelect: this.setActiveItem,
                    selectedItem: activeItem
                })
            );
        }
    }]);

    return CarouselCard;
}(_react.Component);

exports.default = CarouselCard;


CarouselCard.propTypes = {
    /** The auto scroll duration. The default is 5 seconds, after that the next image is displayed. */
    scrollDuration: _propTypes2.default.number,
    /** Specifies whether auto scroll is disabled. The default value is false. */
    disableAutoScroll: _propTypes2.default.bool,
    /** Specifies whether the carousel should stop looping from the beginning after the last item is displayed.
     * The default value is false. */
    disableAutoRefresh: _propTypes2.default.bool,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /**
     * This prop that should not be visible in the documentation.
     * @ignore
     */
    children: _propTypes2.default.node,
    /** The id of the outer element. */
    id: _propTypes2.default.string
};

CarouselCard.defaultProps = {
    scrollDuration: 5,
    disableAutoScroll: false,
    disableAutoRefresh: false,
    className: undefined,
    style: undefined,
    children: null,
    id: undefined
};
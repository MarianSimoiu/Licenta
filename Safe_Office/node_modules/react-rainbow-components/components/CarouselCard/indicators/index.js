'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _constants = require('../../../libs/constants');

var _utils = require('../utils');

var _indicator = require('./indicator');

var _indicator2 = _interopRequireDefault(_indicator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-script-url */


var RIGHT_SIDE = 1;
var LEFT_SIDE = -1;

var Indicators = function (_Component) {
    _inherits(Indicators, _Component);

    function Indicators(props) {
        var _this$keyHandlerMap;

        _classCallCheck(this, Indicators);

        var _this = _possibleConstructorReturn(this, (Indicators.__proto__ || Object.getPrototypeOf(Indicators)).call(this, props));

        _this.handleKeyPressed = _this.handleKeyPressed.bind(_this);
        _this.registerIndicator = _this.registerIndicator.bind(_this);
        _this.keyHandlerMap = (_this$keyHandlerMap = {}, _defineProperty(_this$keyHandlerMap, _constants.RIGHT_KEY, function () {
            return _this.selectIndicator(RIGHT_SIDE);
        }), _defineProperty(_this$keyHandlerMap, _constants.LEFT_KEY, function () {
            return _this.selectIndicator(LEFT_SIDE);
        }), _this$keyHandlerMap);
        _this.state = {
            indicatorsRefs: []
        };
        return _this;
    }

    _createClass(Indicators, [{
        key: 'setAsSelectedIndicator',
        value: function setAsSelectedIndicator(tabIndex) {
            var indicatorsRefs = this.state.indicatorsRefs;

            indicatorsRefs[tabIndex].ref.current.click();
            indicatorsRefs[tabIndex].ref.current.focus();
        }
    }, {
        key: 'registerIndicator',
        value: function registerIndicator(indicator) {
            var indicatorsRefs = this.state.indicatorsRefs;

            var newRefs = indicatorsRefs.concat([indicator]);
            this.setState({ indicatorsRefs: newRefs });
        }
    }, {
        key: 'selectIndicator',
        value: function selectIndicator(side) {
            var selectedItem = this.props.selectedItem;
            var indicatorsRefs = this.state.indicatorsRefs;

            var indicatorIndex = (0, _utils.getItemIndex)(indicatorsRefs, selectedItem);
            if (indicatorIndex === indicatorsRefs.length - 1 && side === RIGHT_SIDE) {
                this.setAsSelectedIndicator(0);
            } else if (indicatorIndex === 0 && side === LEFT_SIDE) {
                this.setAsSelectedIndicator(indicatorsRefs.length - 1);
            } else {
                this.setAsSelectedIndicator(indicatorIndex + side);
            }
        }
    }, {
        key: 'handleKeyPressed',
        value: function handleKeyPressed(event) {
            if (this.keyHandlerMap[event.keyCode]) {
                return this.keyHandlerMap[event.keyCode]();
            }
            return null;
        }
    }, {
        key: 'isSelected',
        value: function isSelected(id) {
            var selectedItem = this.props.selectedItem;

            return selectedItem === id;
        }
    }, {
        key: 'renderIndicators',
        value: function renderIndicators() {
            var _this2 = this;

            var _props = this.props,
                carouselChildren = _props.carouselChildren,
                onSelect = _props.onSelect,
                selectedItem = _props.selectedItem;

            return carouselChildren.map(function (child) {
                return _react2.default.createElement(_indicator2.default, _extends({}, child, {
                    onSelect: onSelect,
                    selectedItem: selectedItem,
                    onCreate: _this2.registerIndicator,
                    key: child.indicatorID
                }));
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(
                'ul',
                {
                    className: 'rainbow-carousel_indicators',
                    role: 'tablist',
                    onKeyDown: this.handleKeyPressed
                },
                this.renderIndicators()
            );
        }
    }]);

    return Indicators;
}(_react.Component);

exports.default = Indicators;


Indicators.propTypes = {
    carouselChildren: _propTypes2.default.array,
    onSelect: _propTypes2.default.func,
    selectedItem: _propTypes2.default.string
};

Indicators.defaultProps = {
    carouselChildren: [],
    onSelect: function onSelect() {},
    selectedItem: undefined
};
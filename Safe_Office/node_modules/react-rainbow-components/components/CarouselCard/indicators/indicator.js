'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _AssistiveText = require('../../AssistiveText');

var _AssistiveText2 = _interopRequireDefault(_AssistiveText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable no-script-url */


function getAssistiveText(header) {
    if (typeof header === 'string') {
        return header + ' Tab';
    }
    return undefined;
}

var Indicator = function (_Component) {
    _inherits(Indicator, _Component);

    function Indicator(props) {
        _classCallCheck(this, Indicator);

        var _this = _possibleConstructorReturn(this, (Indicator.__proto__ || Object.getPrototypeOf(Indicator)).call(this, props));

        _this.indicatorRef = _react2.default.createRef();
        return _this;
    }

    _createClass(Indicator, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props,
                onCreate = _props.onCreate,
                indicatorID = _props.indicatorID;

            onCreate({
                indicatorID: indicatorID,
                ref: this.indicatorRef
            });
        }
    }, {
        key: 'getIndicatorClassName',
        value: function getIndicatorClassName(id) {
            return (0, _classnames2.default)('rainbow-carousel_indicator', {
                'rainbow-carousel_indicator--active': this.isSelected(id)
            });
        }
    }, {
        key: 'getTabIndex',
        value: function getTabIndex(id) {
            if (this.isSelected(id)) {
                return 0;
            }
            return -1;
        }
    }, {
        key: 'isSelected',
        value: function isSelected(id) {
            var selectedItem = this.props.selectedItem;

            return selectedItem === id;
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                indicatorID = _props2.indicatorID,
                containerID = _props2.containerID,
                header = _props2.header,
                onSelect = _props2.onSelect;

            var assistiveText = getAssistiveText(header);
            return _react2.default.createElement(
                'li',
                {
                    className: 'rainbow-carousel_indicators-container',
                    role: 'presentation',
                    key: indicatorID
                },
                _react2.default.createElement(
                    'a',
                    {
                        id: indicatorID,
                        className: this.getIndicatorClassName(indicatorID),
                        href: 'javascript:void(0);',
                        role: 'tab',
                        tabIndex: this.getTabIndex(indicatorID),
                        'aria-selected': this.isSelected(indicatorID),
                        'aria-controls': containerID,
                        title: assistiveText,
                        onClick: function onClick() {
                            return onSelect(indicatorID);
                        },
                        ref: this.indicatorRef
                    },
                    _react2.default.createElement(_AssistiveText2.default, { text: assistiveText })
                )
            );
        }
    }]);

    return Indicator;
}(_react.Component);

exports.default = Indicator;


Indicator.propTypes = {
    indicatorID: _propTypes2.default.string,
    containerID: _propTypes2.default.string,
    header: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    onSelect: _propTypes2.default.func,
    onCreate: _propTypes2.default.func,
    selectedItem: _propTypes2.default.string
};

Indicator.defaultProps = {
    indicatorID: undefined,
    containerID: undefined,
    header: undefined,
    onSelect: function onSelect() {},
    onCreate: function onCreate() {},
    selectedItem: undefined
};
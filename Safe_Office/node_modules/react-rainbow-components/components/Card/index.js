'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = Card;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _cardBody = require('./cardBody');

var _cardBody2 = _interopRequireDefault(_cardBody);

var _header = require('./header');

var _header2 = _interopRequireDefault(_header);

var _RenderIf = require('../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Cards are used to apply a container around a
 * related grouping of information.
 * @category Layout
 */
function Card(props) {
    var className = props.className,
        style = props.style,
        actions = props.actions,
        children = props.children,
        footer = props.footer,
        title = props.title,
        icon = props.icon,
        isLoading = props.isLoading;


    var getContainerClassName = function getContainerClassName() {
        var hasHeader = icon || title || actions;
        return (0, _classnames2.default)('rainbow-card', {
            'rainbow-card--with-header': hasHeader
        }, className);
    };

    return _react2.default.createElement(
        'article',
        { className: getContainerClassName(), style: style },
        _react2.default.createElement(_header2.default, { actions: actions, title: title, icon: icon }),
        _react2.default.createElement(
            _cardBody2.default,
            { isLoading: isLoading },
            children
        ),
        _react2.default.createElement(
            _RenderIf2.default,
            { isTrue: footer && !isLoading },
            _react2.default.createElement(
                'footer',
                { className: 'rainbow-card_footer' },
                footer
            )
        )
    );
}

Card.propTypes = {
    /** The title can include text or another component,
     * and is displayed in the header of the component. */
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The icon to show if it is passed. It must be a svg icon or a font icon.
     * It is displayed in the header of the component. */
    icon: _propTypes2.default.node,
    /** Actions are components such as button or buttonIcon. Actions are displayed in the header. */
    actions: _propTypes2.default.node,
    /** The footer can include text or another component. */
    footer: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    /** The content of the Card. */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.object]),
    /** If is set to true, then is showed a loading symbol. */
    isLoading: _propTypes2.default.bool,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

Card.defaultProps = {
    title: null,
    icon: null,
    actions: null,
    footer: null,
    isLoading: false,
    className: undefined,
    style: undefined,
    children: null
};
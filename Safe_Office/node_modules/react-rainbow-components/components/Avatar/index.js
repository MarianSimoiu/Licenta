'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = Avatar;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _avatarContent = require('./avatarContent');

var _avatarContent2 = _interopRequireDefault(_avatarContent);

var _AssistiveText = require('./../AssistiveText');

var _AssistiveText2 = _interopRequireDefault(_AssistiveText);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

/**
 * An avatar component represents an object or entity
 */
function Avatar(props) {
    var className = props.className,
        style = props.style,
        size = props.size,
        assistiveText = props.assistiveText,
        rest = _objectWithoutProperties(props, ['className', 'style', 'size', 'assistiveText']);

    var getContainerClassNames = function getContainerClassNames() {
        return (0, _classnames2.default)('rainbow-avatar', 'rainbow-avatar--' + size, className);
    };

    return _react2.default.createElement(
        'span',
        { className: getContainerClassNames(), style: style },
        _react2.default.createElement(_avatarContent2.default, _extends({}, rest, { assistiveText: assistiveText })),
        _react2.default.createElement(_AssistiveText2.default, { text: assistiveText })
    );
}

Avatar.propTypes = {
    /** The URL for the image.
     * It take precedence over the initials and icon. */
    src: _propTypes2.default.string,
    /** If the record name contains two words, like first and last name,
     * use the first capitalized letter of each. For records that only have a single word name,
     * use the first two letters of that word using one capital and one lower case letter. */
    initials: _propTypes2.default.string,
    /** The fallback icon to show when src and initials are not passed. */
    icon: _propTypes2.default.node,
    /** The size of the avatar. Valid values are x-small, small, medium, and large.
     * It take precedence over the icon.
     * This value defaults to medium. */
    size: _propTypes2.default.oneOf(['x-small', 'small', 'medium', 'large']),
    /** The variant of the initials. Only make sense when initials is used. */
    initialsVariant: _propTypes2.default.oneOf(['default', 'inverse']),
    /** Displays tooltip text when the mouse moves over the element. */
    title: _propTypes2.default.string,
    /** A description for assistive sreen readers. */
    assistiveText: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object
};

Avatar.defaultProps = {
    src: undefined,
    initials: undefined,
    icon: null,
    size: 'medium',
    initialsVariant: 'default',
    title: undefined,
    assistiveText: undefined,
    className: undefined,
    style: undefined
};
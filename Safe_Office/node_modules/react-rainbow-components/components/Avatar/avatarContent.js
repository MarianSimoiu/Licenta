'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _normalizeInitials = require('./normalizeInitials');

var _normalizeInitials2 = _interopRequireDefault(_normalizeInitials);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable jsx-a11y/alt-text */


var AvatarContent = function (_Component) {
    _inherits(AvatarContent, _Component);

    function AvatarContent(props) {
        _classCallCheck(this, AvatarContent);

        var _this = _possibleConstructorReturn(this, (AvatarContent.__proto__ || Object.getPrototypeOf(AvatarContent)).call(this, props));

        _this.state = {
            imageFailed: false
        };

        _this.handleImageError = _this.handleImageError.bind(_this);
        return _this;
    }

    _createClass(AvatarContent, [{
        key: 'getClassNames',
        value: function getClassNames() {
            var initialsVariant = this.props.initialsVariant;

            return (0, _classnames2.default)('rainbow-avatar_initials', {
                'rainbow-avatar_initials--inverse': initialsVariant === 'inverse'
            });
        }
    }, {
        key: 'handleImageError',
        value: function handleImageError() {
            this.setState({ imageFailed: true });
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                src = _props.src,
                initials = _props.initials,
                title = _props.title,
                icon = _props.icon,
                assistiveText = _props.assistiveText;
            var imageFailed = this.state.imageFailed;

            if (src && !imageFailed) {
                return _react2.default.createElement('img', { src: src, onError: this.handleImageError, title: title, alt: assistiveText });
            } else if (initials) {
                return _react2.default.createElement(
                    'abbr',
                    { className: this.getClassNames(), title: title },
                    (0, _normalizeInitials2.default)(initials)
                );
            } else if (icon) {
                return _react2.default.createElement(
                    'span',
                    { className: this.getClassNames(), title: title },
                    icon
                );
            }
            return _react2.default.createElement('span', { className: this.getClassNames(), title: title });
        }
    }]);

    return AvatarContent;
}(_react.Component);

exports.default = AvatarContent;


AvatarContent.propTypes = {
    src: _propTypes2.default.string,
    initials: _propTypes2.default.string,
    initialsVariant: _propTypes2.default.string.isRequired,
    title: _propTypes2.default.string,
    icon: _propTypes2.default.node,
    assistiveText: _propTypes2.default.string
};

AvatarContent.defaultProps = {
    src: undefined,
    initials: undefined,
    title: undefined,
    icon: null,
    assistiveText: undefined
};
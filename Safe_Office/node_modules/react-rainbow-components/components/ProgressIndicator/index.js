'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _context = require('./context');

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A progress indicator component communicates to the user the progress of a particular process.
 */
var ProgressIndicator = function (_Component) {
    _inherits(ProgressIndicator, _Component);

    function ProgressIndicator(props) {
        _classCallCheck(this, ProgressIndicator);

        var _this = _possibleConstructorReturn(this, (ProgressIndicator.__proto__ || Object.getPrototypeOf(ProgressIndicator)).call(this, props));

        _this.stepChildren = [];
        _this.registerStep = _this.registerStep.bind(_this);
        _this.setChildrenState = _this.setChildrenState.bind(_this);
        return _this;
    }

    _createClass(ProgressIndicator, [{
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-progress-indicator', className);
        }
    }, {
        key: 'setChildrenState',
        value: function setChildrenState(step) {
            var currentStepName = this.props.currentStepName;

            var activeStepIndex = this.stepChildren.findIndex(function (item) {
                return item.name === currentStepName;
            });
            var currentChildIndex = this.stepChildren.findIndex(function (item) {
                return item.name === step.name;
            });

            if (currentChildIndex === activeStepIndex) {
                step.onSetStepState('Active');
            } else if (activeStepIndex === -1 || currentChildIndex < activeStepIndex) {
                step.onSetStepState('Completed');
            } else if (currentChildIndex > activeStepIndex) {
                step.onSetStepState('Inactive');
            }
        }
    }, {
        key: 'registerStep',
        value: function registerStep(step) {
            var newChildrenRefs = this.stepChildren.concat([step]);
            this.stepChildren = newChildrenRefs;
            this.setChildrenState(step);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                style = _props.style,
                children = _props.children,
                currentStepName = _props.currentStepName,
                onClick = _props.onClick;

            var context = {
                currentStepName: currentStepName,
                privateRegisterStep: this.registerStep,
                privateOnClick: onClick,
                setChildrenState: this.setChildrenState
            };

            return _react2.default.createElement(
                'div',
                { className: this.getContainerClassNames(), style: style },
                _react2.default.createElement(
                    'ol',
                    { className: 'rainbow-progress-indicator_list' },
                    _react2.default.createElement(
                        _context.Provider,
                        { value: context },
                        children
                    )
                ),
                _react2.default.createElement('div', { className: 'rainbow-progress-indicator_bar' })
            );
        }
    }]);

    return ProgressIndicator;
}(_react.Component);

exports.default = ProgressIndicator;


ProgressIndicator.propTypes = {
    /** The current step, which must match the name prop of one of ProgressStep components. */
    currentStepName: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The action triggered when the element is clicked. */
    onClick: _propTypes2.default.func,
    /**
     * This prop that should not be visible in the documentation.
     * @ignore
     */
    children: _propTypes2.default.node
};

ProgressIndicator.defaultProps = {
    currentStepName: '',
    className: undefined,
    style: undefined,
    onClick: function onClick() {},
    children: null
};
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _context = require('./context');

var _ButtonGroup = require('./../ButtonGroup');

var _ButtonGroup2 = _interopRequireDefault(_ButtonGroup);

var _ButtonIcon = require('./../ButtonIcon');

var _ButtonIcon2 = _interopRequireDefault(_ButtonIcon);

var _RenderIf = require('./../RenderIf');

var _RenderIf2 = _interopRequireDefault(_RenderIf);

var _constants = require('../../libs/constants');

var _utils = require('./utils');

var _rightThinChevron = require('./rightThinChevron');

var _rightThinChevron2 = _interopRequireDefault(_rightThinChevron);

var _leftThinChevron = require('./leftThinChevron');

var _leftThinChevron2 = _interopRequireDefault(_leftThinChevron);

var _ResizeSensor = require('../../libs/ResizeSensor');

var _ResizeSensor2 = _interopRequireDefault(_ResizeSensor);

var _debounce = require('../../libs/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-disable max-len */


var RIGHT_SIDE = 1;
var LEFT_SIDE = -1;

/**
 * Tabs make it easy to explore and switch between different views.
 * @category Layout
 */

var Tabset = function (_Component) {
    _inherits(Tabset, _Component);

    function Tabset(props) {
        var _this$keyHandlerMap;

        _classCallCheck(this, Tabset);

        var _this = _possibleConstructorReturn(this, (Tabset.__proto__ || Object.getPrototypeOf(Tabset)).call(this, props));

        _this.state = {
            tabsetChildren: [],
            areButtonsVisible: false
        };
        _this.isFirstTime = true;
        _this.tabsetRef = _react2.default.createRef();
        _this.resizeTarget = _react2.default.createRef();
        _this.registerTab = _this.registerTab.bind(_this);
        _this.unRegisterTab = _this.unRegisterTab.bind(_this);
        _this.updateTab = _this.updateTab.bind(_this);
        _this.handleKeyPressed = _this.handleKeyPressed.bind(_this);
        _this.handleLeftButtonClick = _this.handleLeftButtonClick.bind(_this);
        _this.handleRightButtonClick = _this.handleRightButtonClick.bind(_this);
        _this.updateButtonsVisibility = _this.updateButtonsVisibility.bind(_this);
        _this.handleSelect = _this.handleSelect.bind(_this);
        _this.keyHandlerMap = (_this$keyHandlerMap = {}, _defineProperty(_this$keyHandlerMap, _constants.RIGHT_KEY, function () {
            return _this.selectTab(RIGHT_SIDE);
        }), _defineProperty(_this$keyHandlerMap, _constants.LEFT_KEY, function () {
            return _this.selectTab(LEFT_SIDE);
        }), _this$keyHandlerMap);
        return _this;
    }

    _createClass(Tabset, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            this.widthObserver = new _ResizeSensor2.default(this.resizeTarget.current, (0, _debounce2.default)(this.updateButtonsVisibility, 100));
        }
    }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProp) {
            var tabsetChildren = this.state.tabsetChildren;
            var isFirstTime = this.isFirstTime;
            var children = this.props.children;

            var areAllChildrenRegistered = children.length === tabsetChildren.length;
            if ((0, _utils.isNotSameChildren)(children, prevProp.children)) {
                this.updateButtonsVisibility();
            }
            if (areAllChildrenRegistered && isFirstTime) {
                this.updateButtonsVisibility();
                this.isFirstTime = false;
            }
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            this.widthObserver.detach(this.resizeTarget.current);
        }
    }, {
        key: 'getContainerClassName',
        value: function getContainerClassName() {
            var className = this.props.className;

            return (0, _classnames2.default)('rainbow-tabset_container', className);
        }
    }, {
        key: 'getInnerContainerClassName',
        value: function getInnerContainerClassName() {
            var fullWidth = this.props.fullWidth;

            return (0, _classnames2.default)('rainbow-tabset_inner-container', {
                'rainbow-tabset_inner-container--full-width': fullWidth
            });
        }
    }, {
        key: 'setAsSelectedTab',
        value: function setAsSelectedTab(tabIndex) {
            var tabsetChildren = this.state.tabsetChildren;

            tabsetChildren[tabIndex].ref.click();
            tabsetChildren[tabIndex].ref.focus();
        }
    }, {
        key: 'updateButtonsVisibility',
        value: function updateButtonsVisibility() {
            var tabsetChildren = this.state.tabsetChildren;

            var tabset = this.tabsetRef.current;
            var scrollWidth = tabset.scrollWidth,
                scrollLeft = tabset.scrollLeft,
                tabsetWidth = tabset.offsetWidth;

            var childrenTotalWidth = (0, _utils.getChildrenTotalWidth)(tabsetChildren);
            var showButtons = childrenTotalWidth > tabsetWidth;
            this.screenWidth = window.innerWidth;
            this.scrollLeft = scrollLeft;
            this.maxScroll = scrollWidth - tabsetWidth;
            this.tabsetWidth = tabsetWidth;
            this.setState({ areButtonsVisible: showButtons });
        }
    }, {
        key: 'handleKeyPressed',
        value: function handleKeyPressed(event) {
            if (this.keyHandlerMap[event.keyCode]) {
                return this.keyHandlerMap[event.keyCode]();
            }
            return null;
        }
    }, {
        key: 'selectTab',
        value: function selectTab(side) {
            var activeTabName = this.props.activeTabName;
            var tabsetChildren = this.state.tabsetChildren;

            var activeTabIndex = (0, _utils.getTabIndexFromName)(tabsetChildren, activeTabName);

            if (activeTabIndex === tabsetChildren.length - 1 && side === RIGHT_SIDE) {
                this.setAsSelectedTab(0);
            } else if (activeTabIndex === 0 && side === LEFT_SIDE) {
                this.setAsSelectedTab(tabsetChildren.length - 1);
            } else {
                this.setAsSelectedTab(activeTabIndex + side);
            }
        }
    }, {
        key: 'isLeftButtonDisabled',
        value: function isLeftButtonDisabled() {
            var activeTabName = this.props.activeTabName;
            var tabsetChildren = this.state.tabsetChildren;
            var screenWidth = this.screenWidth,
                scrollLeft = this.scrollLeft;

            return (0, _utils.getLeftButtonDisabledState)({
                activeTabName: activeTabName,
                tabsetChildren: tabsetChildren,
                screenWidth: screenWidth,
                scrollLeft: scrollLeft
            });
        }
    }, {
        key: 'isRightButtonDisabled',
        value: function isRightButtonDisabled() {
            var activeTabName = this.props.activeTabName;
            var tabsetChildren = this.state.tabsetChildren;
            var screenWidth = this.screenWidth,
                scrollLeft = this.scrollLeft,
                maxScroll = this.maxScroll;

            return (0, _utils.getRightButtonDisabledState)({
                activeTabName: activeTabName,
                tabsetChildren: tabsetChildren,
                screenWidth: screenWidth,
                scrollLeft: scrollLeft,
                maxScroll: maxScroll
            });
        }
    }, {
        key: 'handleRightButtonClick',
        value: function handleRightButtonClick() {
            var screenWidth = this.screenWidth,
                tabsetWidth = this.tabsetWidth,
                scrollLeft = this.scrollLeft;

            if (screenWidth > 600) {
                return this.tabsetRef.current.scrollTo(scrollLeft + tabsetWidth, 0);
            }
            return this.selectTab(RIGHT_SIDE);
        }
    }, {
        key: 'handleLeftButtonClick',
        value: function handleLeftButtonClick() {
            var screenWidth = this.screenWidth,
                tabsetWidth = this.tabsetWidth,
                scrollLeft = this.scrollLeft;

            if (screenWidth > 600) {
                return this.tabsetRef.current.scrollTo(scrollLeft - tabsetWidth, 0);
            }
            return this.selectTab(LEFT_SIDE);
        }
    }, {
        key: 'updateTab',
        value: function updateTab(tab, nameToUpdate) {
            var tabsetChildren = this.state.tabsetChildren;

            var newTabsetChildren = (0, _utils.getUpdatedTabsetChildren)(tabsetChildren, tab, nameToUpdate);
            this.setState({ tabsetChildren: newTabsetChildren });
        }
    }, {
        key: 'registerTab',
        value: function registerTab(tab) {
            var tabsetChildren = this.state.tabsetChildren;

            var _getChildTabNodes = (0, _utils.getChildTabNodes)(this.tabsetRef.current),
                _getChildTabNodes2 = _toArray(_getChildTabNodes),
                nodes = _getChildTabNodes2.slice(0);

            var newChildrenRefs = (0, _utils.insertChildOrderly)(tabsetChildren, tab, nodes);
            this.setState({ tabsetChildren: newChildrenRefs });
        }
    }, {
        key: 'unRegisterTab',
        value: function unRegisterTab(tabName) {
            var tabsetChildren = this.state.tabsetChildren;

            var newTabsetChildren = tabsetChildren.filter(function (tab) {
                return tab.name !== tabName;
            });
            this.setState({ tabsetChildren: newTabsetChildren });
        }
    }, {
        key: 'scrollToSelectedTab',
        value: function scrollToSelectedTab(name) {
            var tabsetChildren = this.state.tabsetChildren;

            var tabset = this.tabsetRef.current;
            var scrollLeft = tabset.scrollLeft,
                tabsetWidth = tabset.offsetWidth;

            var tabIndex = (0, _utils.getTabIndexFromName)(tabsetChildren, name);
            var isFirstTab = tabIndex === 0;

            if (isFirstTab) {
                this.tabsetRef.current.scrollTo(0, 0);
            } else {
                var totalWidthUpToCurrentTab = (0, _utils.getChildrenTotalWidthUpToClickedTab)(tabsetChildren, tabIndex + 1);
                var totalWidthUpToPrevTab = (0, _utils.getChildrenTotalWidthUpToClickedTab)(tabsetChildren, tabIndex);
                var tabsetWidthUpToCurrentTab = tabsetWidth + scrollLeft;
                var isCurrentTabOutOfViewOnRightSide = totalWidthUpToCurrentTab > tabsetWidthUpToCurrentTab - 20;
                var isCurrentTabOutOfViewOnLeftSide = scrollLeft > totalWidthUpToPrevTab;
                if (isCurrentTabOutOfViewOnLeftSide) {
                    this.tabsetRef.current.scrollTo(totalWidthUpToPrevTab, 0);
                }
                if (isCurrentTabOutOfViewOnRightSide) {
                    var moveScroll = totalWidthUpToCurrentTab - tabsetWidthUpToCurrentTab + 20;
                    this.tabsetRef.current.scrollTo(scrollLeft + moveScroll, 0);
                }
            }
        }
    }, {
        key: 'handleSelect',
        value: function handleSelect(e, name) {
            var onSelect = this.props.onSelect;

            this.scrollToSelectedTab(name);
            onSelect(e, name);
        }
    }, {
        key: 'render',
        value: function render() {
            var _props = this.props,
                activeTabName = _props.activeTabName,
                fullWidth = _props.fullWidth,
                children = _props.children,
                style = _props.style,
                id = _props.id;
            var areButtonsVisible = this.state.areButtonsVisible;
            var screenWidth = this.screenWidth;

            var showButtons = areButtonsVisible || screenWidth < 600;
            var context = {
                activeTabName: activeTabName,
                onSelect: this.handleSelect,
                privateRegisterTab: this.registerTab,
                privateUnRegisterTab: this.unRegisterTab,
                privateUpdateTab: this.updateTab,
                fullWidth: fullWidth
            };

            return _react2.default.createElement(
                'div',
                { className: this.getContainerClassName(), style: style, id: id },
                _react2.default.createElement('div', { className: 'rainbow-tabset-width-observer', ref: this.resizeTarget }),
                _react2.default.createElement(
                    'div',
                    { className: 'rainbow-tabset' },
                    _react2.default.createElement(
                        'ul',
                        {
                            className: this.getInnerContainerClassName(),
                            role: 'tablist',
                            onKeyDown: this.handleKeyPressed,
                            onScroll: this.updateButtonsVisibility,
                            ref: this.tabsetRef
                        },
                        _react2.default.createElement(
                            _context.Provider,
                            { value: context },
                            children
                        )
                    ),
                    _react2.default.createElement(
                        _RenderIf2.default,
                        { isTrue: showButtons },
                        _react2.default.createElement(
                            _ButtonGroup2.default,
                            { className: 'rainbow-tabset_button-group' },
                            _react2.default.createElement(_ButtonIcon2.default, {
                                className: 'rainbow-tabset_button-icon',
                                icon: _react2.default.createElement(_leftThinChevron2.default, null),
                                disabled: this.isLeftButtonDisabled(),
                                onClick: this.handleLeftButtonClick,
                                assistiveText: 'previus tab button',
                                variant: 'border-filled'
                            }),
                            _react2.default.createElement(_ButtonIcon2.default, {
                                className: 'rainbow-tabset_button-icon',
                                icon: _react2.default.createElement(_rightThinChevron2.default, null),
                                disabled: this.isRightButtonDisabled(),
                                onClick: this.handleRightButtonClick,
                                assistiveText: 'next tab button',
                                variant: 'border-filled'
                            })
                        )
                    )
                )
            );
        }
    }]);

    return Tabset;
}(_react.Component);

exports.default = Tabset;


Tabset.propTypes = {
    /** The name of the tab that is selected. It must match the name of the tab. */
    activeTabName: _propTypes2.default.node,
    /** Action fired when an item is selected.
     * The event params include the `name` of the selected item. */
    onSelect: _propTypes2.default.func,
    /** If true, the tabs will grow to use all the available space.
     * This value defaults to false. */
    fullWidth: _propTypes2.default.bool,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied for the outer element. */
    style: _propTypes2.default.object,
    /**
     * This prop that should not be visible in the documentation.
     * @ignore
     */
    children: _propTypes2.default.node
};

Tabset.defaultProps = {
    activeTabName: undefined,
    onSelect: function onSelect() {},
    fullWidth: false,
    className: undefined,
    style: undefined,
    children: null,
    id: undefined
};
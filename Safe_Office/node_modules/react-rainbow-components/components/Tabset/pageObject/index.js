'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PageTab = require('../../Tab/pageObject');

var BUTTON_SELECTOR = '.rainbow-tabset_button-icon';

/**
 * Tabset page object class.
 * @class
 */

var PageTabset = function () {
    /**
     * Create a new Tabset page object.
     * @constructor
     * @param {string} rootElement - The selector of the Tabset root element.
     */
    function PageTabset(rootElement) {
        _classCallCheck(this, PageTabset);

        this.rootElement = rootElement;
    }

    /**
     * Returns a new Tab page object of the element in item position.
     * @method
     * @param {number} itemPosition - The base 0 index of the tab item.
     */


    _createClass(PageTabset, [{
        key: 'getItem',
        value: function getItem(itemPosition) {
            var items = $(this.rootElement).$$('.rainbow-tab');
            if (items[itemPosition]) {
                return new PageTab(this.rootElement + ' .rainbow-tab:nth-child(' + (itemPosition + 1) + ')');
            }
            return null;
        }

        /**
         * Returns true when buttons are visible.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isButtonsVisible',
        value: function isButtonsVisible() {
            var buttons = $(this.rootElement).$$(BUTTON_SELECTOR);
            if (buttons && buttons.length) {
                return buttons[0].isDisplayed() && buttons[1].isDisplayed();
            }
            return false;
        }

        /**
         * Returns true when the left button is enabled.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isLeftButtonEnabled',
        value: function isLeftButtonEnabled() {
            return $(this.rootElement).$$(BUTTON_SELECTOR)[0].isEnabled();
        }

        /**
         * Returns true when the right button is enabled.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'isRightButtonEnabled',
        value: function isRightButtonEnabled() {
            return $(this.rootElement).$$(BUTTON_SELECTOR)[1].isEnabled();
        }

        /**
         * Click the left button.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'clickLeftButton',
        value: function clickLeftButton() {
            return $(this.rootElement).$$(BUTTON_SELECTOR)[0].click();
        }

        /**
         * Click the right button.
         * @method
         * @returns {bool}
         */

    }, {
        key: 'clickRightButton',
        value: function clickRightButton() {
            return $(this.rootElement).$$(BUTTON_SELECTOR)[1].click();
        }
    }]);

    return PageTabset;
}();

module.exports = PageTabset;
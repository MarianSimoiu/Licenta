'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _pageButtons = require('../pageButtons');

var _pageButtons2 = _interopRequireDefault(_pageButtons);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<PageButtons />', function () {
    it('should render 5 children if pages is grater than 4', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_pageButtons2.default, { pages: 7, onChange: function onChange() {}, activePage: 3 }));
        var buttons = component.find('li');
        expect(buttons.length).toBe(5);
    });
    it('should render as many children as pages if pages is less than 4', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_pageButtons2.default, { pages: 4, onChange: function onChange() {}, activePage: 3 }));
        var buttons = component.find('li');
        expect(buttons.length).toBe(4);
    });
    it('should set the right className to the active page button', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_pageButtons2.default, { pages: 7, onChange: function onChange() {}, activePage: 3 }));
        var pageButtons = component.find('li.rainbow-pagination_button');
        expect(pageButtons.get(2).props.className).toBe('rainbow-pagination_button');
    });
    it('should set aria-current to "page" to the active anchor element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_pageButtons2.default, { pages: 7, onChange: function onChange() {}, activePage: 3 }));
        var pageButtons = component.find('a');
        expect(pageButtons.get(2).props['aria-current']).toBe('page');
    });
    it('should set aria-current to undefined to the anchor element if is not active', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_pageButtons2.default, { pages: 7, onChange: function onChange() {}, activePage: 3 }));
        var pageButtons = component.find('a');
        expect(pageButtons.get(1).props['aria-current']).toBe(undefined);
    });
    it('should set aria-label to the anchor elements', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_pageButtons2.default, { pages: 7, onChange: function onChange() {}, activePage: 3 }));
        var pageButtons = component.find('a');
        expect(pageButtons.get(1).props['aria-label']).toBe('Goto Page 2');
    });
    it('should call onChange if a page button is clicked', function () {
        var onChangeMockFn = jest.fn();
        var component = (0, _enzyme.mount)(_react2.default.createElement(_pageButtons2.default, { pages: 1, onChange: onChangeMockFn, activePage: 1 }));
        var anchor = component.find('a');
        anchor.simulate('click');
        expect(onChangeMockFn).toHaveBeenCalledWith(expect.any(Object), 1);
    });
});
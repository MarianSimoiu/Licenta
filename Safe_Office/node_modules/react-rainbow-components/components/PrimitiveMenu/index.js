'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _menuContent = require('./menuContent');

var _menuContent2 = _interopRequireDefault(_menuContent);

var _context = require('./context');

var _utils = require('./utils');

var _constants = require('./../../libs/constants');

require('./styles.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var PrimitiveMenu = function (_Component) {
    _inherits(PrimitiveMenu, _Component);

    function PrimitiveMenu(props) {
        _classCallCheck(this, PrimitiveMenu);

        var _this = _possibleConstructorReturn(this, (PrimitiveMenu.__proto__ || Object.getPrototypeOf(PrimitiveMenu)).call(this, props));

        _this.containerRef = _react2.default.createRef();
        _this.triggerRef = _react2.default.createRef();
        _this.toggleMenu = _this.toggleMenu.bind(_this);
        _this.handleKeyEscapePressed = _this.handleKeyEscapePressed.bind(_this);
        _this.handleKeyPressed = _this.handleKeyPressed.bind(_this);
        _this.handleKeyDownPressed = _this.handleKeyDownPressed.bind(_this);
        _this.handleKeyUpPressed = _this.handleKeyUpPressed.bind(_this);
        _this.handleKeyEnterPressed = _this.handleKeyEnterPressed.bind(_this);
        _this.handleClick = _this.handleClick.bind(_this);
        _this.closeMenu = _this.closeMenu.bind(_this);
        _this.hoverChild = _this.hoverChild.bind(_this);

        _this.registerChild = _this.registerChild.bind(_this);
        _this.unregisterChild = _this.unregisterChild.bind(_this);

        _this.state = {
            isOpen: false,
            childrenRefs: [],
            childFocusedIndex: -1,
            context: {
                privateOnClose: _this.closeMenu,
                privateRegisterChild: _this.registerChild,
                privateUnregisterChild: _this.unregisterChild,
                privateOnHover: _this.hoverChild
            }
        };
        return _this;
    }

    _createClass(PrimitiveMenu, [{
        key: 'getContainerClassNames',
        value: function getContainerClassNames() {
            var isOpen = this.state.isOpen;
            var className = this.props.className;


            return (0, _classnames2.default)('rainbow-primitive-menu', {
                'rainbow-primitive-menu--open': isOpen
            }, className);
        }
    }, {
        key: 'getDropdownClassNames',
        value: function getDropdownClassNames() {
            var _props = this.props,
                menuAlignment = _props.menuAlignment,
                menuSize = _props.menuSize,
                isLoading = _props.isLoading;

            return (0, _classnames2.default)('rainbow-primitive-menu_dropdown', 'rainbow-primitive-menu_dropdown--' + menuAlignment, 'rainbow-primitive-menu_dropdown--' + menuSize, { 'rainbow-primitive-menu_dropdown--loading-box': isLoading });
        }
    }, {
        key: 'focusChild',
        value: function focusChild(index) {
            var isLoading = this.props.isLoading;
            var childrenRefs = this.state.childrenRefs;


            if (isLoading || !childrenRefs[index]) {
                return null;
            }
            this.setState({ childFocusedIndex: index });
            return childrenRefs[index].focus();
        }
    }, {
        key: 'handleKeyEscapePressed',
        value: function handleKeyEscapePressed() {
            this.toggleMenu();
            return this.triggerRef.current.focus();
        }
    }, {
        key: 'handleKeyDownPressed',
        value: function handleKeyDownPressed() {
            var _state = this.state,
                childrenRefs = _state.childrenRefs,
                childFocusedIndex = _state.childFocusedIndex;

            var lastChild = childrenRefs.length - 1;
            var isLastChild = childFocusedIndex === lastChild;
            var isBetweenFirstAndLast = childFocusedIndex >= 0 && !isLastChild;
            var isInvalidIndexOrLast = childFocusedIndex === -1 || isLastChild;

            if (isBetweenFirstAndLast) {
                return this.focusChild(childFocusedIndex + 1);
            }
            if (isInvalidIndexOrLast) {
                return this.focusChild(0);
            }
            return null;
        }
    }, {
        key: 'handleKeyUpPressed',
        value: function handleKeyUpPressed() {
            var _state2 = this.state,
                childrenRefs = _state2.childrenRefs,
                childFocusedIndex = _state2.childFocusedIndex;

            var isFirstChild = childFocusedIndex === 0;
            var isValidIndexGreaterThanFirst = childFocusedIndex >= 0 && !isFirstChild;
            var isInvalidIndexOrFirst = childFocusedIndex === -1 || isFirstChild;
            var lastChild = childrenRefs.length - 1;

            if (isValidIndexGreaterThanFirst) {
                return this.focusChild(childFocusedIndex - 1);
            }
            if (isInvalidIndexOrFirst) {
                return this.focusChild(lastChild);
            }
            return null;
        }
    }, {
        key: 'handleKeyEnterPressed',
        value: function handleKeyEnterPressed() {
            var _state3 = this.state,
                childrenRefs = _state3.childrenRefs,
                childFocusedIndex = _state3.childFocusedIndex;

            var isValidIndex = childFocusedIndex >= 0;
            if (isValidIndex) {
                return childrenRefs[childFocusedIndex].click();
            }
            return null;
        }
    }, {
        key: 'focusMatchedItem',
        value: function focusMatchedItem(matchedItem) {
            var childrenRefs = this.state.childrenRefs;

            var itemIndex = (0, _utils.findItemIndex)(childrenRefs, matchedItem);
            return this.focusChild(itemIndex);
        }
    }, {
        key: 'findItemByKeyPressed',
        value: function findItemByKeyPressed(key) {
            var _state4 = this.state,
                childrenRefs = _state4.childrenRefs,
                childFocusedIndex = _state4.childFocusedIndex,
                matchedKeyPressed = _state4.matchedKeyPressed;

            if (matchedKeyPressed) {
                var _newChildrenRefs = childrenRefs.slice(childFocusedIndex + 1);
                var _matchedItem = (0, _utils.findItemByKey)(key, _newChildrenRefs);
                if (_matchedItem) {
                    return this.focusMatchedItem(_matchedItem);
                }
                var newMatchedItem = (0, _utils.findItemByKey)(key, childrenRefs);
                if (newMatchedItem) this.focusChild((0, _utils.findItemIndex)(childrenRefs, newMatchedItem));
                return null;
            }
            var newChildrenRefs = childrenRefs.slice(childFocusedIndex + 1);
            var matchedItem = (0, _utils.findItemByKey)(key, newChildrenRefs);
            if (matchedItem) {
                this.setState({ matchedKeyPressed: key });
                return this.focusMatchedItem(matchedItem);
            }
            return null;
        }
    }, {
        key: 'handleKeyPressed',
        value: function handleKeyPressed(event) {
            var isOpen = this.state.isOpen;

            if (isOpen) {
                var _keyHandlerMap;

                if (event.keyCode !== _constants.TAB_KEY) event.preventDefault();
                var keyHandlerMap = (_keyHandlerMap = {}, _defineProperty(_keyHandlerMap, _constants.DOWN_KEY, this.handleKeyDownPressed), _defineProperty(_keyHandlerMap, _constants.UP_KEY, this.handleKeyUpPressed), _defineProperty(_keyHandlerMap, _constants.ESCAPE_KEY, this.handleKeyEscapePressed), _defineProperty(_keyHandlerMap, _constants.TAB_KEY, this.toggleMenu), _defineProperty(_keyHandlerMap, _constants.ENTER_KEY, this.handleKeyEnterPressed), _keyHandlerMap);
                if (keyHandlerMap[event.keyCode]) {
                    return keyHandlerMap[event.keyCode]();
                }
                return this.findItemByKeyPressed(event.key);
            }
            return null;
        }
    }, {
        key: 'registerChild',
        value: function registerChild(childRef) {
            var childrenRefs = this.state.childrenRefs;

            var _getChildMenuItemNode = (0, _utils.getChildMenuItemNodes)(this.containerRef.current),
                _getChildMenuItemNode2 = _toArray(_getChildMenuItemNode),
                nodes = _getChildMenuItemNode2.slice(0);

            var newChildrenRefs = (0, _utils.insertChildOrderly)(childrenRefs, childRef, nodes);
            this.setState({
                childrenRefs: newChildrenRefs
            });
        }
    }, {
        key: 'unregisterChild',
        value: function unregisterChild(childRef) {
            var childrenRefs = this.state.childrenRefs;

            var newChildrenRefs = childrenRefs.filter(function (child) {
                return child !== childRef;
            });
            this.setState({
                childrenRefs: newChildrenRefs
            });
        }
    }, {
        key: 'hoverChild',
        value: function hoverChild(event, childRef) {
            return this.focusMatchedItem(childRef);
        }
    }, {
        key: 'handleClick',
        value: function handleClick(event) {
            var isClickInsidePrimitiveMenu = this.containerRef.current.contains(event.target);
            if (isClickInsidePrimitiveMenu) {
                return null;
            }
            return this.closeMenu();
        }
    }, {
        key: 'openMenu',
        value: function openMenu() {
            var _this2 = this;

            window.addEventListener('click', this.handleClick);
            window.addEventListener('touchstart', this.handleClick);
            setTimeout(function () {
                return _this2.focusChild(0);
            }, 0);
            return this.setState({
                isOpen: true
            });
        }
    }, {
        key: 'closeMenu',
        value: function closeMenu() {
            window.removeEventListener('click', this.handleClick);
            window.removeEventListener('touchstart', this.handleClick);
            return this.setState({
                isOpen: false,
                childFocusedIndex: -1
            });
        }
    }, {
        key: 'toggleMenu',
        value: function toggleMenu() {
            var isOpen = this.state.isOpen;

            if (isOpen) {
                return this.closeMenu();
            }
            return this.openMenu();
        }

        /**
         * Sets focus on the element.
         * @public
         */

    }, {
        key: 'focus',
        value: function focus() {
            this.triggerRef.current.focus();
        }

        /**
         * Sets click on the element.
         * @public
         */

    }, {
        key: 'click',
        value: function click() {
            this.triggerRef.current.click();
        }

        /**
         * Sets blur on the element.
         * @public
         */

    }, {
        key: 'blur',
        value: function blur() {
            this.triggerRef.current.blur();
        }
    }, {
        key: 'render',
        value: function render() {
            var _props2 = this.props,
                style = _props2.style,
                title = _props2.title,
                assistiveText = _props2.assistiveText,
                isLoading = _props2.isLoading,
                children = _props2.children,
                id = _props2.id,
                className = _props2.className,
                menuAlignment = _props2.menuAlignment,
                menuSize = _props2.menuSize,
                Trigger = _props2.trigger,
                rest = _objectWithoutProperties(_props2, ['style', 'title', 'assistiveText', 'isLoading', 'children', 'id', 'className', 'menuAlignment', 'menuSize', 'trigger']);

            var _state5 = this.state,
                context = _state5.context,
                isOpen = _state5.isOpen;

            var ariaLabel = title || assistiveText;

            return _react2.default.createElement(
                'div',
                {
                    id: id,
                    role: 'presentation',
                    className: this.getContainerClassNames(),
                    style: style,
                    onKeyDown: this.handleKeyPressed,
                    ref: this.containerRef
                },
                _react2.default.createElement(Trigger, _extends({}, rest, {
                    isOpen: isOpen,
                    title: title,
                    ariaExpanded: isOpen,
                    ariaHaspopup: true,
                    assistiveText: assistiveText,
                    onClick: this.toggleMenu,
                    ref: this.triggerRef
                })),
                _react2.default.createElement(
                    'div',
                    { className: this.getDropdownClassNames() },
                    _react2.default.createElement(
                        'ul',
                        { role: 'menu', 'aria-label': ariaLabel },
                        _react2.default.createElement(
                            _menuContent2.default,
                            { isLoading: isLoading },
                            _react2.default.createElement(
                                _context.Provider,
                                { value: context },
                                children
                            )
                        )
                    )
                )
            );
        }
    }]);

    return PrimitiveMenu;
}(_react.Component);

exports.default = PrimitiveMenu;


PrimitiveMenu.propTypes = {
    /** The content of the PrimitiveMenu. Used to render the menuItem elements
     * when the PrimitiveMenu is open. */
    children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.object]),
    /** The size of the menu. Options include xx-small, x-small, medium, or large.
     * This value defaults to xx-small. */
    menuSize: _propTypes2.default.oneOf(['xx-small', 'x-small', 'small', 'medium', 'large']),
    /** Determines the alignment of the menu relative to the trigger element.
     * Available options are: left, center, right, bottom, bottom-left, bottom-right.
     * This value defaults to left. */
    menuAlignment: _propTypes2.default.oneOf(['left', 'right', 'bottom', 'center', 'bottom-right', 'bottom-left']),
    /** If is set to true, then is showed a loading symbol. */
    isLoading: _propTypes2.default.bool,
    /** Displays tooltip text when the mouse moves over the element. */
    title: _propTypes2.default.string,
    /** A description for assistive sreen readers. */
    assistiveText: _propTypes2.default.string,
    /** A CSS class for the outer element, in addition to the component's base classes. */
    className: _propTypes2.default.string,
    /** An object with custom style applied to the outer element. */
    style: _propTypes2.default.object,
    /** The id of the outer element. */
    id: _propTypes2.default.string,
    /** The trigger element. */
    trigger: _propTypes2.default.func.isRequired
};

PrimitiveMenu.defaultProps = {
    children: null,
    menuSize: 'xx-small',
    menuAlignment: 'left',
    isLoading: false,
    title: undefined,
    assistiveText: undefined,
    className: undefined,
    style: undefined,
    id: undefined
};
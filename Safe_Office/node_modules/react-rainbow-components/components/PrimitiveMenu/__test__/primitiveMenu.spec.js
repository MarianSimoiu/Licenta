'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('./../');

var _2 = _interopRequireDefault(_);

var _ButtonIcon = require('../../ButtonIcon');

var _ButtonIcon2 = _interopRequireDefault(_ButtonIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<PrimitiveMenu/>', function () {
    it('should focus the button when the focus method is called', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { trigger: _ButtonIcon2.default }));

        component.instance().focus();
        var focusedElementDataId = document.activeElement.getAttribute('data-id');
        var buttonDataId = component.find('button').prop('data-id');
        expect(focusedElementDataId).toBe(buttonDataId);
    });
    it('should blur the button when the blur method is called', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(_2.default, { trigger: _ButtonIcon2.default }));
        var instance = component.instance();
        var buttonDataId = component.find('button').prop('data-id');

        instance.focus();
        expect(document.activeElement.getAttribute('data-id')).toBe(buttonDataId);
        instance.blur();
        expect(document.activeElement.getAttribute('data-id')).toBeNull();
    });
    it('should set the isLoading passed in the MenuContent', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, isLoading: true },
            _react2.default.createElement('span', null)
        ));
        expect(component.find('MenuContent').prop('isLoading')).toBe(true);
    });
    it('should render the children passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default },
            _react2.default.createElement(
                'span',
                { 'data-id': 'menu-children' },
                'menu content'
            )
        ));
        expect(component.find('span[data-id="menu-children"]').text()).toBe('menu content');
    });
    it('should set the role as menu in the ul element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default },
            _react2.default.createElement('span', null)
        ));
        expect(component.find('ul').prop('role')).toBe('menu');
    });
    it('should set the title passed as the aria-label in the ul element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            {
                trigger: _ButtonIcon2.default,
                title: 'button title',
                assistiveText: 'assistive description'
            },
            _react2.default.createElement('span', null)
        ));
        expect(component.find('ul').prop('aria-label')).toBe('button title');
    });
    it('should set the assistiveText passed as the aria-label in the ul element when the title is not passed', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, assistiveText: 'assistive description' },
            _react2.default.createElement('span', null)
        ));
        expect(component.find('ul').prop('aria-label')).toBe('assistive description');
    });
    it('should have the right class names in the container element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default },
            _react2.default.createElement('span', null)
        ));
        expect(component.find('div[role="presentation"]').prop('className')).toBe('rainbow-primitive-menu');
    });
    it('should have the right class names in the container element when the menu is opened', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default },
            _react2.default.createElement('span', null)
        ));
        component.find('button').simulate('click');
        expect(component.find('div[role="presentation"]').prop('className')).toBe('rainbow-primitive-menu rainbow-primitive-menu--open');
    });
    it('should have the right class names in the menu dropdown element', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--left rainbow-primitive-menu_dropdown--xx-small');
    });
    it('should have the right class names when menuAlignment is left and isLoading is true', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuAlignment: 'left', isLoading: true },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--left rainbow-primitive-menu_dropdown--xx-small rainbow-primitive-menu_dropdown--loading-box');
    });
    it('should have the right class names when menuAlignment is right and menuSize is xx-small', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuAlignment: 'right', menuSize: 'xx-small' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--right rainbow-primitive-menu_dropdown--xx-small');
    });
    it('should have the right class names when menuAlignment is center', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuAlignment: 'center' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--center rainbow-primitive-menu_dropdown--xx-small');
    });
    it('should have the right class names when menuAlignment is bottom', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuAlignment: 'bottom' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--bottom rainbow-primitive-menu_dropdown--xx-small');
    });
    it('should have the right class names when menuAlignment is bottom-right', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuAlignment: 'bottom-right' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--bottom-right rainbow-primitive-menu_dropdown--xx-small');
    });
    it('should have the right class names when menuAlignment is bottom-left', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuAlignment: 'bottom-left' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--bottom-left rainbow-primitive-menu_dropdown--xx-small');
    });
    it('should have the right class names when menuSize is x-small', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuSize: 'x-small' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--left rainbow-primitive-menu_dropdown--x-small');
    });
    it('should have the right class names when menuSize is small', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuSize: 'small' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--left rainbow-primitive-menu_dropdown--small');
    });
    it('should have the right class names when menuSize is medium', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuSize: 'medium' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--left rainbow-primitive-menu_dropdown--medium');
    });
    it('should have the right class names when menuSize is large', function () {
        var component = (0, _enzyme.mount)(_react2.default.createElement(
            _2.default,
            { trigger: _ButtonIcon2.default, menuSize: 'large' },
            _react2.default.createElement('span', null)
        ));
        var dropdown = component.find('ul[role="menu"]').parent();
        expect(dropdown.prop('className')).toBe('rainbow-primitive-menu_dropdown rainbow-primitive-menu_dropdown--left rainbow-primitive-menu_dropdown--large');
    });
});
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.default = getUpdatedColumns;\n\nvar _getTotalWidthsMetadata = require('./getTotalWidthsMetadata');\n\nvar _getTotalWidthsMetadata2 = _interopRequireDefault(_getTotalWidthsMetadata);\n\nvar _getExpectedTableWidth = require('./getExpectedTableWidth');\n\nvar _getExpectedTableWidth2 = _interopRequireDefault(_getExpectedTableWidth);\n\nvar _getExpectedFlexibleColumnWidth = require('./getExpectedFlexibleColumnWidth');\n\nvar _getExpectedFlexibleColumnWidth2 = _interopRequireDefault(_getExpectedFlexibleColumnWidth);\n\nvar _getColumnWidthFromDef = require('./getColumnWidthFromDef');\n\nvar _getColumnWidthFromDef2 = _interopRequireDefault(_getColumnWidthFromDef);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getUpdatedColumns(params) {\n  var columns = params.columns,\n      domTableWidth = params.domTableWidth,\n      minColumnWidth = params.minColumnWidth,\n      maxColumnWidth = params.maxColumnWidth;\n  var widthsMeta = (0, _getTotalWidthsMetadata2.default)({\n    columns: columns,\n    minColumnWidth: Number(minColumnWidth),\n    maxColumnWidth: Number(maxColumnWidth)\n  });\n  var expectedTableWidth = (0, _getExpectedTableWidth2.default)(domTableWidth, widthsMeta);\n  var expectedFlexibleColumnWidth = (0, _getExpectedFlexibleColumnWidth2.default)(widthsMeta, expectedTableWidth);\n  return columns.map(function (column) {\n    return _extends({}, column, {\n      computedWidth: (0, _getColumnWidthFromDef2.default)(column) || expectedFlexibleColumnWidth\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Marian/Desktop/My work/Licenta/Safe_Office/node_modules/react-rainbow-components/components/Table/helpers/resizer/getUpdatedColumns.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","default","getUpdatedColumns","_getTotalWidthsMetadata","require","_getTotalWidthsMetadata2","_interopRequireDefault","_getExpectedTableWidth","_getExpectedTableWidth2","_getExpectedFlexibleColumnWidth","_getExpectedFlexibleColumnWidth2","_getColumnWidthFromDef","_getColumnWidthFromDef2","obj","__esModule","params","columns","domTableWidth","minColumnWidth","maxColumnWidth","widthsMeta","Number","expectedTableWidth","expectedFlexibleColumnWidth","map","column","computedWidth"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGJ,MAAM,CAACK,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIV,MAAM,CAACY,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEAJ,OAAO,CAACa,OAAR,GAAkBC,iBAAlB;;AAEA,IAAIC,uBAAuB,GAAGC,OAAO,CAAC,0BAAD,CAArC;;AAEA,IAAIC,wBAAwB,GAAGC,sBAAsB,CAACH,uBAAD,CAArD;;AAEA,IAAII,sBAAsB,GAAGH,OAAO,CAAC,yBAAD,CAApC;;AAEA,IAAII,uBAAuB,GAAGF,sBAAsB,CAACC,sBAAD,CAApD;;AAEA,IAAIE,+BAA+B,GAAGL,OAAO,CAAC,kCAAD,CAA7C;;AAEA,IAAIM,gCAAgC,GAAGJ,sBAAsB,CAACG,+BAAD,CAA7D;;AAEA,IAAIE,sBAAsB,GAAGP,OAAO,CAAC,yBAAD,CAApC;;AAEA,IAAIQ,uBAAuB,GAAGN,sBAAsB,CAACK,sBAAD,CAApD;;AAEA,SAASL,sBAAT,CAAgCO,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEZ,IAAAA,OAAO,EAAEY;AAAX,GAArC;AAAwD;;AAE/F,SAASX,iBAAT,CAA2Ba,MAA3B,EAAmC;AAC/B,MAAIC,OAAO,GAAGD,MAAM,CAACC,OAArB;AAAA,MACIC,aAAa,GAAGF,MAAM,CAACE,aAD3B;AAAA,MAEIC,cAAc,GAAGH,MAAM,CAACG,cAF5B;AAAA,MAGIC,cAAc,GAAGJ,MAAM,CAACI,cAH5B;AAKA,MAAIC,UAAU,GAAG,CAAC,GAAGf,wBAAwB,CAACJ,OAA7B,EAAsC;AACnDe,IAAAA,OAAO,EAAEA,OAD0C;AAEnDE,IAAAA,cAAc,EAAEG,MAAM,CAACH,cAAD,CAF6B;AAGnDC,IAAAA,cAAc,EAAEE,MAAM,CAACF,cAAD;AAH6B,GAAtC,CAAjB;AAKA,MAAIG,kBAAkB,GAAG,CAAC,GAAGd,uBAAuB,CAACP,OAA5B,EAAqCgB,aAArC,EAAoDG,UAApD,CAAzB;AACA,MAAIG,2BAA2B,GAAG,CAAC,GAAGb,gCAAgC,CAACT,OAArC,EAA8CmB,UAA9C,EAA0DE,kBAA1D,CAAlC;AAEA,SAAON,OAAO,CAACQ,GAAR,CAAY,UAAUC,MAAV,EAAkB;AACjC,WAAOnC,QAAQ,CAAC,EAAD,EAAKmC,MAAL,EAAa;AACxBC,MAAAA,aAAa,EAAE,CAAC,GAAGd,uBAAuB,CAACX,OAA5B,EAAqCwB,MAArC,KAAgDF;AADvC,KAAb,CAAf;AAGH,GAJM,CAAP;AAKH","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nexports.default = getUpdatedColumns;\n\nvar _getTotalWidthsMetadata = require('./getTotalWidthsMetadata');\n\nvar _getTotalWidthsMetadata2 = _interopRequireDefault(_getTotalWidthsMetadata);\n\nvar _getExpectedTableWidth = require('./getExpectedTableWidth');\n\nvar _getExpectedTableWidth2 = _interopRequireDefault(_getExpectedTableWidth);\n\nvar _getExpectedFlexibleColumnWidth = require('./getExpectedFlexibleColumnWidth');\n\nvar _getExpectedFlexibleColumnWidth2 = _interopRequireDefault(_getExpectedFlexibleColumnWidth);\n\nvar _getColumnWidthFromDef = require('./getColumnWidthFromDef');\n\nvar _getColumnWidthFromDef2 = _interopRequireDefault(_getColumnWidthFromDef);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getUpdatedColumns(params) {\n    var columns = params.columns,\n        domTableWidth = params.domTableWidth,\n        minColumnWidth = params.minColumnWidth,\n        maxColumnWidth = params.maxColumnWidth;\n\n    var widthsMeta = (0, _getTotalWidthsMetadata2.default)({\n        columns: columns,\n        minColumnWidth: Number(minColumnWidth),\n        maxColumnWidth: Number(maxColumnWidth)\n    });\n    var expectedTableWidth = (0, _getExpectedTableWidth2.default)(domTableWidth, widthsMeta);\n    var expectedFlexibleColumnWidth = (0, _getExpectedFlexibleColumnWidth2.default)(widthsMeta, expectedTableWidth);\n\n    return columns.map(function (column) {\n        return _extends({}, column, {\n            computedWidth: (0, _getColumnWidthFromDef2.default)(column) || expectedFlexibleColumnWidth\n        });\n    });\n}"]},"metadata":{},"sourceType":"script"}